/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGCSHARP
#define SWIGCSHARP
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_pjsua2(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_pjsua2(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_pjsua2(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include "pjsua2.hpp"
using namespace std;
using namespace pj;


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <algorithm>
#include <stdexcept>

SWIGINTERN std::vector< std::string > *new_std_vector_Sl_std_string_Sg___SWIG_2(int capacity){
        std::vector< std::string >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< std::string >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN std::string std_vector_Sl_std_string_Sg__getitemcopy(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::string const &std_vector_Sl_std_string_Sg__getitem(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__setitem(std::vector< std::string > *self,int index,std::string const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__AddRange(std::vector< std::string > *self,std::vector< std::string > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__GetRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< std::string >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Insert(std::vector< std::string > *self,int index,std::string const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__InsertRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveAt(std::vector< std::string > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__RemoveRange(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< std::string > *std_vector_Sl_std_string_Sg__Repeat(std::string const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< std::string >(count, value);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_0(std::vector< std::string > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__Reverse__SWIG_1(std::vector< std::string > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_std_string_Sg__SetRange(std::vector< std::string > *self,int index,std::vector< std::string > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Contains(std::vector< std::string > *self,std::string const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__IndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_std_string_Sg__LastIndexOf(std::vector< std::string > *self,std::string const &value){
        int index = -1;
        std::vector< std::string >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_std_string_Sg__Remove(std::vector< std::string > *self,std::string const &value){
        std::vector< std::string >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< int > *new_std_vector_Sl_int_Sg___SWIG_2(int capacity){
        std::vector< int >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< int >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN int std_vector_Sl_int_Sg__getitemcopy(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN int const &std_vector_Sl_int_Sg__getitem(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__setitem(std::vector< int > *self,int index,int const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__AddRange(std::vector< int > *self,std::vector< int > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__GetRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< int >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Insert(std::vector< int > *self,int index,int const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__InsertRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveAt(std::vector< int > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_int_Sg__RemoveRange(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< int > *std_vector_Sl_int_Sg__Repeat(int const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< int >(count, value);
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_0(std::vector< int > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_int_Sg__Reverse__SWIG_1(std::vector< int > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_int_Sg__SetRange(std::vector< int > *self,int index,std::vector< int > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Contains(std::vector< int > *self,int const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_int_Sg__IndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_int_Sg__LastIndexOf(std::vector< int > *self,int const &value){
        int index = -1;
        std::vector< int >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_int_Sg__Remove(std::vector< int > *self,int const &value){
        std::vector< int >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< pj::SipHeader > *new_std_vector_Sl_pj_SipHeader_Sg___SWIG_2(int capacity){
        std::vector< pj::SipHeader >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::SipHeader >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::SipHeader std_vector_Sl_pj_SipHeader_Sg__getitemcopy(std::vector< pj::SipHeader > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::SipHeader const &std_vector_Sl_pj_SipHeader_Sg__getitem(std::vector< pj::SipHeader > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__setitem(std::vector< pj::SipHeader > *self,int index,pj::SipHeader const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__AddRange(std::vector< pj::SipHeader > *self,std::vector< pj::SipHeader > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::SipHeader > *std_vector_Sl_pj_SipHeader_Sg__GetRange(std::vector< pj::SipHeader > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::SipHeader >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__Insert(std::vector< pj::SipHeader > *self,int index,pj::SipHeader const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__InsertRange(std::vector< pj::SipHeader > *self,int index,std::vector< pj::SipHeader > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__RemoveAt(std::vector< pj::SipHeader > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__RemoveRange(std::vector< pj::SipHeader > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::SipHeader > *std_vector_Sl_pj_SipHeader_Sg__Repeat(pj::SipHeader const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::SipHeader >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__Reverse__SWIG_0(std::vector< pj::SipHeader > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__Reverse__SWIG_1(std::vector< pj::SipHeader > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SipHeader_Sg__SetRange(std::vector< pj::SipHeader > *self,int index,std::vector< pj::SipHeader > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::AuthCredInfo > *new_std_vector_Sl_pj_AuthCredInfo_Sg___SWIG_2(int capacity){
        std::vector< pj::AuthCredInfo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::AuthCredInfo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::AuthCredInfo std_vector_Sl_pj_AuthCredInfo_Sg__getitemcopy(std::vector< pj::AuthCredInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::AuthCredInfo const &std_vector_Sl_pj_AuthCredInfo_Sg__getitem(std::vector< pj::AuthCredInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__setitem(std::vector< pj::AuthCredInfo > *self,int index,pj::AuthCredInfo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__AddRange(std::vector< pj::AuthCredInfo > *self,std::vector< pj::AuthCredInfo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::AuthCredInfo > *std_vector_Sl_pj_AuthCredInfo_Sg__GetRange(std::vector< pj::AuthCredInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::AuthCredInfo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__Insert(std::vector< pj::AuthCredInfo > *self,int index,pj::AuthCredInfo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__InsertRange(std::vector< pj::AuthCredInfo > *self,int index,std::vector< pj::AuthCredInfo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__RemoveAt(std::vector< pj::AuthCredInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__RemoveRange(std::vector< pj::AuthCredInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::AuthCredInfo > *std_vector_Sl_pj_AuthCredInfo_Sg__Repeat(pj::AuthCredInfo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::AuthCredInfo >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__Reverse__SWIG_0(std::vector< pj::AuthCredInfo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__Reverse__SWIG_1(std::vector< pj::AuthCredInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AuthCredInfo_Sg__SetRange(std::vector< pj::AuthCredInfo > *self,int index,std::vector< pj::AuthCredInfo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::SrtpCrypto > *new_std_vector_Sl_pj_SrtpCrypto_Sg___SWIG_2(int capacity){
        std::vector< pj::SrtpCrypto >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::SrtpCrypto >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::SrtpCrypto std_vector_Sl_pj_SrtpCrypto_Sg__getitemcopy(std::vector< pj::SrtpCrypto > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::SrtpCrypto const &std_vector_Sl_pj_SrtpCrypto_Sg__getitem(std::vector< pj::SrtpCrypto > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__setitem(std::vector< pj::SrtpCrypto > *self,int index,pj::SrtpCrypto const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__AddRange(std::vector< pj::SrtpCrypto > *self,std::vector< pj::SrtpCrypto > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::SrtpCrypto > *std_vector_Sl_pj_SrtpCrypto_Sg__GetRange(std::vector< pj::SrtpCrypto > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::SrtpCrypto >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__Insert(std::vector< pj::SrtpCrypto > *self,int index,pj::SrtpCrypto const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__InsertRange(std::vector< pj::SrtpCrypto > *self,int index,std::vector< pj::SrtpCrypto > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__RemoveAt(std::vector< pj::SrtpCrypto > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__RemoveRange(std::vector< pj::SrtpCrypto > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::SrtpCrypto > *std_vector_Sl_pj_SrtpCrypto_Sg__Repeat(pj::SrtpCrypto const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::SrtpCrypto >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__Reverse__SWIG_0(std::vector< pj::SrtpCrypto > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__Reverse__SWIG_1(std::vector< pj::SrtpCrypto > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SrtpCrypto_Sg__SetRange(std::vector< pj::SrtpCrypto > *self,int index,std::vector< pj::SrtpCrypto > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::SipMultipartPart > *new_std_vector_Sl_pj_SipMultipartPart_Sg___SWIG_2(int capacity){
        std::vector< pj::SipMultipartPart >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::SipMultipartPart >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::SipMultipartPart std_vector_Sl_pj_SipMultipartPart_Sg__getitemcopy(std::vector< pj::SipMultipartPart > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::SipMultipartPart const &std_vector_Sl_pj_SipMultipartPart_Sg__getitem(std::vector< pj::SipMultipartPart > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__setitem(std::vector< pj::SipMultipartPart > *self,int index,pj::SipMultipartPart const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__AddRange(std::vector< pj::SipMultipartPart > *self,std::vector< pj::SipMultipartPart > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::SipMultipartPart > *std_vector_Sl_pj_SipMultipartPart_Sg__GetRange(std::vector< pj::SipMultipartPart > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::SipMultipartPart >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__Insert(std::vector< pj::SipMultipartPart > *self,int index,pj::SipMultipartPart const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__InsertRange(std::vector< pj::SipMultipartPart > *self,int index,std::vector< pj::SipMultipartPart > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__RemoveAt(std::vector< pj::SipMultipartPart > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__RemoveRange(std::vector< pj::SipMultipartPart > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::SipMultipartPart > *std_vector_Sl_pj_SipMultipartPart_Sg__Repeat(pj::SipMultipartPart const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::SipMultipartPart >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__Reverse__SWIG_0(std::vector< pj::SipMultipartPart > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__Reverse__SWIG_1(std::vector< pj::SipMultipartPart > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_SipMultipartPart_Sg__SetRange(std::vector< pj::SipMultipartPart > *self,int index,std::vector< pj::SipMultipartPart > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::Buddy * > *new_std_vector_Sl_pj_Buddy_Sm__Sg___SWIG_2(int capacity){
        std::vector< pj::Buddy * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::Buddy * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::Buddy *std_vector_Sl_pj_Buddy_Sm__Sg__getitemcopy(std::vector< pj::Buddy * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::Buddy *const &std_vector_Sl_pj_Buddy_Sm__Sg__getitem(std::vector< pj::Buddy * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__setitem(std::vector< pj::Buddy * > *self,int index,pj::Buddy *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__AddRange(std::vector< pj::Buddy * > *self,std::vector< pj::Buddy * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::Buddy * > *std_vector_Sl_pj_Buddy_Sm__Sg__GetRange(std::vector< pj::Buddy * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::Buddy * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__Insert(std::vector< pj::Buddy * > *self,int index,pj::Buddy *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__InsertRange(std::vector< pj::Buddy * > *self,int index,std::vector< pj::Buddy * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__RemoveAt(std::vector< pj::Buddy * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__RemoveRange(std::vector< pj::Buddy * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::Buddy * > *std_vector_Sl_pj_Buddy_Sm__Sg__Repeat(pj::Buddy *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::Buddy * >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__Reverse__SWIG_0(std::vector< pj::Buddy * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__Reverse__SWIG_1(std::vector< pj::Buddy * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_Buddy_Sm__Sg__SetRange(std::vector< pj::Buddy * > *self,int index,std::vector< pj::Buddy * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_pj_Buddy_Sm__Sg__Contains(std::vector< pj::Buddy * > *self,pj::Buddy *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_pj_Buddy_Sm__Sg__IndexOf(std::vector< pj::Buddy * > *self,pj::Buddy *const &value){
        int index = -1;
        std::vector< pj::Buddy * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_pj_Buddy_Sm__Sg__LastIndexOf(std::vector< pj::Buddy * > *self,pj::Buddy *const &value){
        int index = -1;
        std::vector< pj::Buddy * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_pj_Buddy_Sm__Sg__Remove(std::vector< pj::Buddy * > *self,pj::Buddy *const &value){
        std::vector< pj::Buddy * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< pj::AudioMedia * > *new_std_vector_Sl_pj_AudioMedia_Sm__Sg___SWIG_2(int capacity){
        std::vector< pj::AudioMedia * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::AudioMedia * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::AudioMedia *std_vector_Sl_pj_AudioMedia_Sm__Sg__getitemcopy(std::vector< pj::AudioMedia * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::AudioMedia *const &std_vector_Sl_pj_AudioMedia_Sm__Sg__getitem(std::vector< pj::AudioMedia * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__setitem(std::vector< pj::AudioMedia * > *self,int index,pj::AudioMedia *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__AddRange(std::vector< pj::AudioMedia * > *self,std::vector< pj::AudioMedia * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::AudioMedia * > *std_vector_Sl_pj_AudioMedia_Sm__Sg__GetRange(std::vector< pj::AudioMedia * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::AudioMedia * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__Insert(std::vector< pj::AudioMedia * > *self,int index,pj::AudioMedia *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__InsertRange(std::vector< pj::AudioMedia * > *self,int index,std::vector< pj::AudioMedia * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__RemoveAt(std::vector< pj::AudioMedia * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__RemoveRange(std::vector< pj::AudioMedia * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::AudioMedia * > *std_vector_Sl_pj_AudioMedia_Sm__Sg__Repeat(pj::AudioMedia *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::AudioMedia * >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__Reverse__SWIG_0(std::vector< pj::AudioMedia * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__Reverse__SWIG_1(std::vector< pj::AudioMedia * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AudioMedia_Sm__Sg__SetRange(std::vector< pj::AudioMedia * > *self,int index,std::vector< pj::AudioMedia * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_pj_AudioMedia_Sm__Sg__Contains(std::vector< pj::AudioMedia * > *self,pj::AudioMedia *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_pj_AudioMedia_Sm__Sg__IndexOf(std::vector< pj::AudioMedia * > *self,pj::AudioMedia *const &value){
        int index = -1;
        std::vector< pj::AudioMedia * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_pj_AudioMedia_Sm__Sg__LastIndexOf(std::vector< pj::AudioMedia * > *self,pj::AudioMedia *const &value){
        int index = -1;
        std::vector< pj::AudioMedia * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_pj_AudioMedia_Sm__Sg__Remove(std::vector< pj::AudioMedia * > *self,pj::AudioMedia *const &value){
        std::vector< pj::AudioMedia * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< pj::ToneDesc > *new_std_vector_Sl_pj_ToneDesc_Sg___SWIG_2(int capacity){
        std::vector< pj::ToneDesc >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::ToneDesc >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::ToneDesc std_vector_Sl_pj_ToneDesc_Sg__getitemcopy(std::vector< pj::ToneDesc > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::ToneDesc const &std_vector_Sl_pj_ToneDesc_Sg__getitem(std::vector< pj::ToneDesc > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__setitem(std::vector< pj::ToneDesc > *self,int index,pj::ToneDesc const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__AddRange(std::vector< pj::ToneDesc > *self,std::vector< pj::ToneDesc > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::ToneDesc > *std_vector_Sl_pj_ToneDesc_Sg__GetRange(std::vector< pj::ToneDesc > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::ToneDesc >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__Insert(std::vector< pj::ToneDesc > *self,int index,pj::ToneDesc const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__InsertRange(std::vector< pj::ToneDesc > *self,int index,std::vector< pj::ToneDesc > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__RemoveAt(std::vector< pj::ToneDesc > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__RemoveRange(std::vector< pj::ToneDesc > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::ToneDesc > *std_vector_Sl_pj_ToneDesc_Sg__Repeat(pj::ToneDesc const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::ToneDesc >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__Reverse__SWIG_0(std::vector< pj::ToneDesc > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__Reverse__SWIG_1(std::vector< pj::ToneDesc > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDesc_Sg__SetRange(std::vector< pj::ToneDesc > *self,int index,std::vector< pj::ToneDesc > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::ToneDigit > *new_std_vector_Sl_pj_ToneDigit_Sg___SWIG_2(int capacity){
        std::vector< pj::ToneDigit >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::ToneDigit >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::ToneDigit std_vector_Sl_pj_ToneDigit_Sg__getitemcopy(std::vector< pj::ToneDigit > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::ToneDigit const &std_vector_Sl_pj_ToneDigit_Sg__getitem(std::vector< pj::ToneDigit > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__setitem(std::vector< pj::ToneDigit > *self,int index,pj::ToneDigit const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__AddRange(std::vector< pj::ToneDigit > *self,std::vector< pj::ToneDigit > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::ToneDigit > *std_vector_Sl_pj_ToneDigit_Sg__GetRange(std::vector< pj::ToneDigit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::ToneDigit >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__Insert(std::vector< pj::ToneDigit > *self,int index,pj::ToneDigit const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__InsertRange(std::vector< pj::ToneDigit > *self,int index,std::vector< pj::ToneDigit > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__RemoveAt(std::vector< pj::ToneDigit > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__RemoveRange(std::vector< pj::ToneDigit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::ToneDigit > *std_vector_Sl_pj_ToneDigit_Sg__Repeat(pj::ToneDigit const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::ToneDigit >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__Reverse__SWIG_0(std::vector< pj::ToneDigit > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__Reverse__SWIG_1(std::vector< pj::ToneDigit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigit_Sg__SetRange(std::vector< pj::ToneDigit > *self,int index,std::vector< pj::ToneDigit > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::ToneDigitMapDigit > *new_std_vector_Sl_pj_ToneDigitMapDigit_Sg___SWIG_2(int capacity){
        std::vector< pj::ToneDigitMapDigit >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::ToneDigitMapDigit >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::ToneDigitMapDigit std_vector_Sl_pj_ToneDigitMapDigit_Sg__getitemcopy(std::vector< pj::ToneDigitMapDigit > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::ToneDigitMapDigit const &std_vector_Sl_pj_ToneDigitMapDigit_Sg__getitem(std::vector< pj::ToneDigitMapDigit > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__setitem(std::vector< pj::ToneDigitMapDigit > *self,int index,pj::ToneDigitMapDigit const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__AddRange(std::vector< pj::ToneDigitMapDigit > *self,std::vector< pj::ToneDigitMapDigit > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::ToneDigitMapDigit > *std_vector_Sl_pj_ToneDigitMapDigit_Sg__GetRange(std::vector< pj::ToneDigitMapDigit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::ToneDigitMapDigit >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__Insert(std::vector< pj::ToneDigitMapDigit > *self,int index,pj::ToneDigitMapDigit const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__InsertRange(std::vector< pj::ToneDigitMapDigit > *self,int index,std::vector< pj::ToneDigitMapDigit > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__RemoveAt(std::vector< pj::ToneDigitMapDigit > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__RemoveRange(std::vector< pj::ToneDigitMapDigit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::ToneDigitMapDigit > *std_vector_Sl_pj_ToneDigitMapDigit_Sg__Repeat(pj::ToneDigitMapDigit const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::ToneDigitMapDigit >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__Reverse__SWIG_0(std::vector< pj::ToneDigitMapDigit > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__Reverse__SWIG_1(std::vector< pj::ToneDigitMapDigit > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_ToneDigitMapDigit_Sg__SetRange(std::vector< pj::ToneDigitMapDigit > *self,int index,std::vector< pj::ToneDigitMapDigit > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::vector< pj::MediaFormat * > *new_std_vector_Sl_pj_MediaFormat_Sm__Sg___SWIG_2(int capacity){
        std::vector< pj::MediaFormat * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::MediaFormat * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::MediaFormat *std_vector_Sl_pj_MediaFormat_Sm__Sg__getitemcopy(std::vector< pj::MediaFormat * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::MediaFormat *const &std_vector_Sl_pj_MediaFormat_Sm__Sg__getitem(std::vector< pj::MediaFormat * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormat_Sm__Sg__setitem(std::vector< pj::MediaFormat * > *self,int index,pj::MediaFormat *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormat_Sm__Sg__AddRange(std::vector< pj::MediaFormat * > *self,std::vector< pj::MediaFormat * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::MediaFormat * > *std_vector_Sl_pj_MediaFormat_Sm__Sg__GetRange(std::vector< pj::MediaFormat * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::MediaFormat * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormat_Sm__Sg__Insert(std::vector< pj::MediaFormat * > *self,int index,pj::MediaFormat *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormat_Sm__Sg__InsertRange(std::vector< pj::MediaFormat * > *self,int index,std::vector< pj::MediaFormat * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormat_Sm__Sg__RemoveAt(std::vector< pj::MediaFormat * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormat_Sm__Sg__RemoveRange(std::vector< pj::MediaFormat * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::MediaFormat * > *std_vector_Sl_pj_MediaFormat_Sm__Sg__Repeat(pj::MediaFormat *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::MediaFormat * >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormat_Sm__Sg__Reverse__SWIG_0(std::vector< pj::MediaFormat * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormat_Sm__Sg__Reverse__SWIG_1(std::vector< pj::MediaFormat * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_MediaFormat_Sm__Sg__SetRange(std::vector< pj::MediaFormat * > *self,int index,std::vector< pj::MediaFormat * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_pj_MediaFormat_Sm__Sg__Contains(std::vector< pj::MediaFormat * > *self,pj::MediaFormat *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_pj_MediaFormat_Sm__Sg__IndexOf(std::vector< pj::MediaFormat * > *self,pj::MediaFormat *const &value){
        int index = -1;
        std::vector< pj::MediaFormat * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_pj_MediaFormat_Sm__Sg__LastIndexOf(std::vector< pj::MediaFormat * > *self,pj::MediaFormat *const &value){
        int index = -1;
        std::vector< pj::MediaFormat * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_pj_MediaFormat_Sm__Sg__Remove(std::vector< pj::MediaFormat * > *self,pj::MediaFormat *const &value){
        std::vector< pj::MediaFormat * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< pj::AudioDevInfo * > *new_std_vector_Sl_pj_AudioDevInfo_Sm__Sg___SWIG_2(int capacity){
        std::vector< pj::AudioDevInfo * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::AudioDevInfo * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::AudioDevInfo *std_vector_Sl_pj_AudioDevInfo_Sm__Sg__getitemcopy(std::vector< pj::AudioDevInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::AudioDevInfo *const &std_vector_Sl_pj_AudioDevInfo_Sm__Sg__getitem(std::vector< pj::AudioDevInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__setitem(std::vector< pj::AudioDevInfo * > *self,int index,pj::AudioDevInfo *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__AddRange(std::vector< pj::AudioDevInfo * > *self,std::vector< pj::AudioDevInfo * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::AudioDevInfo * > *std_vector_Sl_pj_AudioDevInfo_Sm__Sg__GetRange(std::vector< pj::AudioDevInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::AudioDevInfo * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Insert(std::vector< pj::AudioDevInfo * > *self,int index,pj::AudioDevInfo *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__InsertRange(std::vector< pj::AudioDevInfo * > *self,int index,std::vector< pj::AudioDevInfo * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__RemoveAt(std::vector< pj::AudioDevInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__RemoveRange(std::vector< pj::AudioDevInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::AudioDevInfo * > *std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Repeat(pj::AudioDevInfo *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::AudioDevInfo * >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Reverse__SWIG_0(std::vector< pj::AudioDevInfo * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Reverse__SWIG_1(std::vector< pj::AudioDevInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_AudioDevInfo_Sm__Sg__SetRange(std::vector< pj::AudioDevInfo * > *self,int index,std::vector< pj::AudioDevInfo * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Contains(std::vector< pj::AudioDevInfo * > *self,pj::AudioDevInfo *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_pj_AudioDevInfo_Sm__Sg__IndexOf(std::vector< pj::AudioDevInfo * > *self,pj::AudioDevInfo *const &value){
        int index = -1;
        std::vector< pj::AudioDevInfo * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_pj_AudioDevInfo_Sm__Sg__LastIndexOf(std::vector< pj::AudioDevInfo * > *self,pj::AudioDevInfo *const &value){
        int index = -1;
        std::vector< pj::AudioDevInfo * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Remove(std::vector< pj::AudioDevInfo * > *self,pj::AudioDevInfo *const &value){
        std::vector< pj::AudioDevInfo * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< pj::CodecInfo * > *new_std_vector_Sl_pj_CodecInfo_Sm__Sg___SWIG_2(int capacity){
        std::vector< pj::CodecInfo * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::CodecInfo * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::CodecInfo *std_vector_Sl_pj_CodecInfo_Sm__Sg__getitemcopy(std::vector< pj::CodecInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::CodecInfo *const &std_vector_Sl_pj_CodecInfo_Sm__Sg__getitem(std::vector< pj::CodecInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__setitem(std::vector< pj::CodecInfo * > *self,int index,pj::CodecInfo *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__AddRange(std::vector< pj::CodecInfo * > *self,std::vector< pj::CodecInfo * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::CodecInfo * > *std_vector_Sl_pj_CodecInfo_Sm__Sg__GetRange(std::vector< pj::CodecInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::CodecInfo * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__Insert(std::vector< pj::CodecInfo * > *self,int index,pj::CodecInfo *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__InsertRange(std::vector< pj::CodecInfo * > *self,int index,std::vector< pj::CodecInfo * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__RemoveAt(std::vector< pj::CodecInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__RemoveRange(std::vector< pj::CodecInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::CodecInfo * > *std_vector_Sl_pj_CodecInfo_Sm__Sg__Repeat(pj::CodecInfo *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::CodecInfo * >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__Reverse__SWIG_0(std::vector< pj::CodecInfo * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__Reverse__SWIG_1(std::vector< pj::CodecInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_CodecInfo_Sm__Sg__SetRange(std::vector< pj::CodecInfo * > *self,int index,std::vector< pj::CodecInfo * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_pj_CodecInfo_Sm__Sg__Contains(std::vector< pj::CodecInfo * > *self,pj::CodecInfo *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_pj_CodecInfo_Sm__Sg__IndexOf(std::vector< pj::CodecInfo * > *self,pj::CodecInfo *const &value){
        int index = -1;
        std::vector< pj::CodecInfo * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_pj_CodecInfo_Sm__Sg__LastIndexOf(std::vector< pj::CodecInfo * > *self,pj::CodecInfo *const &value){
        int index = -1;
        std::vector< pj::CodecInfo * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_pj_CodecInfo_Sm__Sg__Remove(std::vector< pj::CodecInfo * > *self,pj::CodecInfo *const &value){
        std::vector< pj::CodecInfo * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< pj::VideoDevInfo * > *new_std_vector_Sl_pj_VideoDevInfo_Sm__Sg___SWIG_2(int capacity){
        std::vector< pj::VideoDevInfo * >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::VideoDevInfo * >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::VideoDevInfo *std_vector_Sl_pj_VideoDevInfo_Sm__Sg__getitemcopy(std::vector< pj::VideoDevInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::VideoDevInfo *const &std_vector_Sl_pj_VideoDevInfo_Sm__Sg__getitem(std::vector< pj::VideoDevInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__setitem(std::vector< pj::VideoDevInfo * > *self,int index,pj::VideoDevInfo *const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__AddRange(std::vector< pj::VideoDevInfo * > *self,std::vector< pj::VideoDevInfo * > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::VideoDevInfo * > *std_vector_Sl_pj_VideoDevInfo_Sm__Sg__GetRange(std::vector< pj::VideoDevInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::VideoDevInfo * >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Insert(std::vector< pj::VideoDevInfo * > *self,int index,pj::VideoDevInfo *const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__InsertRange(std::vector< pj::VideoDevInfo * > *self,int index,std::vector< pj::VideoDevInfo * > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__RemoveAt(std::vector< pj::VideoDevInfo * > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__RemoveRange(std::vector< pj::VideoDevInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::VideoDevInfo * > *std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Repeat(pj::VideoDevInfo *const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::VideoDevInfo * >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Reverse__SWIG_0(std::vector< pj::VideoDevInfo * > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Reverse__SWIG_1(std::vector< pj::VideoDevInfo * > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_VideoDevInfo_Sm__Sg__SetRange(std::vector< pj::VideoDevInfo * > *self,int index,std::vector< pj::VideoDevInfo * > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN bool std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Contains(std::vector< pj::VideoDevInfo * > *self,pj::VideoDevInfo *const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN int std_vector_Sl_pj_VideoDevInfo_Sm__Sg__IndexOf(std::vector< pj::VideoDevInfo * > *self,pj::VideoDevInfo *const &value){
        int index = -1;
        std::vector< pj::VideoDevInfo * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end())
          index = (int)(it - self->begin());
        return index;
      }
SWIGINTERN int std_vector_Sl_pj_VideoDevInfo_Sm__Sg__LastIndexOf(std::vector< pj::VideoDevInfo * > *self,pj::VideoDevInfo *const &value){
        int index = -1;
        std::vector< pj::VideoDevInfo * >::reverse_iterator rit = std::find(self->rbegin(), self->rend(), value);
        if (rit != self->rend())
          index = (int)(self->rend() - 1 - rit);
        return index;
      }
SWIGINTERN bool std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Remove(std::vector< pj::VideoDevInfo * > *self,pj::VideoDevInfo *const &value){
        std::vector< pj::VideoDevInfo * >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::vector< pj::CodecFmtp > *new_std_vector_Sl_pj_CodecFmtp_Sg___SWIG_2(int capacity){
        std::vector< pj::CodecFmtp >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::CodecFmtp >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::CodecFmtp std_vector_Sl_pj_CodecFmtp_Sg__getitemcopy(std::vector< pj::CodecFmtp > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::CodecFmtp const &std_vector_Sl_pj_CodecFmtp_Sg__getitem(std::vector< pj::CodecFmtp > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__setitem(std::vector< pj::CodecFmtp > *self,int index,pj::CodecFmtp const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__AddRange(std::vector< pj::CodecFmtp > *self,std::vector< pj::CodecFmtp > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::CodecFmtp > *std_vector_Sl_pj_CodecFmtp_Sg__GetRange(std::vector< pj::CodecFmtp > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::CodecFmtp >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__Insert(std::vector< pj::CodecFmtp > *self,int index,pj::CodecFmtp const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__InsertRange(std::vector< pj::CodecFmtp > *self,int index,std::vector< pj::CodecFmtp > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__RemoveAt(std::vector< pj::CodecFmtp > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__RemoveRange(std::vector< pj::CodecFmtp > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::CodecFmtp > *std_vector_Sl_pj_CodecFmtp_Sg__Repeat(pj::CodecFmtp const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::CodecFmtp >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__Reverse__SWIG_0(std::vector< pj::CodecFmtp > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__Reverse__SWIG_1(std::vector< pj::CodecFmtp > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_CodecFmtp_Sg__SetRange(std::vector< pj::CodecFmtp > *self,int index,std::vector< pj::CodecFmtp > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN void pj_WindowHandle_setWindow(pj::WindowHandle *self,long long hwnd){ self->window = (void*)hwnd; }
SWIGINTERN std::vector< pj::CallMediaInfo > *new_std_vector_Sl_pj_CallMediaInfo_Sg___SWIG_2(int capacity){
        std::vector< pj::CallMediaInfo >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector< pj::CallMediaInfo >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN pj::CallMediaInfo std_vector_Sl_pj_CallMediaInfo_Sg__getitemcopy(std::vector< pj::CallMediaInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN pj::CallMediaInfo const &std_vector_Sl_pj_CallMediaInfo_Sg__getitem(std::vector< pj::CallMediaInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__setitem(std::vector< pj::CallMediaInfo > *self,int index,pj::CallMediaInfo const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__AddRange(std::vector< pj::CallMediaInfo > *self,std::vector< pj::CallMediaInfo > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< pj::CallMediaInfo > *std_vector_Sl_pj_CallMediaInfo_Sg__GetRange(std::vector< pj::CallMediaInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector< pj::CallMediaInfo >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__Insert(std::vector< pj::CallMediaInfo > *self,int index,pj::CallMediaInfo const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__InsertRange(std::vector< pj::CallMediaInfo > *self,int index,std::vector< pj::CallMediaInfo > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__RemoveAt(std::vector< pj::CallMediaInfo > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__RemoveRange(std::vector< pj::CallMediaInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< pj::CallMediaInfo > *std_vector_Sl_pj_CallMediaInfo_Sg__Repeat(pj::CallMediaInfo const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector< pj::CallMediaInfo >(count, value);
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__Reverse__SWIG_0(std::vector< pj::CallMediaInfo > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__Reverse__SWIG_1(std::vector< pj::CallMediaInfo > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_pj_CallMediaInfo_Sg__SetRange(std::vector< pj::CallMediaInfo > *self,int index,std::vector< pj::CallMediaInfo > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "pjsua2_wrap.h"

SwigDirector_AudioMediaPlayer::SwigDirector_AudioMediaPlayer() : pj::AudioMediaPlayer(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_AudioMediaPlayer::~SwigDirector_AudioMediaPlayer() {
  
}


bool SwigDirector_AudioMediaPlayer::onEof() {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  
  if (!swig_callbackonEof) {
    return pj::AudioMediaPlayer::onEof();
  } else {
    jresult = (unsigned int) swig_callbackonEof();
    c_result = jresult ? true : false; 
  }
  return c_result;
}

void SwigDirector_AudioMediaPlayer::swig_connect_director(SWIG_Callback0_t callbackonEof) {
  swig_callbackonEof = callbackonEof;
}

void SwigDirector_AudioMediaPlayer::swig_init_callbacks() {
  swig_callbackonEof = 0;
}

SwigDirector_Buddy::SwigDirector_Buddy() : pj::Buddy(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Buddy::~SwigDirector_Buddy() {
  
}


void SwigDirector_Buddy::onBuddyState() {
  if (!swig_callbackonBuddyState) {
    pj::Buddy::onBuddyState();
    return;
  } else {
    swig_callbackonBuddyState();
  }
}

void SwigDirector_Buddy::onBuddyEvSubState(pj::OnBuddyEvSubStateParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonBuddyEvSubState) {
    pj::Buddy::onBuddyEvSubState(prm);
    return;
  } else {
    jprm = (pj::OnBuddyEvSubStateParam *) &prm; 
    swig_callbackonBuddyEvSubState(jprm);
  }
}

void SwigDirector_Buddy::swig_connect_director(SWIG_Callback0_t callbackonBuddyState, SWIG_Callback1_t callbackonBuddyEvSubState) {
  swig_callbackonBuddyState = callbackonBuddyState;
  swig_callbackonBuddyEvSubState = callbackonBuddyEvSubState;
}

void SwigDirector_Buddy::swig_init_callbacks() {
  swig_callbackonBuddyState = 0;
  swig_callbackonBuddyEvSubState = 0;
}

SwigDirector_FindBuddyMatch::SwigDirector_FindBuddyMatch() : pj::FindBuddyMatch(), Swig::Director() {
  swig_init_callbacks();
}

bool SwigDirector_FindBuddyMatch::match(pj::string const &token, pj::Buddy const &buddy) {
  bool c_result = SwigValueInit< bool >() ;
  unsigned int jresult = 0 ;
  char * jtoken = 0 ;
  void * jbuddy = 0 ;
  
  if (!swig_callbackmatch) {
    return pj::FindBuddyMatch::match(token,buddy);
  } else {
    jtoken = SWIG_csharp_string_callback((&token)->c_str()); 
    jbuddy = (pj::Buddy *) &buddy; 
    jresult = (unsigned int) swig_callbackmatch(jtoken, jbuddy);
    c_result = jresult ? true : false; 
  }
  return c_result;
}

SwigDirector_FindBuddyMatch::~SwigDirector_FindBuddyMatch() {
  
}


void SwigDirector_FindBuddyMatch::swig_connect_director(SWIG_Callback0_t callbackmatch) {
  swig_callbackmatch = callbackmatch;
}

void SwigDirector_FindBuddyMatch::swig_init_callbacks() {
  swig_callbackmatch = 0;
}

SwigDirector_Account::SwigDirector_Account() : pj::Account(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Account::~SwigDirector_Account() {
  
}


void SwigDirector_Account::onIncomingCall(pj::OnIncomingCallParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonIncomingCall) {
    pj::Account::onIncomingCall(prm);
    return;
  } else {
    jprm = (pj::OnIncomingCallParam *) &prm; 
    swig_callbackonIncomingCall(jprm);
  }
}

void SwigDirector_Account::onRegStarted(pj::OnRegStartedParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonRegStarted) {
    pj::Account::onRegStarted(prm);
    return;
  } else {
    jprm = (pj::OnRegStartedParam *) &prm; 
    swig_callbackonRegStarted(jprm);
  }
}

void SwigDirector_Account::onRegState(pj::OnRegStateParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonRegState) {
    pj::Account::onRegState(prm);
    return;
  } else {
    jprm = (pj::OnRegStateParam *) &prm; 
    swig_callbackonRegState(jprm);
  }
}

void SwigDirector_Account::onIncomingSubscribe(pj::OnIncomingSubscribeParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonIncomingSubscribe) {
    pj::Account::onIncomingSubscribe(prm);
    return;
  } else {
    jprm = (pj::OnIncomingSubscribeParam *) &prm; 
    swig_callbackonIncomingSubscribe(jprm);
  }
}

void SwigDirector_Account::onInstantMessage(pj::OnInstantMessageParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonInstantMessage) {
    pj::Account::onInstantMessage(prm);
    return;
  } else {
    jprm = (pj::OnInstantMessageParam *) &prm; 
    swig_callbackonInstantMessage(jprm);
  }
}

void SwigDirector_Account::onInstantMessageStatus(pj::OnInstantMessageStatusParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonInstantMessageStatus) {
    pj::Account::onInstantMessageStatus(prm);
    return;
  } else {
    jprm = (pj::OnInstantMessageStatusParam *) &prm; 
    swig_callbackonInstantMessageStatus(jprm);
  }
}

void SwigDirector_Account::onTypingIndication(pj::OnTypingIndicationParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonTypingIndication) {
    pj::Account::onTypingIndication(prm);
    return;
  } else {
    jprm = (pj::OnTypingIndicationParam *) &prm; 
    swig_callbackonTypingIndication(jprm);
  }
}

void SwigDirector_Account::onMwiInfo(pj::OnMwiInfoParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonMwiInfo) {
    pj::Account::onMwiInfo(prm);
    return;
  } else {
    jprm = (pj::OnMwiInfoParam *) &prm; 
    swig_callbackonMwiInfo(jprm);
  }
}

void SwigDirector_Account::swig_connect_director(SWIG_Callback0_t callbackonIncomingCall, SWIG_Callback1_t callbackonRegStarted, SWIG_Callback2_t callbackonRegState, SWIG_Callback3_t callbackonIncomingSubscribe, SWIG_Callback4_t callbackonInstantMessage, SWIG_Callback5_t callbackonInstantMessageStatus, SWIG_Callback6_t callbackonTypingIndication, SWIG_Callback7_t callbackonMwiInfo) {
  swig_callbackonIncomingCall = callbackonIncomingCall;
  swig_callbackonRegStarted = callbackonRegStarted;
  swig_callbackonRegState = callbackonRegState;
  swig_callbackonIncomingSubscribe = callbackonIncomingSubscribe;
  swig_callbackonInstantMessage = callbackonInstantMessage;
  swig_callbackonInstantMessageStatus = callbackonInstantMessageStatus;
  swig_callbackonTypingIndication = callbackonTypingIndication;
  swig_callbackonMwiInfo = callbackonMwiInfo;
}

void SwigDirector_Account::swig_init_callbacks() {
  swig_callbackonIncomingCall = 0;
  swig_callbackonRegStarted = 0;
  swig_callbackonRegState = 0;
  swig_callbackonIncomingSubscribe = 0;
  swig_callbackonInstantMessage = 0;
  swig_callbackonInstantMessageStatus = 0;
  swig_callbackonTypingIndication = 0;
  swig_callbackonMwiInfo = 0;
}

SwigDirector_Call::SwigDirector_Call(pj::Account &acc, int call_id) : pj::Call(acc, call_id), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Call::~SwigDirector_Call() {
  
}


void SwigDirector_Call::onCallState(pj::OnCallStateParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallState) {
    pj::Call::onCallState(prm);
    return;
  } else {
    jprm = (pj::OnCallStateParam *) &prm; 
    swig_callbackonCallState(jprm);
  }
}

void SwigDirector_Call::onCallTsxState(pj::OnCallTsxStateParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallTsxState) {
    pj::Call::onCallTsxState(prm);
    return;
  } else {
    jprm = (pj::OnCallTsxStateParam *) &prm; 
    swig_callbackonCallTsxState(jprm);
  }
}

void SwigDirector_Call::onCallMediaState(pj::OnCallMediaStateParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallMediaState) {
    pj::Call::onCallMediaState(prm);
    return;
  } else {
    jprm = (pj::OnCallMediaStateParam *) &prm; 
    swig_callbackonCallMediaState(jprm);
  }
}

void SwigDirector_Call::onCallSdpCreated(pj::OnCallSdpCreatedParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallSdpCreated) {
    pj::Call::onCallSdpCreated(prm);
    return;
  } else {
    jprm = (pj::OnCallSdpCreatedParam *) &prm; 
    swig_callbackonCallSdpCreated(jprm);
  }
}

void SwigDirector_Call::onStreamCreated(pj::OnStreamCreatedParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonStreamCreated) {
    pj::Call::onStreamCreated(prm);
    return;
  } else {
    jprm = (pj::OnStreamCreatedParam *) &prm; 
    swig_callbackonStreamCreated(jprm);
  }
}

void SwigDirector_Call::onStreamDestroyed(pj::OnStreamDestroyedParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonStreamDestroyed) {
    pj::Call::onStreamDestroyed(prm);
    return;
  } else {
    jprm = (pj::OnStreamDestroyedParam *) &prm; 
    swig_callbackonStreamDestroyed(jprm);
  }
}

void SwigDirector_Call::onDtmfDigit(pj::OnDtmfDigitParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonDtmfDigit) {
    pj::Call::onDtmfDigit(prm);
    return;
  } else {
    jprm = (pj::OnDtmfDigitParam *) &prm; 
    swig_callbackonDtmfDigit(jprm);
  }
}

void SwigDirector_Call::onCallTransferRequest(pj::OnCallTransferRequestParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallTransferRequest) {
    pj::Call::onCallTransferRequest(prm);
    return;
  } else {
    jprm = (pj::OnCallTransferRequestParam *) &prm; 
    swig_callbackonCallTransferRequest(jprm);
  }
}

void SwigDirector_Call::onCallTransferStatus(pj::OnCallTransferStatusParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallTransferStatus) {
    pj::Call::onCallTransferStatus(prm);
    return;
  } else {
    jprm = (pj::OnCallTransferStatusParam *) &prm; 
    swig_callbackonCallTransferStatus(jprm);
  }
}

void SwigDirector_Call::onCallReplaceRequest(pj::OnCallReplaceRequestParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallReplaceRequest) {
    pj::Call::onCallReplaceRequest(prm);
    return;
  } else {
    jprm = (pj::OnCallReplaceRequestParam *) &prm; 
    swig_callbackonCallReplaceRequest(jprm);
  }
}

void SwigDirector_Call::onCallReplaced(pj::OnCallReplacedParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallReplaced) {
    pj::Call::onCallReplaced(prm);
    return;
  } else {
    jprm = (pj::OnCallReplacedParam *) &prm; 
    swig_callbackonCallReplaced(jprm);
  }
}

void SwigDirector_Call::onCallRxOffer(pj::OnCallRxOfferParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallRxOffer) {
    pj::Call::onCallRxOffer(prm);
    return;
  } else {
    jprm = (pj::OnCallRxOfferParam *) &prm; 
    swig_callbackonCallRxOffer(jprm);
  }
}

void SwigDirector_Call::onCallRxReinvite(pj::OnCallRxReinviteParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallRxReinvite) {
    pj::Call::onCallRxReinvite(prm);
    return;
  } else {
    jprm = (pj::OnCallRxReinviteParam *) &prm; 
    swig_callbackonCallRxReinvite(jprm);
  }
}

void SwigDirector_Call::onCallTxOffer(pj::OnCallTxOfferParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallTxOffer) {
    pj::Call::onCallTxOffer(prm);
    return;
  } else {
    jprm = (pj::OnCallTxOfferParam *) &prm; 
    swig_callbackonCallTxOffer(jprm);
  }
}

void SwigDirector_Call::onInstantMessage(pj::OnInstantMessageParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonInstantMessage) {
    pj::Call::onInstantMessage(prm);
    return;
  } else {
    jprm = (pj::OnInstantMessageParam *) &prm; 
    swig_callbackonInstantMessage(jprm);
  }
}

void SwigDirector_Call::onInstantMessageStatus(pj::OnInstantMessageStatusParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonInstantMessageStatus) {
    pj::Call::onInstantMessageStatus(prm);
    return;
  } else {
    jprm = (pj::OnInstantMessageStatusParam *) &prm; 
    swig_callbackonInstantMessageStatus(jprm);
  }
}

void SwigDirector_Call::onTypingIndication(pj::OnTypingIndicationParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonTypingIndication) {
    pj::Call::onTypingIndication(prm);
    return;
  } else {
    jprm = (pj::OnTypingIndicationParam *) &prm; 
    swig_callbackonTypingIndication(jprm);
  }
}

pjsip_redirect_op SwigDirector_Call::onCallRedirected(pj::OnCallRedirectedParam &prm) {
  pjsip_redirect_op c_result = SwigValueInit< pjsip_redirect_op >() ;
  int jresult = 0 ;
  void * jprm = 0 ;
  
  if (!swig_callbackonCallRedirected) {
    return pj::Call::onCallRedirected(prm);
  } else {
    jprm = (pj::OnCallRedirectedParam *) &prm; 
    jresult = (int) swig_callbackonCallRedirected(jprm);
    c_result = (pjsip_redirect_op)jresult; 
  }
  return c_result;
}

void SwigDirector_Call::onCallMediaTransportState(pj::OnCallMediaTransportStateParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallMediaTransportState) {
    pj::Call::onCallMediaTransportState(prm);
    return;
  } else {
    jprm = (pj::OnCallMediaTransportStateParam *) &prm; 
    swig_callbackonCallMediaTransportState(jprm);
  }
}

void SwigDirector_Call::onCallMediaEvent(pj::OnCallMediaEventParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCallMediaEvent) {
    pj::Call::onCallMediaEvent(prm);
    return;
  } else {
    jprm = (pj::OnCallMediaEventParam *) &prm; 
    swig_callbackonCallMediaEvent(jprm);
  }
}

void SwigDirector_Call::onCreateMediaTransport(pj::OnCreateMediaTransportParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCreateMediaTransport) {
    pj::Call::onCreateMediaTransport(prm);
    return;
  } else {
    jprm = (pj::OnCreateMediaTransportParam *) &prm; 
    swig_callbackonCreateMediaTransport(jprm);
  }
}

void SwigDirector_Call::onCreateMediaTransportSrtp(pj::OnCreateMediaTransportSrtpParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonCreateMediaTransportSrtp) {
    pj::Call::onCreateMediaTransportSrtp(prm);
    return;
  } else {
    jprm = (pj::OnCreateMediaTransportSrtpParam *) &prm; 
    swig_callbackonCreateMediaTransportSrtp(jprm);
  }
}

void SwigDirector_Call::swig_connect_director(SWIG_Callback0_t callbackonCallState, SWIG_Callback1_t callbackonCallTsxState, SWIG_Callback2_t callbackonCallMediaState, SWIG_Callback3_t callbackonCallSdpCreated, SWIG_Callback4_t callbackonStreamCreated, SWIG_Callback5_t callbackonStreamDestroyed, SWIG_Callback6_t callbackonDtmfDigit, SWIG_Callback7_t callbackonCallTransferRequest, SWIG_Callback8_t callbackonCallTransferStatus, SWIG_Callback9_t callbackonCallReplaceRequest, SWIG_Callback10_t callbackonCallReplaced, SWIG_Callback11_t callbackonCallRxOffer, SWIG_Callback12_t callbackonCallRxReinvite, SWIG_Callback13_t callbackonCallTxOffer, SWIG_Callback14_t callbackonInstantMessage, SWIG_Callback15_t callbackonInstantMessageStatus, SWIG_Callback16_t callbackonTypingIndication, SWIG_Callback17_t callbackonCallRedirected, SWIG_Callback18_t callbackonCallMediaTransportState, SWIG_Callback19_t callbackonCallMediaEvent, SWIG_Callback20_t callbackonCreateMediaTransport, SWIG_Callback21_t callbackonCreateMediaTransportSrtp) {
  swig_callbackonCallState = callbackonCallState;
  swig_callbackonCallTsxState = callbackonCallTsxState;
  swig_callbackonCallMediaState = callbackonCallMediaState;
  swig_callbackonCallSdpCreated = callbackonCallSdpCreated;
  swig_callbackonStreamCreated = callbackonStreamCreated;
  swig_callbackonStreamDestroyed = callbackonStreamDestroyed;
  swig_callbackonDtmfDigit = callbackonDtmfDigit;
  swig_callbackonCallTransferRequest = callbackonCallTransferRequest;
  swig_callbackonCallTransferStatus = callbackonCallTransferStatus;
  swig_callbackonCallReplaceRequest = callbackonCallReplaceRequest;
  swig_callbackonCallReplaced = callbackonCallReplaced;
  swig_callbackonCallRxOffer = callbackonCallRxOffer;
  swig_callbackonCallRxReinvite = callbackonCallRxReinvite;
  swig_callbackonCallTxOffer = callbackonCallTxOffer;
  swig_callbackonInstantMessage = callbackonInstantMessage;
  swig_callbackonInstantMessageStatus = callbackonInstantMessageStatus;
  swig_callbackonTypingIndication = callbackonTypingIndication;
  swig_callbackonCallRedirected = callbackonCallRedirected;
  swig_callbackonCallMediaTransportState = callbackonCallMediaTransportState;
  swig_callbackonCallMediaEvent = callbackonCallMediaEvent;
  swig_callbackonCreateMediaTransport = callbackonCreateMediaTransport;
  swig_callbackonCreateMediaTransportSrtp = callbackonCreateMediaTransportSrtp;
}

void SwigDirector_Call::swig_init_callbacks() {
  swig_callbackonCallState = 0;
  swig_callbackonCallTsxState = 0;
  swig_callbackonCallMediaState = 0;
  swig_callbackonCallSdpCreated = 0;
  swig_callbackonStreamCreated = 0;
  swig_callbackonStreamDestroyed = 0;
  swig_callbackonDtmfDigit = 0;
  swig_callbackonCallTransferRequest = 0;
  swig_callbackonCallTransferStatus = 0;
  swig_callbackonCallReplaceRequest = 0;
  swig_callbackonCallReplaced = 0;
  swig_callbackonCallRxOffer = 0;
  swig_callbackonCallRxReinvite = 0;
  swig_callbackonCallTxOffer = 0;
  swig_callbackonInstantMessage = 0;
  swig_callbackonInstantMessageStatus = 0;
  swig_callbackonTypingIndication = 0;
  swig_callbackonCallRedirected = 0;
  swig_callbackonCallMediaTransportState = 0;
  swig_callbackonCallMediaEvent = 0;
  swig_callbackonCreateMediaTransport = 0;
  swig_callbackonCreateMediaTransportSrtp = 0;
}

SwigDirector_LogWriter::SwigDirector_LogWriter() : pj::LogWriter(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_LogWriter::~SwigDirector_LogWriter() {
  
}


void SwigDirector_LogWriter::write(pj::LogEntry const &entry) {
  void * jentry = 0 ;
  
  if (!swig_callbackwrite) {
    throw Swig::DirectorPureVirtualException("pj::LogWriter::write");
  } else {
    jentry = (pj::LogEntry *) &entry; 
    swig_callbackwrite(jentry);
  }
}

void SwigDirector_LogWriter::swig_connect_director(SWIG_Callback0_t callbackwrite) {
  swig_callbackwrite = callbackwrite;
}

void SwigDirector_LogWriter::swig_init_callbacks() {
  swig_callbackwrite = 0;
}

SwigDirector_Endpoint::SwigDirector_Endpoint() : pj::Endpoint(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_Endpoint::~SwigDirector_Endpoint() {
  
}


void SwigDirector_Endpoint::onNatDetectionComplete(pj::OnNatDetectionCompleteParam const &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonNatDetectionComplete) {
    pj::Endpoint::onNatDetectionComplete(prm);
    return;
  } else {
    jprm = (pj::OnNatDetectionCompleteParam *) &prm; 
    swig_callbackonNatDetectionComplete(jprm);
  }
}

void SwigDirector_Endpoint::onNatCheckStunServersComplete(pj::OnNatCheckStunServersCompleteParam const &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonNatCheckStunServersComplete) {
    pj::Endpoint::onNatCheckStunServersComplete(prm);
    return;
  } else {
    jprm = (pj::OnNatCheckStunServersCompleteParam *) &prm; 
    swig_callbackonNatCheckStunServersComplete(jprm);
  }
}

void SwigDirector_Endpoint::onTransportState(pj::OnTransportStateParam const &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonTransportState) {
    pj::Endpoint::onTransportState(prm);
    return;
  } else {
    jprm = (pj::OnTransportStateParam *) &prm; 
    swig_callbackonTransportState(jprm);
  }
}

void SwigDirector_Endpoint::onTimer(pj::OnTimerParam const &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonTimer) {
    pj::Endpoint::onTimer(prm);
    return;
  } else {
    jprm = (pj::OnTimerParam *) &prm; 
    swig_callbackonTimer(jprm);
  }
}

void SwigDirector_Endpoint::onSelectAccount(pj::OnSelectAccountParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonSelectAccount) {
    pj::Endpoint::onSelectAccount(prm);
    return;
  } else {
    jprm = (pj::OnSelectAccountParam *) &prm; 
    swig_callbackonSelectAccount(jprm);
  }
}

void SwigDirector_Endpoint::onIpChangeProgress(pj::OnIpChangeProgressParam &prm) {
  void * jprm = 0 ;
  
  if (!swig_callbackonIpChangeProgress) {
    pj::Endpoint::onIpChangeProgress(prm);
    return;
  } else {
    jprm = (pj::OnIpChangeProgressParam *) &prm; 
    swig_callbackonIpChangeProgress(jprm);
  }
}

void SwigDirector_Endpoint::swig_connect_director(SWIG_Callback0_t callbackonNatDetectionComplete, SWIG_Callback1_t callbackonNatCheckStunServersComplete, SWIG_Callback2_t callbackonTransportState, SWIG_Callback3_t callbackonTimer, SWIG_Callback4_t callbackonSelectAccount, SWIG_Callback5_t callbackonIpChangeProgress) {
  swig_callbackonNatDetectionComplete = callbackonNatDetectionComplete;
  swig_callbackonNatCheckStunServersComplete = callbackonNatCheckStunServersComplete;
  swig_callbackonTransportState = callbackonTransportState;
  swig_callbackonTimer = callbackonTimer;
  swig_callbackonSelectAccount = callbackonSelectAccount;
  swig_callbackonIpChangeProgress = callbackonIpChangeProgress;
}

void SwigDirector_Endpoint::swig_init_callbacks() {
  swig_callbackonNatDetectionComplete = 0;
  swig_callbackonNatCheckStunServersComplete = 0;
  swig_callbackonTransportState = 0;
  swig_callbackonTimer = 0;
  swig_callbackonSelectAccount = 0;
  swig_callbackonIpChangeProgress = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pj_qos_params_flags_set___(void * jarg1, unsigned char jarg2) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t arg2 ;
  
  arg1 = (pj_qos_params *)jarg1; 
  arg2 = (pj_uint8_t)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pj_qos_params_flags_get___(void * jarg1) {
  unsigned char jresult ;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t result;
  
  arg1 = (pj_qos_params *)jarg1; 
  result = (pj_uint8_t) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pj_qos_params_dscp_val_set___(void * jarg1, unsigned char jarg2) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t arg2 ;
  
  arg1 = (pj_qos_params *)jarg1; 
  arg2 = (pj_uint8_t)jarg2; 
  if (arg1) (arg1)->dscp_val = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pj_qos_params_dscp_val_get___(void * jarg1) {
  unsigned char jresult ;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t result;
  
  arg1 = (pj_qos_params *)jarg1; 
  result = (pj_uint8_t) ((arg1)->dscp_val);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pj_qos_params_so_prio_set___(void * jarg1, unsigned char jarg2) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t arg2 ;
  
  arg1 = (pj_qos_params *)jarg1; 
  arg2 = (pj_uint8_t)jarg2; 
  if (arg1) (arg1)->so_prio = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pj_qos_params_so_prio_get___(void * jarg1) {
  unsigned char jresult ;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_uint8_t result;
  
  arg1 = (pj_qos_params *)jarg1; 
  result = (pj_uint8_t) ((arg1)->so_prio);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pj_qos_params_wmm_prio_set___(void * jarg1, int jarg2) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_qos_wmm_prio arg2 ;
  
  arg1 = (pj_qos_params *)jarg1; 
  arg2 = (pj_qos_wmm_prio)jarg2; 
  if (arg1) (arg1)->wmm_prio = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pj_qos_params_wmm_prio_get___(void * jarg1) {
  int jresult ;
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  pj_qos_wmm_prio result;
  
  arg1 = (pj_qos_params *)jarg1; 
  result = (pj_qos_wmm_prio) ((arg1)->wmm_prio);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_pj_qos_params___() {
  void * jresult ;
  pj_qos_params *result = 0 ;
  
  result = (pj_qos_params *)new pj_qos_params();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_pj_qos_params___(void * jarg1) {
  pj_qos_params *arg1 = (pj_qos_params *) 0 ;
  
  arg1 = (pj_qos_params *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_digit_digit_set___(void * jarg1, char jarg2) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  char arg2 ;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  arg2 = (char)jarg2; 
  if (arg1) (arg1)->digit = arg2;
}


SWIGEXPORT char SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_digit_digit_get___(void * jarg1) {
  char jresult ;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  char result;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  result = (char) ((arg1)->digit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_digit_on_msec_set___(void * jarg1, short jarg2) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->on_msec = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_digit_on_msec_get___(void * jarg1) {
  short jresult ;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  result = (short) ((arg1)->on_msec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_digit_off_msec_set___(void * jarg1, short jarg2) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->off_msec = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_digit_off_msec_get___(void * jarg1) {
  short jresult ;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  result = (short) ((arg1)->off_msec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_digit_volume_set___(void * jarg1, short jarg2) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_digit_volume_get___(void * jarg1) {
  short jresult ;
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  result = (short) ((arg1)->volume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_pjmedia_tone_digit___() {
  void * jresult ;
  pjmedia_tone_digit *result = 0 ;
  
  result = (pjmedia_tone_digit *)new pjmedia_tone_digit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_pjmedia_tone_digit___(void * jarg1) {
  pjmedia_tone_digit *arg1 = (pjmedia_tone_digit *) 0 ;
  
  arg1 = (pjmedia_tone_digit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_digit_map_count_set___(void * jarg1, unsigned int jarg2) {
  pjmedia_tone_digit_map *arg1 = (pjmedia_tone_digit_map *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pjmedia_tone_digit_map *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_digit_map_count_get___(void * jarg1) {
  unsigned int jresult ;
  pjmedia_tone_digit_map *arg1 = (pjmedia_tone_digit_map *) 0 ;
  unsigned int result;
  
  arg1 = (pjmedia_tone_digit_map *)jarg1; 
  result = (unsigned int) ((arg1)->count);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_pjmedia_tone_digit_map___() {
  void * jresult ;
  pjmedia_tone_digit_map *result = 0 ;
  
  result = (pjmedia_tone_digit_map *)new pjmedia_tone_digit_map();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_pjmedia_tone_digit_map___(void * jarg1) {
  pjmedia_tone_digit_map *arg1 = (pjmedia_tone_digit_map *) 0 ;
  
  arg1 = (pjmedia_tone_digit_map *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_desc_freq1_set___(void * jarg1, short jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->freq1 = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_desc_freq1_get___(void * jarg1) {
  short jresult ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  result = (short) ((arg1)->freq1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_desc_freq2_set___(void * jarg1, short jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->freq2 = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_desc_freq2_get___(void * jarg1) {
  short jresult ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  result = (short) ((arg1)->freq2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_desc_on_msec_set___(void * jarg1, short jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->on_msec = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_desc_on_msec_get___(void * jarg1) {
  short jresult ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  result = (short) ((arg1)->on_msec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_desc_off_msec_set___(void * jarg1, short jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->off_msec = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_desc_off_msec_get___(void * jarg1) {
  short jresult ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  result = (short) ((arg1)->off_msec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_desc_volume_set___(void * jarg1, short jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->volume = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_desc_volume_get___(void * jarg1) {
  short jresult ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  result = (short) ((arg1)->volume);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_desc_flags_set___(void * jarg1, short jarg2) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short arg2 ;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT short SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_pjmedia_tone_desc_flags_get___(void * jarg1) {
  short jresult ;
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  short result;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  result = (short) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_pjmedia_tone_desc___() {
  void * jresult ;
  pjmedia_tone_desc *result = 0 ;
  
  result = (pjmedia_tone_desc *)new pjmedia_tone_desc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_pjmedia_tone_desc___(void * jarg1) {
  pjmedia_tone_desc *arg1 = (pjmedia_tone_desc *) 0 ;
  
  arg1 = (pjmedia_tone_desc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_Clear___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_Add___(void * jarg1, char * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_StringVector__SWIG_0___() {
  void * jresult ;
  std::vector< std::string > *result = 0 ;
  
  result = (std::vector< std::string > *)new std::vector< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_StringVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< std::string > *arg1 = 0 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< std::string > *)new std::vector< std::string >((std::vector< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_StringVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< std::string > *)new_std_vector_Sl_std_string_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_getitemcopy___(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_getitem___(void * jarg1, int jarg2) {
  char * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::string *) &std_vector_Sl_std_string_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_setitem___(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (std::vector< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_std_string_Sg__AddRange(arg1,(std::vector< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< std::string > *result = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_Insert___(void * jarg1, int jarg2, char * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    std_vector_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__InsertRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_Repeat___(char * jarg1, int jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::vector< std::string > *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string > *)std_vector_Sl_std_string_Sg__Repeat((std::string const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  std_vector_Sl_std_string_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_std_string_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string > *arg3 = 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< std::string > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_std_string_Sg__SetRange(arg1,arg2,(std::vector< std::string > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_Contains___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_IndexOf___(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_LastIndexOf___(void * jarg1, char * jarg2) {
  int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int)std_vector_Sl_std_string_Sg__LastIndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StringVector_Remove___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_vector_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_StringVector___(void * jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  arg1 = (std::vector< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_Clear___(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_Add___(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  arg1 = (std::vector< int > *)jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_IntVector__SWIG_0___() {
  void * jresult ;
  std::vector< int > *result = 0 ;
  
  result = (std::vector< int > *)new std::vector< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_IntVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< int > *arg1 = 0 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< int > *)new std::vector< int >((std::vector< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_IntVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< int > *)new_std_vector_Sl_int_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_getitemcopy___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_vector_Sl_int_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_getitem___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int *) &std_vector_Sl_int_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_setitem___(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int > *arg2 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (std::vector< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_int_Sg__AddRange(arg1,(std::vector< int > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< int > *result = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_Insert___(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__InsertRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_int_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_Repeat___(int jarg1, int jarg2) {
  void * jresult ;
  int *arg1 = 0 ;
  int arg2 ;
  int temp1 ;
  std::vector< int > *result = 0 ;
  
  temp1 = (int)jarg1; 
  arg1 = &temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int > *)std_vector_Sl_int_Sg__Repeat((int const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  std_vector_Sl_int_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_int_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int > *arg3 = 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< int > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< int > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_int_Sg__SetRange(arg1,arg2,(std::vector< int > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_Contains___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_IndexOf___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_LastIndexOf___(void * jarg1, int jarg2) {
  int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_vector_Sl_int_Sg__LastIndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IntVector_Remove___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::vector< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_vector_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_IntVector___(void * jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  arg1 = (std::vector< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_INVALID_ID_get___() {
  int jresult ;
  int result;
  
  result = (int)pj::INVALID_ID;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SUCCESS_get___() {
  int jresult ;
  int result;
  
  result = (int)pj::SUCCESS;
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Error_status_set___(void * jarg1, int jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::Error *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Error_status_get___(void * jarg1) {
  int jresult ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::Error *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Error_title_set___(void * jarg1, char * jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Error *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->title = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Error_title_get___(void * jarg1) {
  char * jresult ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::Error *)jarg1; 
  result = (pj::string *) & ((arg1)->title);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Error_reason_set___(void * jarg1, char * jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Error *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Error_reason_get___(void * jarg1) {
  char * jresult ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::Error *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Error_srcFile_set___(void * jarg1, char * jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Error *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->srcFile = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Error_srcFile_get___(void * jarg1) {
  char * jresult ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::Error *)jarg1; 
  result = (pj::string *) & ((arg1)->srcFile);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Error_srcLine_set___(void * jarg1, int jarg2) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  int arg2 ;
  
  arg1 = (pj::Error *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->srcLine = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Error_srcLine_get___(void * jarg1) {
  int jresult ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  int result;
  
  arg1 = (pj::Error *)jarg1; 
  result = (int) ((arg1)->srcLine);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Error_info__SWIG_0___(void * jarg1, unsigned int jarg2) {
  char * jresult ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  bool arg2 ;
  pj::string result;
  
  arg1 = (pj::Error *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = ((pj::Error const *)arg1)->info(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Error_info__SWIG_1___(void * jarg1) {
  char * jresult ;
  pj::Error *arg1 = (pj::Error *) 0 ;
  pj::string result;
  
  arg1 = (pj::Error *)jarg1; 
  result = ((pj::Error const *)arg1)->info();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_Error__SWIG_0___() {
  void * jresult ;
  pj::Error *result = 0 ;
  
  result = (pj::Error *)new pj::Error();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_Error__SWIG_1___(int jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5) {
  void * jresult ;
  pj_status_t arg1 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  pj::string *arg4 = 0 ;
  int arg5 ;
  pj::Error *result = 0 ;
  
  arg1 = (pj_status_t)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (int)jarg5; 
  result = (pj::Error *)new pj::Error(arg1,(pj::string const &)*arg2,(pj::string const &)*arg3,(pj::string const &)*arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_Error___(void * jarg1) {
  pj::Error *arg1 = (pj::Error *) 0 ;
  
  arg1 = (pj::Error *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Version_major_set___(void * jarg1, int jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  int arg2 ;
  
  arg1 = (pj::Version *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->major = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Version_major_get___(void * jarg1) {
  int jresult ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int result;
  
  arg1 = (pj::Version *)jarg1; 
  result = (int) ((arg1)->major);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Version_minor_set___(void * jarg1, int jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  int arg2 ;
  
  arg1 = (pj::Version *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->minor = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Version_minor_get___(void * jarg1) {
  int jresult ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int result;
  
  arg1 = (pj::Version *)jarg1; 
  result = (int) ((arg1)->minor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Version_rev_set___(void * jarg1, int jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  int arg2 ;
  
  arg1 = (pj::Version *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->rev = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Version_rev_get___(void * jarg1) {
  int jresult ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  int result;
  
  arg1 = (pj::Version *)jarg1; 
  result = (int) ((arg1)->rev);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Version_suffix_set___(void * jarg1, char * jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Version *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->suffix = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Version_suffix_get___(void * jarg1) {
  char * jresult ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::Version *)jarg1; 
  result = (pj::string *) & ((arg1)->suffix);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Version_full_set___(void * jarg1, char * jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Version *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->full = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Version_full_get___(void * jarg1) {
  char * jresult ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::Version *)jarg1; 
  result = (pj::string *) & ((arg1)->full);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Version_numeric_set___(void * jarg1, unsigned int jarg2) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::Version *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->numeric = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Version_numeric_get___(void * jarg1) {
  unsigned int jresult ;
  pj::Version *arg1 = (pj::Version *) 0 ;
  unsigned int result;
  
  arg1 = (pj::Version *)jarg1; 
  result = (unsigned int) ((arg1)->numeric);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_Version___() {
  void * jresult ;
  pj::Version *result = 0 ;
  
  result = (pj::Version *)new pj::Version();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_Version___(void * jarg1) {
  pj::Version *arg1 = (pj::Version *) 0 ;
  
  arg1 = (pj::Version *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TimeVal_sec_set___(void * jarg1, long jarg2) {
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long arg2 ;
  
  arg1 = (pj::TimeVal *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->sec = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TimeVal_sec_get___(void * jarg1) {
  long jresult ;
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long result;
  
  arg1 = (pj::TimeVal *)jarg1; 
  result = (long) ((arg1)->sec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TimeVal_msec_set___(void * jarg1, long jarg2) {
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long arg2 ;
  
  arg1 = (pj::TimeVal *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->msec = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TimeVal_msec_get___(void * jarg1) {
  long jresult ;
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  long result;
  
  arg1 = (pj::TimeVal *)jarg1; 
  result = (long) ((arg1)->msec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_TimeVal___() {
  void * jresult ;
  pj::TimeVal *result = 0 ;
  
  result = (pj::TimeVal *)new pj::TimeVal();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_TimeVal___(void * jarg1) {
  pj::TimeVal *arg1 = (pj::TimeVal *) 0 ;
  
  arg1 = (pj::TimeVal *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_PersistentObject___(void * jarg1) {
  pj::PersistentObject *arg1 = (pj::PersistentObject *) 0 ;
  
  arg1 = (pj::PersistentObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentObject_readObject___(void * jarg1, void * jarg2) {
  pj::PersistentObject *arg1 = (pj::PersistentObject *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::PersistentObject *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentObject_writeObject___(void * jarg1, void * jarg2) {
  pj::PersistentObject *arg1 = (pj::PersistentObject *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::PersistentObject *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::PersistentObject const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_PersistentDocument___(void * jarg1) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_loadFile___(void * jarg1, char * jarg2) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->loadFile((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_loadString___(void * jarg1, char * jarg2) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->loadString((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_saveFile___(void * jarg1, char * jarg2) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->saveFile((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_saveString___(void * jarg1) {
  char * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = (arg1)->saveString();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_getRootContainer___(void * jarg1) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::ContainerNode *result = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  result = (pj::ContainerNode *) &((pj::PersistentDocument const *)arg1)->getRootContainer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_hasUnread___(void * jarg1) {
  unsigned int jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  bool result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  result = (bool)((pj::PersistentDocument const *)arg1)->hasUnread();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_unreadName___(void * jarg1) {
  char * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->unreadName();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readInt__SWIG_0___(void * jarg1, char * jarg2) {
  int jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  int result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (int)((pj::PersistentDocument const *)arg1)->readInt((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readInt__SWIG_1___(void * jarg1) {
  int jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  int result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = (int)((pj::PersistentDocument const *)arg1)->readInt();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readNumber__SWIG_0___(void * jarg1, char * jarg2) {
  float jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  float result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (float)((pj::PersistentDocument const *)arg1)->readNumber((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readNumber__SWIG_1___(void * jarg1) {
  float jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  float result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = (float)((pj::PersistentDocument const *)arg1)->readNumber();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readBool__SWIG_0___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  bool result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (bool)((pj::PersistentDocument const *)arg1)->readBool((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readBool__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  bool result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = (bool)((pj::PersistentDocument const *)arg1)->readBool();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readString__SWIG_0___(void * jarg1, char * jarg2) {
  char * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readString((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readString__SWIG_1___(void * jarg1) {
  char * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readString();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readStringVector__SWIG_0___(void * jarg1, char * jarg2) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::StringVector result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readStringVector((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::StringVector((const pj::StringVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readStringVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::StringVector result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readStringVector();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::StringVector((const pj::StringVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readObject___(void * jarg1, void * jarg2) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  arg2 = (pj::PersistentObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::PersistentObject & type is null", 0);
    return ;
  } 
  try {
    ((pj::PersistentDocument const *)arg1)->readObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readContainer__SWIG_0___(void * jarg1, char * jarg2) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readContainer((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readContainer__SWIG_1___(void * jarg1) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readContainer();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readArray__SWIG_0___(void * jarg1, char * jarg2) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readArray((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_readArray__SWIG_1___(void * jarg1) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  try {
    result = ((pj::PersistentDocument const *)arg1)->readArray();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_writeNumber___(void * jarg1, char * jarg2, float jarg3) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  try {
    (arg1)->writeNumber((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_writeInt___(void * jarg1, char * jarg2, int jarg3) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  try {
    (arg1)->writeInt((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_writeBool___(void * jarg1, char * jarg2, unsigned int jarg3) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->writeBool((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_writeString___(void * jarg1, char * jarg2, char * jarg3) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    (arg1)->writeString((pj::string const &)*arg2,(pj::string const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_writeStringVector___(void * jarg1, char * jarg2, void * jarg3) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::StringVector *arg3 = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::StringVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::StringVector const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->writeStringVector((pj::string const &)*arg2,(pj::StringVector const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_writeObject___(void * jarg1, void * jarg2) {
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  arg2 = (pj::PersistentObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::PersistentObject const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->writeObject((pj::PersistentObject const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_writeNewContainer___(void * jarg1, char * jarg2) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (arg1)->writeNewContainer((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PersistentDocument_writeNewArray___(void * jarg1, char * jarg2) {
  void * jresult ;
  pj::PersistentDocument *arg1 = (pj::PersistentDocument *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::PersistentDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (arg1)->writeNewArray((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_hasUnread___(void * jarg1) {
  unsigned int jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  bool result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  result = (bool)((pj::ContainerNode const *)arg1)->hasUnread();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_unreadName___(void * jarg1) {
  char * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->unreadName();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readInt__SWIG_0___(void * jarg1, char * jarg2) {
  int jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  int result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (int)((pj::ContainerNode const *)arg1)->readInt((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readInt__SWIG_1___(void * jarg1) {
  int jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  int result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = (int)((pj::ContainerNode const *)arg1)->readInt();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readNumber__SWIG_0___(void * jarg1, char * jarg2) {
  float jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  float result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (float)((pj::ContainerNode const *)arg1)->readNumber((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readNumber__SWIG_1___(void * jarg1) {
  float jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  float result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = (float)((pj::ContainerNode const *)arg1)->readNumber();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readBool__SWIG_0___(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  bool result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (bool)((pj::ContainerNode const *)arg1)->readBool((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readBool__SWIG_1___(void * jarg1) {
  unsigned int jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  bool result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = (bool)((pj::ContainerNode const *)arg1)->readBool();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readString__SWIG_0___(void * jarg1, char * jarg2) {
  char * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readString((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readString__SWIG_1___(void * jarg1) {
  char * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readString();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readStringVector__SWIG_0___(void * jarg1, char * jarg2) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::StringVector result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readStringVector((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::StringVector((const pj::StringVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readStringVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::StringVector result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readStringVector();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::StringVector((const pj::StringVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readObject___(void * jarg1, void * jarg2) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  arg2 = (pj::PersistentObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::PersistentObject & type is null", 0);
    return ;
  } 
  try {
    ((pj::ContainerNode const *)arg1)->readObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readContainer__SWIG_0___(void * jarg1, char * jarg2) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readContainer((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readContainer__SWIG_1___(void * jarg1) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readContainer();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readArray__SWIG_0___(void * jarg1, char * jarg2) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readArray((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_readArray__SWIG_1___(void * jarg1) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  try {
    result = ((pj::ContainerNode const *)arg1)->readArray();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_writeNumber___(void * jarg1, char * jarg2, float jarg3) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  float arg3 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (float)jarg3; 
  try {
    (arg1)->writeNumber((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_writeInt___(void * jarg1, char * jarg2, int jarg3) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int)jarg3; 
  try {
    (arg1)->writeInt((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_writeBool___(void * jarg1, char * jarg2, unsigned int jarg3) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->writeBool((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_writeString___(void * jarg1, char * jarg2, char * jarg3) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    (arg1)->writeString((pj::string const &)*arg2,(pj::string const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_writeStringVector___(void * jarg1, char * jarg2, void * jarg3) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::StringVector *arg3 = 0 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::StringVector *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::StringVector const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->writeStringVector((pj::string const &)*arg2,(pj::StringVector const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_writeObject___(void * jarg1, void * jarg2) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::PersistentObject *arg2 = 0 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  arg2 = (pj::PersistentObject *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::PersistentObject const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->writeObject((pj::PersistentObject const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_writeNewContainer___(void * jarg1, char * jarg2) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (arg1)->writeNewContainer((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ContainerNode_writeNewArray___(void * jarg1, char * jarg2) {
  void * jresult ;
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  pj::string *arg2 = 0 ;
  pj::ContainerNode result;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (arg1)->writeNewArray((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ContainerNode((const pj::ContainerNode &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ContainerNode___() {
  void * jresult ;
  pj::ContainerNode *result = 0 ;
  
  result = (pj::ContainerNode *)new pj::ContainerNode();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_ContainerNode___(void * jarg1) {
  pj::ContainerNode *arg1 = (pj::ContainerNode *) 0 ;
  
  arg1 = (pj::ContainerNode *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_scheme_set___(void * jarg1, char * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->scheme = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_scheme_get___(void * jarg1) {
  char * jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->scheme);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_realm_set___(void * jarg1, char * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->realm = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_realm_get___(void * jarg1) {
  char * jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->realm);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_username_set___(void * jarg1, char * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->username = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_username_get___(void * jarg1) {
  char * jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->username);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_dataType_set___(void * jarg1, int jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->dataType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_dataType_get___(void * jarg1) {
  int jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  int result;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (int) ((arg1)->dataType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_data_set___(void * jarg1, char * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_data_get___(void * jarg1) {
  char * jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->data);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_akaK_set___(void * jarg1, char * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->akaK = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_akaK_get___(void * jarg1) {
  char * jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->akaK);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_akaOp_set___(void * jarg1, char * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->akaOp = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_akaOp_get___(void * jarg1) {
  char * jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->akaOp);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_akaAmf_set___(void * jarg1, char * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->akaAmf = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_akaAmf_get___(void * jarg1) {
  char * jresult ;
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->akaAmf);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AuthCredInfo__SWIG_0___() {
  void * jresult ;
  pj::AuthCredInfo *result = 0 ;
  
  result = (pj::AuthCredInfo *)new pj::AuthCredInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AuthCredInfo__SWIG_1___(char * jarg1, char * jarg2, char * jarg3, int jarg4, char * jarg5) {
  void * jresult ;
  pj::string *arg1 = 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  int arg4 ;
  pj::string arg5 ;
  pj::AuthCredInfo *result = 0 ;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int)jarg4; 
  if (!jarg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (pj::AuthCredInfo *)new pj::AuthCredInfo((pj::string const &)*arg1,(pj::string const &)*arg2,(pj::string const &)*arg3,arg4,arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_readObject___(void * jarg1, void * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_writeObject___(void * jarg1, void * jarg2) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::AuthCredInfo const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AuthCredInfo___(void * jarg1) {
  pj::AuthCredInfo *arg1 = (pj::AuthCredInfo *) 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_CaListFile_set___(void * jarg1, char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->CaListFile = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_CaListFile_get___(void * jarg1) {
  char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->CaListFile);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_certFile_set___(void * jarg1, char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->certFile = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_certFile_get___(void * jarg1) {
  char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->certFile);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_privKeyFile_set___(void * jarg1, char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->privKeyFile = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_privKeyFile_get___(void * jarg1) {
  char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->privKeyFile);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_password_set___(void * jarg1, char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->password = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_password_get___(void * jarg1) {
  char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->password);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_CaBuf_set___(void * jarg1, char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->CaBuf = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_CaBuf_get___(void * jarg1) {
  char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->CaBuf);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_certBuf_set___(void * jarg1, char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->certBuf = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_certBuf_get___(void * jarg1) {
  char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->certBuf);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_privKeyBuf_set___(void * jarg1, char * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->privKeyBuf = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_privKeyBuf_get___(void * jarg1) {
  char * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->privKeyBuf);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_method_set___(void * jarg1, int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pjsip_ssl_method arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (pjsip_ssl_method)jarg2; 
  if (arg1) (arg1)->method = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_method_get___(void * jarg1) {
  int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pjsip_ssl_method result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pjsip_ssl_method) ((arg1)->method);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_proto_set___(void * jarg1, unsigned int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->proto = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_proto_get___(void * jarg1) {
  unsigned int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (unsigned int) ((arg1)->proto);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_ciphers_set___(void * jarg1, void * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (pj::IntVector *)jarg2; 
  if (arg1) (arg1)->ciphers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_ciphers_get___(void * jarg1) {
  void * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::IntVector *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj::IntVector *)& ((arg1)->ciphers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_verifyServer_set___(void * jarg1, unsigned int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verifyServer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_verifyServer_get___(void * jarg1) {
  unsigned int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (bool) ((arg1)->verifyServer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_verifyClient_set___(void * jarg1, unsigned int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->verifyClient = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_verifyClient_get___(void * jarg1) {
  unsigned int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (bool) ((arg1)->verifyClient);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_requireClientCert_set___(void * jarg1, unsigned int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->requireClientCert = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_requireClientCert_get___(void * jarg1) {
  unsigned int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (bool) ((arg1)->requireClientCert);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_msecTimeout_set___(void * jarg1, unsigned int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->msecTimeout = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_msecTimeout_get___(void * jarg1) {
  unsigned int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (unsigned int) ((arg1)->msecTimeout);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_qosType_set___(void * jarg1, int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_type arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (pj_qos_type)jarg2; 
  if (arg1) (arg1)->qosType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_qosType_get___(void * jarg1) {
  int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_type result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj_qos_type) ((arg1)->qosType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_qosParams_set___(void * jarg1, void * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_params *arg2 = (pj_qos_params *) 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (pj_qos_params *)jarg2; 
  if (arg1) (arg1)->qosParams = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_qosParams_get___(void * jarg1) {
  void * jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj_qos_params *result = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (pj_qos_params *)& ((arg1)->qosParams);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_qosIgnoreError_set___(void * jarg1, unsigned int jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->qosIgnoreError = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_qosIgnoreError_get___(void * jarg1) {
  unsigned int jresult ;
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  bool result;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  result = (bool) ((arg1)->qosIgnoreError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_TlsConfig___() {
  void * jresult ;
  pj::TlsConfig *result = 0 ;
  
  result = (pj::TlsConfig *)new pj::TlsConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_readObject___(void * jarg1, void * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::TlsConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_TlsConfig___(void * jarg1) {
  pj::TlsConfig *arg1 = (pj::TlsConfig *) 0 ;
  
  arg1 = (pj::TlsConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_port_set___(void * jarg1, unsigned int jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->port = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_port_get___(void * jarg1) {
  unsigned int jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (unsigned int) ((arg1)->port);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_portRange_set___(void * jarg1, unsigned int jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->portRange = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_portRange_get___(void * jarg1) {
  unsigned int jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (unsigned int) ((arg1)->portRange);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_publicAddress_set___(void * jarg1, char * jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->publicAddress = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_publicAddress_get___(void * jarg1) {
  char * jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->publicAddress);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_boundAddress_set___(void * jarg1, char * jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->boundAddress = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_boundAddress_get___(void * jarg1) {
  char * jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->boundAddress);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_tlsConfig_set___(void * jarg1, void * jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::TlsConfig *arg2 = (pj::TlsConfig *) 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (pj::TlsConfig *)jarg2; 
  if (arg1) (arg1)->tlsConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_tlsConfig_get___(void * jarg1) {
  void * jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::TlsConfig *result = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (pj::TlsConfig *)& ((arg1)->tlsConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_qosType_set___(void * jarg1, int jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_type arg2 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (pj_qos_type)jarg2; 
  if (arg1) (arg1)->qosType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_qosType_get___(void * jarg1) {
  int jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_type result;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (pj_qos_type) ((arg1)->qosType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_qosParams_set___(void * jarg1, void * jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_params *arg2 = (pj_qos_params *) 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (pj_qos_params *)jarg2; 
  if (arg1) (arg1)->qosParams = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_qosParams_get___(void * jarg1) {
  void * jresult ;
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj_qos_params *result = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  result = (pj_qos_params *)& ((arg1)->qosParams);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_TransportConfig___() {
  void * jresult ;
  pj::TransportConfig *result = 0 ;
  
  result = (pj::TransportConfig *)new pj::TransportConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_readObject___(void * jarg1, void * jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::TransportConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_TransportConfig___(void * jarg1) {
  pj::TransportConfig *arg1 = (pj::TransportConfig *) 0 ;
  
  arg1 = (pj::TransportConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_id_set___(void * jarg1, int jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::TransportId arg2 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_id_get___(void * jarg1) {
  int jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::TransportId result;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (pj::TransportId) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_type_set___(void * jarg1, int jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pjsip_transport_type_e arg2 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  arg2 = (pjsip_transport_type_e)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_type_get___(void * jarg1) {
  int jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pjsip_transport_type_e result;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (pjsip_transport_type_e) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_typeName_set___(void * jarg1, char * jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->typeName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_typeName_get___(void * jarg1) {
  char * jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->typeName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_info_set___(void * jarg1, char * jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_info_get___(void * jarg1) {
  char * jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->info);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_flags_set___(void * jarg1, unsigned int jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_flags_get___(void * jarg1) {
  unsigned int jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (unsigned int) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_localAddress_set___(void * jarg1, char * jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localAddress = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_localAddress_get___(void * jarg1) {
  char * jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localAddress);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_localName_set___(void * jarg1, char * jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_localName_get___(void * jarg1) {
  char * jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_usageCount_set___(void * jarg1, unsigned int jarg2) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->usageCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportInfo_usageCount_get___(void * jarg1) {
  unsigned int jresult ;
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  result = (unsigned int) ((arg1)->usageCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_TransportInfo___() {
  void * jresult ;
  pj::TransportInfo *result = 0 ;
  
  result = (pj::TransportInfo *)new pj::TransportInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_TransportInfo___(void * jarg1) {
  pj::TransportInfo *arg1 = (pj::TransportInfo *) 0 ;
  
  arg1 = (pj::TransportInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipRxData_info_set___(void * jarg1, char * jarg2) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipRxData_info_get___(void * jarg1) {
  char * jresult ;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  result = (pj::string *) & ((arg1)->info);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipRxData_wholeMsg_set___(void * jarg1, char * jarg2) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->wholeMsg = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipRxData_wholeMsg_get___(void * jarg1) {
  char * jresult ;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  result = (pj::string *) & ((arg1)->wholeMsg);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipRxData_srcAddress_set___(void * jarg1, char * jarg2) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->srcAddress = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipRxData_srcAddress_get___(void * jarg1) {
  char * jresult ;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->srcAddress);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipRxData_pjRxData_set___(void * jarg1, void * jarg2) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pjRxData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipRxData_pjRxData_get___(void * jarg1) {
  void * jresult ;
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  result = (void *) ((arg1)->pjRxData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipRxData___() {
  void * jresult ;
  pj::SipRxData *result = 0 ;
  
  result = (pj::SipRxData *)new pj::SipRxData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SipRxData___(void * jarg1) {
  pj::SipRxData *arg1 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::SipRxData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxData_info_set___(void * jarg1, char * jarg2) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxData_info_get___(void * jarg1) {
  char * jresult ;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  result = (pj::string *) & ((arg1)->info);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxData_wholeMsg_set___(void * jarg1, char * jarg2) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->wholeMsg = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxData_wholeMsg_get___(void * jarg1) {
  char * jresult ;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  result = (pj::string *) & ((arg1)->wholeMsg);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxData_dstAddress_set___(void * jarg1, char * jarg2) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->dstAddress = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxData_dstAddress_get___(void * jarg1) {
  char * jresult ;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->dstAddress);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxData_pjTxData_set___(void * jarg1, void * jarg2) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pjTxData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxData_pjTxData_get___(void * jarg1) {
  void * jresult ;
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  result = (void *) ((arg1)->pjTxData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipTxData___() {
  void * jresult ;
  pj::SipTxData *result = 0 ;
  
  result = (pj::SipTxData *)new pj::SipTxData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SipTxData___(void * jarg1) {
  pj::SipTxData *arg1 = (pj::SipTxData *) 0 ;
  
  arg1 = (pj::SipTxData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTransaction_role_set___(void * jarg1, int jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_role_e arg2 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  arg2 = (pjsip_role_e)jarg2; 
  if (arg1) (arg1)->role = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTransaction_role_get___(void * jarg1) {
  int jresult ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_role_e result;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  result = (pjsip_role_e) ((arg1)->role);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTransaction_method_set___(void * jarg1, char * jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTransaction_method_get___(void * jarg1) {
  char * jresult ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  result = (pj::string *) & ((arg1)->method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTransaction_statusCode_set___(void * jarg1, int jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  int arg2 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTransaction_statusCode_get___(void * jarg1) {
  int jresult ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  int result;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  result = (int) ((arg1)->statusCode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTransaction_statusText_set___(void * jarg1, char * jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->statusText = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTransaction_statusText_get___(void * jarg1) {
  char * jresult ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  result = (pj::string *) & ((arg1)->statusText);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTransaction_state_set___(void * jarg1, int jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_tsx_state_e arg2 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  arg2 = (pjsip_tsx_state_e)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTransaction_state_get___(void * jarg1) {
  int jresult ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pjsip_tsx_state_e result;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  result = (pjsip_tsx_state_e) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTransaction_lastTx_set___(void * jarg1, void * jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  arg2 = (pj::SipTxData *)jarg2; 
  if (arg1) (arg1)->lastTx = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTransaction_lastTx_get___(void * jarg1) {
  void * jresult ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  pj::SipTxData *result = 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  result = (pj::SipTxData *)& ((arg1)->lastTx);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTransaction_pjTransaction_set___(void * jarg1, void * jarg2) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pjTransaction = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTransaction_pjTransaction_get___(void * jarg1) {
  void * jresult ;
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  result = (void *) ((arg1)->pjTransaction);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipTransaction___() {
  void * jresult ;
  pj::SipTransaction *result = 0 ;
  
  result = (pj::SipTransaction *)new pj::SipTransaction();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SipTransaction___(void * jarg1) {
  pj::SipTransaction *arg1 = (pj::SipTransaction *) 0 ;
  
  arg1 = (pj::SipTransaction *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TimerEvent_entry_set___(void * jarg1, void * jarg2) {
  pj::TimerEvent *arg1 = (pj::TimerEvent *) 0 ;
  pj::TimerEntry arg2 = (pj::TimerEntry) 0 ;
  
  arg1 = (pj::TimerEvent *)jarg1; 
  arg2 = (pj::TimerEntry)jarg2; 
  if (arg1) (arg1)->entry = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TimerEvent_entry_get___(void * jarg1) {
  void * jresult ;
  pj::TimerEvent *arg1 = (pj::TimerEvent *) 0 ;
  pj::TimerEntry result;
  
  arg1 = (pj::TimerEvent *)jarg1; 
  result = (pj::TimerEntry) ((arg1)->entry);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_TimerEvent___() {
  void * jresult ;
  pj::TimerEvent *result = 0 ;
  
  result = (pj::TimerEvent *)new pj::TimerEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_TimerEvent___(void * jarg1) {
  pj::TimerEvent *arg1 = (pj::TimerEvent *) 0 ;
  
  arg1 = (pj::TimerEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEventSrc_rdata_set___(void * jarg1, void * jarg2) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEventSrc_rdata_get___(void * jarg1) {
  void * jresult ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEventSrc_tdata_set___(void * jarg1, void * jarg2) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  arg2 = (pj::SipTxData *)jarg2; 
  if (arg1) (arg1)->tdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEventSrc_tdata_get___(void * jarg1) {
  void * jresult ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::SipTxData *result = 0 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  result = (pj::SipTxData *)& ((arg1)->tdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEventSrc_timer_set___(void * jarg1, void * jarg2) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::TimerEntry arg2 = (pj::TimerEntry) 0 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  arg2 = (pj::TimerEntry)jarg2; 
  if (arg1) (arg1)->timer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEventSrc_timer_get___(void * jarg1) {
  void * jresult ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::TimerEntry result;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  result = (pj::TimerEntry) ((arg1)->timer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEventSrc_status_set___(void * jarg1, int jarg2) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEventSrc_status_get___(void * jarg1) {
  int jresult ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEventSrc_data_set___(void * jarg1, void * jarg2) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  arg2 = (pj::GenericData)jarg2; 
  if (arg1) (arg1)->data = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEventSrc_data_get___(void * jarg1) {
  void * jresult ;
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  pj::GenericData result;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  result = (pj::GenericData) ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_TsxStateEventSrc___() {
  void * jresult ;
  pj::TsxStateEventSrc *result = 0 ;
  
  result = (pj::TsxStateEventSrc *)new pj::TsxStateEventSrc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_TsxStateEventSrc___(void * jarg1) {
  pj::TsxStateEventSrc *arg1 = (pj::TsxStateEventSrc *) 0 ;
  
  arg1 = (pj::TsxStateEventSrc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEvent_src_set___(void * jarg1, void * jarg2) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pj::TsxStateEventSrc *arg2 = (pj::TsxStateEventSrc *) 0 ;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  arg2 = (pj::TsxStateEventSrc *)jarg2; 
  if (arg1) (arg1)->src = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEvent_src_get___(void * jarg1) {
  void * jresult ;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pj::TsxStateEventSrc *result = 0 ;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  result = (pj::TsxStateEventSrc *)& ((arg1)->src);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEvent_tsx_set___(void * jarg1, void * jarg2) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pj::SipTransaction *arg2 = (pj::SipTransaction *) 0 ;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  arg2 = (pj::SipTransaction *)jarg2; 
  if (arg1) (arg1)->tsx = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEvent_tsx_get___(void * jarg1) {
  void * jresult ;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pj::SipTransaction *result = 0 ;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  result = (pj::SipTransaction *)& ((arg1)->tsx);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEvent_prevState_set___(void * jarg1, int jarg2) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_tsx_state_e arg2 ;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  arg2 = (pjsip_tsx_state_e)jarg2; 
  if (arg1) (arg1)->prevState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEvent_prevState_get___(void * jarg1) {
  int jresult ;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_tsx_state_e result;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  result = (pjsip_tsx_state_e) ((arg1)->prevState);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEvent_type_set___(void * jarg1, int jarg2) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_event_id_e arg2 ;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  arg2 = (pjsip_event_id_e)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TsxStateEvent_type_get___(void * jarg1) {
  int jresult ;
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  pjsip_event_id_e result;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  result = (pjsip_event_id_e) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_TsxStateEvent___() {
  void * jresult ;
  pj::TsxStateEvent *result = 0 ;
  
  result = (pj::TsxStateEvent *)new pj::TsxStateEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_TsxStateEvent___(void * jarg1) {
  pj::TsxStateEvent *arg1 = (pj::TsxStateEvent *) 0 ;
  
  arg1 = (pj::TsxStateEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TxMsgEvent_tdata_set___(void * jarg1, void * jarg2) {
  pj::TxMsgEvent *arg1 = (pj::TxMsgEvent *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  arg1 = (pj::TxMsgEvent *)jarg1; 
  arg2 = (pj::SipTxData *)jarg2; 
  if (arg1) (arg1)->tdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TxMsgEvent_tdata_get___(void * jarg1) {
  void * jresult ;
  pj::TxMsgEvent *arg1 = (pj::TxMsgEvent *) 0 ;
  pj::SipTxData *result = 0 ;
  
  arg1 = (pj::TxMsgEvent *)jarg1; 
  result = (pj::SipTxData *)& ((arg1)->tdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_TxMsgEvent___() {
  void * jresult ;
  pj::TxMsgEvent *result = 0 ;
  
  result = (pj::TxMsgEvent *)new pj::TxMsgEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_TxMsgEvent___(void * jarg1) {
  pj::TxMsgEvent *arg1 = (pj::TxMsgEvent *) 0 ;
  
  arg1 = (pj::TxMsgEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TxErrorEvent_tdata_set___(void * jarg1, void * jarg2) {
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTxData *arg2 = (pj::SipTxData *) 0 ;
  
  arg1 = (pj::TxErrorEvent *)jarg1; 
  arg2 = (pj::SipTxData *)jarg2; 
  if (arg1) (arg1)->tdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TxErrorEvent_tdata_get___(void * jarg1) {
  void * jresult ;
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTxData *result = 0 ;
  
  arg1 = (pj::TxErrorEvent *)jarg1; 
  result = (pj::SipTxData *)& ((arg1)->tdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TxErrorEvent_tsx_set___(void * jarg1, void * jarg2) {
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTransaction *arg2 = (pj::SipTransaction *) 0 ;
  
  arg1 = (pj::TxErrorEvent *)jarg1; 
  arg2 = (pj::SipTransaction *)jarg2; 
  if (arg1) (arg1)->tsx = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TxErrorEvent_tsx_get___(void * jarg1) {
  void * jresult ;
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  pj::SipTransaction *result = 0 ;
  
  arg1 = (pj::TxErrorEvent *)jarg1; 
  result = (pj::SipTransaction *)& ((arg1)->tsx);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_TxErrorEvent___() {
  void * jresult ;
  pj::TxErrorEvent *result = 0 ;
  
  result = (pj::TxErrorEvent *)new pj::TxErrorEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_TxErrorEvent___(void * jarg1) {
  pj::TxErrorEvent *arg1 = (pj::TxErrorEvent *) 0 ;
  
  arg1 = (pj::TxErrorEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RxMsgEvent_rdata_set___(void * jarg1, void * jarg2) {
  pj::RxMsgEvent *arg1 = (pj::RxMsgEvent *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::RxMsgEvent *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RxMsgEvent_rdata_get___(void * jarg1) {
  void * jresult ;
  pj::RxMsgEvent *arg1 = (pj::RxMsgEvent *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::RxMsgEvent *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_RxMsgEvent___() {
  void * jresult ;
  pj::RxMsgEvent *result = 0 ;
  
  result = (pj::RxMsgEvent *)new pj::RxMsgEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_RxMsgEvent___(void * jarg1) {
  pj::RxMsgEvent *arg1 = (pj::RxMsgEvent *) 0 ;
  
  arg1 = (pj::RxMsgEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UserEvent_user1_set___(void * jarg1, void * jarg2) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  arg1 = (pj::UserEvent *)jarg1; 
  arg2 = (pj::GenericData)jarg2; 
  if (arg1) (arg1)->user1 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UserEvent_user1_get___(void * jarg1) {
  void * jresult ;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  arg1 = (pj::UserEvent *)jarg1; 
  result = (pj::GenericData) ((arg1)->user1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UserEvent_user2_set___(void * jarg1, void * jarg2) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  arg1 = (pj::UserEvent *)jarg1; 
  arg2 = (pj::GenericData)jarg2; 
  if (arg1) (arg1)->user2 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UserEvent_user2_get___(void * jarg1) {
  void * jresult ;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  arg1 = (pj::UserEvent *)jarg1; 
  result = (pj::GenericData) ((arg1)->user2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UserEvent_user3_set___(void * jarg1, void * jarg2) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  arg1 = (pj::UserEvent *)jarg1; 
  arg2 = (pj::GenericData)jarg2; 
  if (arg1) (arg1)->user3 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UserEvent_user3_get___(void * jarg1) {
  void * jresult ;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  arg1 = (pj::UserEvent *)jarg1; 
  result = (pj::GenericData) ((arg1)->user3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UserEvent_user4_set___(void * jarg1, void * jarg2) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  arg1 = (pj::UserEvent *)jarg1; 
  arg2 = (pj::GenericData)jarg2; 
  if (arg1) (arg1)->user4 = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UserEvent_user4_get___(void * jarg1) {
  void * jresult ;
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  pj::GenericData result;
  
  arg1 = (pj::UserEvent *)jarg1; 
  result = (pj::GenericData) ((arg1)->user4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_UserEvent___() {
  void * jresult ;
  pj::UserEvent *result = 0 ;
  
  result = (pj::UserEvent *)new pj::UserEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_UserEvent___(void * jarg1) {
  pj::UserEvent *arg1 = (pj::UserEvent *) 0 ;
  
  arg1 = (pj::UserEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEventBody_timer_set___(void * jarg1, void * jarg2) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TimerEvent *arg2 = (pj::TimerEvent *) 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  arg2 = (pj::TimerEvent *)jarg2; 
  if (arg1) (arg1)->timer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEventBody_timer_get___(void * jarg1) {
  void * jresult ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TimerEvent *result = 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  result = (pj::TimerEvent *)& ((arg1)->timer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEventBody_tsxState_set___(void * jarg1, void * jarg2) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TsxStateEvent *arg2 = (pj::TsxStateEvent *) 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  arg2 = (pj::TsxStateEvent *)jarg2; 
  if (arg1) (arg1)->tsxState = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEventBody_tsxState_get___(void * jarg1) {
  void * jresult ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TsxStateEvent *result = 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  result = (pj::TsxStateEvent *)& ((arg1)->tsxState);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEventBody_txMsg_set___(void * jarg1, void * jarg2) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TxMsgEvent *arg2 = (pj::TxMsgEvent *) 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  arg2 = (pj::TxMsgEvent *)jarg2; 
  if (arg1) (arg1)->txMsg = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEventBody_txMsg_get___(void * jarg1) {
  void * jresult ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TxMsgEvent *result = 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  result = (pj::TxMsgEvent *)& ((arg1)->txMsg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEventBody_txError_set___(void * jarg1, void * jarg2) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TxErrorEvent *arg2 = (pj::TxErrorEvent *) 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  arg2 = (pj::TxErrorEvent *)jarg2; 
  if (arg1) (arg1)->txError = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEventBody_txError_get___(void * jarg1) {
  void * jresult ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::TxErrorEvent *result = 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  result = (pj::TxErrorEvent *)& ((arg1)->txError);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEventBody_rxMsg_set___(void * jarg1, void * jarg2) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::RxMsgEvent *arg2 = (pj::RxMsgEvent *) 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  arg2 = (pj::RxMsgEvent *)jarg2; 
  if (arg1) (arg1)->rxMsg = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEventBody_rxMsg_get___(void * jarg1) {
  void * jresult ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::RxMsgEvent *result = 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  result = (pj::RxMsgEvent *)& ((arg1)->rxMsg);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEventBody_user_set___(void * jarg1, void * jarg2) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::UserEvent *arg2 = (pj::UserEvent *) 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  arg2 = (pj::UserEvent *)jarg2; 
  if (arg1) (arg1)->user = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEventBody_user_get___(void * jarg1) {
  void * jresult ;
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  pj::UserEvent *result = 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  result = (pj::UserEvent *)& ((arg1)->user);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipEventBody___() {
  void * jresult ;
  pj::SipEventBody *result = 0 ;
  
  result = (pj::SipEventBody *)new pj::SipEventBody();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SipEventBody___(void * jarg1) {
  pj::SipEventBody *arg1 = (pj::SipEventBody *) 0 ;
  
  arg1 = (pj::SipEventBody *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEvent_type_set___(void * jarg1, int jarg2) {
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  pjsip_event_id_e arg2 ;
  
  arg1 = (pj::SipEvent *)jarg1; 
  arg2 = (pjsip_event_id_e)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEvent_type_get___(void * jarg1) {
  int jresult ;
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  pjsip_event_id_e result;
  
  arg1 = (pj::SipEvent *)jarg1; 
  result = (pjsip_event_id_e) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEvent_body_set___(void * jarg1, void * jarg2) {
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  pj::SipEventBody *arg2 = (pj::SipEventBody *) 0 ;
  
  arg1 = (pj::SipEvent *)jarg1; 
  arg2 = (pj::SipEventBody *)jarg2; 
  if (arg1) (arg1)->body = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEvent_body_get___(void * jarg1) {
  void * jresult ;
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  pj::SipEventBody *result = 0 ;
  
  arg1 = (pj::SipEvent *)jarg1; 
  result = (pj::SipEventBody *)& ((arg1)->body);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEvent_pjEvent_set___(void * jarg1, void * jarg2) {
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::SipEvent *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pjEvent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipEvent_pjEvent_get___(void * jarg1) {
  void * jresult ;
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::SipEvent *)jarg1; 
  result = (void *) ((arg1)->pjEvent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipEvent___() {
  void * jresult ;
  pj::SipEvent *result = 0 ;
  
  result = (pj::SipEvent *)new pj::SipEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SipEvent___(void * jarg1) {
  pj::SipEvent *arg1 = (pj::SipEvent *) 0 ;
  
  arg1 = (pj::SipEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMediaType_type_set___(void * jarg1, char * jarg2) {
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipMediaType *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMediaType_type_get___(void * jarg1) {
  char * jresult ;
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipMediaType *)jarg1; 
  result = (pj::string *) & ((arg1)->type);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMediaType_subType_set___(void * jarg1, char * jarg2) {
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipMediaType *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->subType = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMediaType_subType_get___(void * jarg1) {
  char * jresult ;
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipMediaType *)jarg1; 
  result = (pj::string *) & ((arg1)->subType);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipMediaType___() {
  void * jresult ;
  pj::SipMediaType *result = 0 ;
  
  result = (pj::SipMediaType *)new pj::SipMediaType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SipMediaType___(void * jarg1) {
  pj::SipMediaType *arg1 = (pj::SipMediaType *) 0 ;
  
  arg1 = (pj::SipMediaType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeader_hName_set___(void * jarg1, char * jarg2) {
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipHeader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->hName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeader_hName_get___(void * jarg1) {
  char * jresult ;
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipHeader *)jarg1; 
  result = (pj::string *) & ((arg1)->hName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeader_hValue_set___(void * jarg1, char * jarg2) {
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipHeader *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->hValue = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeader_hValue_get___(void * jarg1) {
  char * jresult ;
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipHeader *)jarg1; 
  result = (pj::string *) & ((arg1)->hValue);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipHeader___() {
  void * jresult ;
  pj::SipHeader *result = 0 ;
  
  result = (pj::SipHeader *)new pj::SipHeader();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SipHeader___(void * jarg1) {
  pj::SipHeader *arg1 = (pj::SipHeader *) 0 ;
  
  arg1 = (pj::SipHeader *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPart_headers_set___(void * jarg1, void * jarg2) {
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1; 
  arg2 = (pj::SipHeaderVector *)jarg2; 
  if (arg1) (arg1)->headers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPart_headers_get___(void * jarg1) {
  void * jresult ;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1; 
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPart_contentType_set___(void * jarg1, void * jarg2) {
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipMediaType *arg2 = (pj::SipMediaType *) 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1; 
  arg2 = (pj::SipMediaType *)jarg2; 
  if (arg1) (arg1)->contentType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPart_contentType_get___(void * jarg1) {
  void * jresult ;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::SipMediaType *result = 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1; 
  result = (pj::SipMediaType *)& ((arg1)->contentType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPart_body_set___(void * jarg1, char * jarg2) {
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->body = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPart_body_get___(void * jarg1) {
  char * jresult ;
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1; 
  result = (pj::string *) & ((arg1)->body);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipMultipartPart___() {
  void * jresult ;
  pj::SipMultipartPart *result = 0 ;
  
  result = (pj::SipMultipartPart *)new pj::SipMultipartPart();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SipMultipartPart___(void * jarg1) {
  pj::SipMultipartPart *arg1 = (pj::SipMultipartPart *) 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxOption_targetUri_set___(void * jarg1, char * jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->targetUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxOption_targetUri_get___(void * jarg1) {
  char * jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (pj::string *) & ((arg1)->targetUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxOption_headers_set___(void * jarg1, void * jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  arg2 = (pj::SipHeaderVector *)jarg2; 
  if (arg1) (arg1)->headers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxOption_headers_get___(void * jarg1) {
  void * jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxOption_contentType_set___(void * jarg1, char * jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contentType = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxOption_contentType_get___(void * jarg1) {
  char * jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (pj::string *) & ((arg1)->contentType);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxOption_msgBody_set___(void * jarg1, char * jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->msgBody = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxOption_msgBody_get___(void * jarg1) {
  char * jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (pj::string *) & ((arg1)->msgBody);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxOption_multipartContentType_set___(void * jarg1, void * jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMediaType *arg2 = (pj::SipMediaType *) 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  arg2 = (pj::SipMediaType *)jarg2; 
  if (arg1) (arg1)->multipartContentType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxOption_multipartContentType_get___(void * jarg1) {
  void * jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMediaType *result = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (pj::SipMediaType *)& ((arg1)->multipartContentType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxOption_multipartParts_set___(void * jarg1, void * jarg2) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMultipartPartVector *arg2 = (pj::SipMultipartPartVector *) 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  arg2 = (pj::SipMultipartPartVector *)jarg2; 
  if (arg1) (arg1)->multipartParts = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxOption_multipartParts_get___(void * jarg1) {
  void * jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  pj::SipMultipartPartVector *result = 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (pj::SipMultipartPartVector *)& ((arg1)->multipartParts);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipTxOption_isEmpty___(void * jarg1) {
  unsigned int jresult ;
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  bool result;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  result = (bool)((pj::SipTxOption const *)arg1)->isEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipTxOption___() {
  void * jresult ;
  pj::SipTxOption *result = 0 ;
  
  result = (pj::SipTxOption *)new pj::SipTxOption();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SipTxOption___(void * jarg1) {
  pj::SipTxOption *arg1 = (pj::SipTxOption *) 0 ;
  
  arg1 = (pj::SipTxOption *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SendInstantMessageParam_contentType_set___(void * jarg1, char * jarg2) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contentType = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SendInstantMessageParam_contentType_get___(void * jarg1) {
  char * jresult ;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  result = (pj::string *) & ((arg1)->contentType);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SendInstantMessageParam_content_set___(void * jarg1, char * jarg2) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->content = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SendInstantMessageParam_content_get___(void * jarg1) {
  char * jresult ;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  result = (pj::string *) & ((arg1)->content);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SendInstantMessageParam_txOption_set___(void * jarg1, void * jarg2) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  arg2 = (pj::SipTxOption *)jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SendInstantMessageParam_txOption_get___(void * jarg1) {
  void * jresult ;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SendInstantMessageParam_userData_set___(void * jarg1, void * jarg2) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  arg2 = (pj::Token)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SendInstantMessageParam_userData_get___(void * jarg1) {
  void * jresult ;
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  pj::Token result;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  result = (pj::Token) ((arg1)->userData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SendInstantMessageParam___() {
  void * jresult ;
  pj::SendInstantMessageParam *result = 0 ;
  
  result = (pj::SendInstantMessageParam *)new pj::SendInstantMessageParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SendInstantMessageParam___(void * jarg1) {
  pj::SendInstantMessageParam *arg1 = (pj::SendInstantMessageParam *) 0 ;
  
  arg1 = (pj::SendInstantMessageParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SendTypingIndicationParam_isTyping_set___(void * jarg1, unsigned int jarg2) {
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::SendTypingIndicationParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isTyping = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SendTypingIndicationParam_isTyping_get___(void * jarg1) {
  unsigned int jresult ;
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  bool result;
  
  arg1 = (pj::SendTypingIndicationParam *)jarg1; 
  result = (bool) ((arg1)->isTyping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SendTypingIndicationParam_txOption_set___(void * jarg1, void * jarg2) {
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  arg1 = (pj::SendTypingIndicationParam *)jarg1; 
  arg2 = (pj::SipTxOption *)jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SendTypingIndicationParam_txOption_get___(void * jarg1) {
  void * jresult ;
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  arg1 = (pj::SendTypingIndicationParam *)jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SendTypingIndicationParam___() {
  void * jresult ;
  pj::SendTypingIndicationParam *result = 0 ;
  
  result = (pj::SendTypingIndicationParam *)new pj::SendTypingIndicationParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SendTypingIndicationParam___(void * jarg1) {
  pj::SendTypingIndicationParam *arg1 = (pj::SendTypingIndicationParam *) 0 ;
  
  arg1 = (pj::SendTypingIndicationParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_Clear___(void * jarg1) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  pj::SipHeader *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (pj::SipHeader *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipHeader const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::SipHeader const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  std::vector< pj::SipHeader >::size_type result;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  result = ((std::vector< pj::SipHeader > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  std::vector< pj::SipHeader >::size_type result;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  result = ((std::vector< pj::SipHeader > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  std::vector< pj::SipHeader >::size_type arg2 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (std::vector< pj::SipHeader >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipHeaderVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  result = (std::vector< pj::SipHeader > *)new std::vector< pj::SipHeader >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipHeaderVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::SipHeader > *arg1 = 0 ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipHeader > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::SipHeader > *)new std::vector< pj::SipHeader >((std::vector< pj::SipHeader > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipHeaderVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::SipHeader > *)new_std_vector_Sl_pj_SipHeader_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  pj::SipHeader result;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_SipHeader_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new pj::SipHeader((const pj::SipHeader &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  pj::SipHeader *result = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::SipHeader *) &std_vector_Sl_pj_SipHeader_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  pj::SipHeader *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SipHeader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipHeader const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipHeader_Sg__setitem(arg1,arg2,(pj::SipHeader const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  std::vector< pj::SipHeader > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (std::vector< pj::SipHeader > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipHeader > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_SipHeader_Sg__AddRange(arg1,(std::vector< pj::SipHeader > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::SipHeader > *)std_vector_Sl_pj_SipHeader_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  pj::SipHeader *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SipHeader *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipHeader const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipHeader_Sg__Insert(arg1,arg2,(pj::SipHeader const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  std::vector< pj::SipHeader > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SipHeader > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipHeader > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipHeader_Sg__InsertRange(arg1,arg2,(std::vector< pj::SipHeader > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_SipHeader_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SipHeader_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::SipHeader *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::SipHeader > *result = 0 ;
  
  arg1 = (pj::SipHeader *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipHeader const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::SipHeader > *)std_vector_Sl_pj_SipHeader_Sg__Repeat((pj::SipHeader const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  std_vector_Sl_pj_SipHeader_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SipHeader_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipHeaderVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  int arg2 ;
  std::vector< pj::SipHeader > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SipHeader > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipHeader > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipHeader_Sg__SetRange(arg1,arg2,(std::vector< pj::SipHeader > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SipHeaderVector___(void * jarg1) {
  std::vector< pj::SipHeader > *arg1 = (std::vector< pj::SipHeader > *) 0 ;
  
  arg1 = (std::vector< pj::SipHeader > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_Clear___(void * jarg1) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  pj::AuthCredInfo *arg2 = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (pj::AuthCredInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AuthCredInfo const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::AuthCredInfo const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  std::vector< pj::AuthCredInfo >::size_type result;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  result = ((std::vector< pj::AuthCredInfo > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  std::vector< pj::AuthCredInfo >::size_type result;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  result = ((std::vector< pj::AuthCredInfo > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  std::vector< pj::AuthCredInfo >::size_type arg2 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (std::vector< pj::AuthCredInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AuthCredInfoVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  result = (std::vector< pj::AuthCredInfo > *)new std::vector< pj::AuthCredInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AuthCredInfoVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::AuthCredInfo > *arg1 = 0 ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AuthCredInfo > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::AuthCredInfo > *)new std::vector< pj::AuthCredInfo >((std::vector< pj::AuthCredInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AuthCredInfoVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::AuthCredInfo > *)new_std_vector_Sl_pj_AuthCredInfo_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  pj::AuthCredInfo result;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_AuthCredInfo_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new pj::AuthCredInfo((const pj::AuthCredInfo &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  pj::AuthCredInfo *result = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::AuthCredInfo *) &std_vector_Sl_pj_AuthCredInfo_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  pj::AuthCredInfo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::AuthCredInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AuthCredInfo const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__setitem(arg1,arg2,(pj::AuthCredInfo const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  std::vector< pj::AuthCredInfo > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (std::vector< pj::AuthCredInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AuthCredInfo > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_AuthCredInfo_Sg__AddRange(arg1,(std::vector< pj::AuthCredInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::AuthCredInfo > *)std_vector_Sl_pj_AuthCredInfo_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  pj::AuthCredInfo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::AuthCredInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AuthCredInfo const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__Insert(arg1,arg2,(pj::AuthCredInfo const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::AuthCredInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AuthCredInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AuthCredInfo > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__InsertRange(arg1,arg2,(std::vector< pj::AuthCredInfo > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::AuthCredInfo *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::AuthCredInfo > *result = 0 ;
  
  arg1 = (pj::AuthCredInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AuthCredInfo const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::AuthCredInfo > *)std_vector_Sl_pj_AuthCredInfo_Sg__Repeat((pj::AuthCredInfo const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  std_vector_Sl_pj_AuthCredInfo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfoVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::AuthCredInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AuthCredInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AuthCredInfo > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AuthCredInfo_Sg__SetRange(arg1,arg2,(std::vector< pj::AuthCredInfo > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AuthCredInfoVector___(void * jarg1) {
  std::vector< pj::AuthCredInfo > *arg1 = (std::vector< pj::AuthCredInfo > *) 0 ;
  
  arg1 = (std::vector< pj::AuthCredInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_Clear___(void * jarg1) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  pj::SrtpCrypto *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (pj::SrtpCrypto *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SrtpCrypto const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::SrtpCrypto const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  std::vector< pj::SrtpCrypto >::size_type result;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  result = ((std::vector< pj::SrtpCrypto > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  std::vector< pj::SrtpCrypto >::size_type result;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  result = ((std::vector< pj::SrtpCrypto > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  std::vector< pj::SrtpCrypto >::size_type arg2 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (std::vector< pj::SrtpCrypto >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SrtpCryptoVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::SrtpCrypto > *result = 0 ;
  
  result = (std::vector< pj::SrtpCrypto > *)new std::vector< pj::SrtpCrypto >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SrtpCryptoVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::SrtpCrypto > *arg1 = 0 ;
  std::vector< pj::SrtpCrypto > *result = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SrtpCrypto > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::SrtpCrypto > *)new std::vector< pj::SrtpCrypto >((std::vector< pj::SrtpCrypto > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SrtpCryptoVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::SrtpCrypto > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::SrtpCrypto > *)new_std_vector_Sl_pj_SrtpCrypto_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  pj::SrtpCrypto result;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_SrtpCrypto_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new pj::SrtpCrypto((const pj::SrtpCrypto &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  pj::SrtpCrypto *result = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::SrtpCrypto *) &std_vector_Sl_pj_SrtpCrypto_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  pj::SrtpCrypto *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SrtpCrypto *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SrtpCrypto const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__setitem(arg1,arg2,(pj::SrtpCrypto const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  std::vector< pj::SrtpCrypto > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (std::vector< pj::SrtpCrypto > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SrtpCrypto > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_SrtpCrypto_Sg__AddRange(arg1,(std::vector< pj::SrtpCrypto > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::SrtpCrypto > *result = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::SrtpCrypto > *)std_vector_Sl_pj_SrtpCrypto_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  pj::SrtpCrypto *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SrtpCrypto *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SrtpCrypto const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__Insert(arg1,arg2,(pj::SrtpCrypto const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  std::vector< pj::SrtpCrypto > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SrtpCrypto > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SrtpCrypto > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__InsertRange(arg1,arg2,(std::vector< pj::SrtpCrypto > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::SrtpCrypto *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::SrtpCrypto > *result = 0 ;
  
  arg1 = (pj::SrtpCrypto *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SrtpCrypto const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::SrtpCrypto > *)std_vector_Sl_pj_SrtpCrypto_Sg__Repeat((pj::SrtpCrypto const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  std_vector_Sl_pj_SrtpCrypto_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCryptoVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  int arg2 ;
  std::vector< pj::SrtpCrypto > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SrtpCrypto > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SrtpCrypto > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SrtpCrypto_Sg__SetRange(arg1,arg2,(std::vector< pj::SrtpCrypto > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SrtpCryptoVector___(void * jarg1) {
  std::vector< pj::SrtpCrypto > *arg1 = (std::vector< pj::SrtpCrypto > *) 0 ;
  
  arg1 = (std::vector< pj::SrtpCrypto > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_Clear___(void * jarg1) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  pj::SipMultipartPart *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (pj::SipMultipartPart *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipMultipartPart const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::SipMultipartPart const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  std::vector< pj::SipMultipartPart >::size_type result;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  result = ((std::vector< pj::SipMultipartPart > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  std::vector< pj::SipMultipartPart >::size_type result;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  result = ((std::vector< pj::SipMultipartPart > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  std::vector< pj::SipMultipartPart >::size_type arg2 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (std::vector< pj::SipMultipartPart >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipMultipartPartVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  result = (std::vector< pj::SipMultipartPart > *)new std::vector< pj::SipMultipartPart >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipMultipartPartVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::SipMultipartPart > *arg1 = 0 ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipMultipartPart > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::SipMultipartPart > *)new std::vector< pj::SipMultipartPart >((std::vector< pj::SipMultipartPart > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SipMultipartPartVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::SipMultipartPart > *)new_std_vector_Sl_pj_SipMultipartPart_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  pj::SipMultipartPart result;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_SipMultipartPart_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new pj::SipMultipartPart((const pj::SipMultipartPart &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  pj::SipMultipartPart *result = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::SipMultipartPart *) &std_vector_Sl_pj_SipMultipartPart_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  pj::SipMultipartPart *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SipMultipartPart *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipMultipartPart const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__setitem(arg1,arg2,(pj::SipMultipartPart const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  std::vector< pj::SipMultipartPart > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (std::vector< pj::SipMultipartPart > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipMultipartPart > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_SipMultipartPart_Sg__AddRange(arg1,(std::vector< pj::SipMultipartPart > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::SipMultipartPart > *)std_vector_Sl_pj_SipMultipartPart_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  pj::SipMultipartPart *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::SipMultipartPart *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipMultipartPart const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__Insert(arg1,arg2,(pj::SipMultipartPart const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  std::vector< pj::SipMultipartPart > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SipMultipartPart > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipMultipartPart > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__InsertRange(arg1,arg2,(std::vector< pj::SipMultipartPart > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::SipMultipartPart *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::SipMultipartPart > *result = 0 ;
  
  arg1 = (pj::SipMultipartPart *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SipMultipartPart const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::SipMultipartPart > *)std_vector_Sl_pj_SipMultipartPart_Sg__Repeat((pj::SipMultipartPart const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  std_vector_Sl_pj_SipMultipartPart_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SipMultipartPartVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  int arg2 ;
  std::vector< pj::SipMultipartPart > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::SipMultipartPart > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::SipMultipartPart > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_SipMultipartPart_Sg__SetRange(arg1,arg2,(std::vector< pj::SipMultipartPart > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SipMultipartPartVector___(void * jarg1) {
  std::vector< pj::SipMultipartPart > *arg1 = (std::vector< pj::SipMultipartPart > *) 0 ;
  
  arg1 = (std::vector< pj::SipMultipartPart > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_Clear___(void * jarg1) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  pj::Buddy **arg2 = 0 ;
  pj::Buddy *temp2 = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  temp2 = (pj::Buddy *)jarg2;
  arg2 = (pj::Buddy **)&temp2; 
  (arg1)->push_back((pj::Buddy *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  std::vector< pj::Buddy * >::size_type result;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  result = ((std::vector< pj::Buddy * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  std::vector< pj::Buddy * >::size_type result;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  result = ((std::vector< pj::Buddy * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  std::vector< pj::Buddy * >::size_type arg2 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (std::vector< pj::Buddy * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_BuddyVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  result = (std::vector< pj::Buddy * > *)new std::vector< pj::Buddy * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_BuddyVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::Buddy * > *arg1 = 0 ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::Buddy * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::Buddy * > *)new std::vector< pj::Buddy * >((std::vector< pj::Buddy * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_BuddyVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::Buddy * > *)new_std_vector_Sl_pj_Buddy_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  pj::Buddy *result = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::Buddy *)std_vector_Sl_pj_Buddy_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  pj::Buddy **result = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::Buddy **) &std_vector_Sl_pj_Buddy_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  pj::Buddy **arg3 = 0 ;
  pj::Buddy *temp3 = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::Buddy *)jarg3;
  arg3 = (pj::Buddy **)&temp3; 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__setitem(arg1,arg2,(pj::Buddy *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  std::vector< pj::Buddy * > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (std::vector< pj::Buddy * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::Buddy * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_Buddy_Sm__Sg__AddRange(arg1,(std::vector< pj::Buddy * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::Buddy * > *)std_vector_Sl_pj_Buddy_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  pj::Buddy **arg3 = 0 ;
  pj::Buddy *temp3 = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::Buddy *)jarg3;
  arg3 = (pj::Buddy **)&temp3; 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__Insert(arg1,arg2,(pj::Buddy *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  std::vector< pj::Buddy * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::Buddy * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::Buddy * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__InsertRange(arg1,arg2,(std::vector< pj::Buddy * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::Buddy **arg1 = 0 ;
  int arg2 ;
  pj::Buddy *temp1 = 0 ;
  std::vector< pj::Buddy * > *result = 0 ;
  
  temp1 = (pj::Buddy *)jarg1;
  arg1 = (pj::Buddy **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::Buddy * > *)std_vector_Sl_pj_Buddy_Sm__Sg__Repeat((pj::Buddy *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  std_vector_Sl_pj_Buddy_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  int arg2 ;
  std::vector< pj::Buddy * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::Buddy * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::Buddy * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_Buddy_Sm__Sg__SetRange(arg1,arg2,(std::vector< pj::Buddy * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_Contains___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  pj::Buddy **arg2 = 0 ;
  pj::Buddy *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  temp2 = (pj::Buddy *)jarg2;
  arg2 = (pj::Buddy **)&temp2; 
  result = (bool)std_vector_Sl_pj_Buddy_Sm__Sg__Contains(arg1,(pj::Buddy *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_IndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  pj::Buddy **arg2 = 0 ;
  pj::Buddy *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  temp2 = (pj::Buddy *)jarg2;
  arg2 = (pj::Buddy **)&temp2; 
  result = (int)std_vector_Sl_pj_Buddy_Sm__Sg__IndexOf(arg1,(pj::Buddy *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_LastIndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  pj::Buddy **arg2 = 0 ;
  pj::Buddy *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  temp2 = (pj::Buddy *)jarg2;
  arg2 = (pj::Buddy **)&temp2; 
  result = (int)std_vector_Sl_pj_Buddy_Sm__Sg__LastIndexOf(arg1,(pj::Buddy *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyVector_Remove___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  pj::Buddy **arg2 = 0 ;
  pj::Buddy *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  temp2 = (pj::Buddy *)jarg2;
  arg2 = (pj::Buddy **)&temp2; 
  result = (bool)std_vector_Sl_pj_Buddy_Sm__Sg__Remove(arg1,(pj::Buddy *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_BuddyVector___(void * jarg1) {
  std::vector< pj::Buddy * > *arg1 = (std::vector< pj::Buddy * > *) 0 ;
  
  arg1 = (std::vector< pj::Buddy * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_Clear___(void * jarg1) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  pj::AudioMedia **arg2 = 0 ;
  pj::AudioMedia *temp2 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  temp2 = (pj::AudioMedia *)jarg2;
  arg2 = (pj::AudioMedia **)&temp2; 
  (arg1)->push_back((pj::AudioMedia *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  std::vector< pj::AudioMedia * >::size_type result;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  result = ((std::vector< pj::AudioMedia * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  std::vector< pj::AudioMedia * >::size_type result;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  result = ((std::vector< pj::AudioMedia * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  std::vector< pj::AudioMedia * >::size_type arg2 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (std::vector< pj::AudioMedia * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AudioMediaVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  result = (std::vector< pj::AudioMedia * > *)new std::vector< pj::AudioMedia * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AudioMediaVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::AudioMedia * > *arg1 = 0 ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioMedia * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::AudioMedia * > *)new std::vector< pj::AudioMedia * >((std::vector< pj::AudioMedia * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AudioMediaVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::AudioMedia * > *)new_std_vector_Sl_pj_AudioMedia_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  pj::AudioMedia *result = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::AudioMedia *)std_vector_Sl_pj_AudioMedia_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  pj::AudioMedia **result = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::AudioMedia **) &std_vector_Sl_pj_AudioMedia_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  pj::AudioMedia **arg3 = 0 ;
  pj::AudioMedia *temp3 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::AudioMedia *)jarg3;
  arg3 = (pj::AudioMedia **)&temp3; 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__setitem(arg1,arg2,(pj::AudioMedia *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  std::vector< pj::AudioMedia * > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (std::vector< pj::AudioMedia * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioMedia * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_AudioMedia_Sm__Sg__AddRange(arg1,(std::vector< pj::AudioMedia * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::AudioMedia * > *)std_vector_Sl_pj_AudioMedia_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  pj::AudioMedia **arg3 = 0 ;
  pj::AudioMedia *temp3 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::AudioMedia *)jarg3;
  arg3 = (pj::AudioMedia **)&temp3; 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__Insert(arg1,arg2,(pj::AudioMedia *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioMedia * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AudioMedia * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioMedia * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__InsertRange(arg1,arg2,(std::vector< pj::AudioMedia * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::AudioMedia **arg1 = 0 ;
  int arg2 ;
  pj::AudioMedia *temp1 = 0 ;
  std::vector< pj::AudioMedia * > *result = 0 ;
  
  temp1 = (pj::AudioMedia *)jarg1;
  arg1 = (pj::AudioMedia **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::AudioMedia * > *)std_vector_Sl_pj_AudioMedia_Sm__Sg__Repeat((pj::AudioMedia *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  std_vector_Sl_pj_AudioMedia_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioMedia * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AudioMedia * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioMedia * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioMedia_Sm__Sg__SetRange(arg1,arg2,(std::vector< pj::AudioMedia * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_Contains___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  pj::AudioMedia **arg2 = 0 ;
  pj::AudioMedia *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  temp2 = (pj::AudioMedia *)jarg2;
  arg2 = (pj::AudioMedia **)&temp2; 
  result = (bool)std_vector_Sl_pj_AudioMedia_Sm__Sg__Contains(arg1,(pj::AudioMedia *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_IndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  pj::AudioMedia **arg2 = 0 ;
  pj::AudioMedia *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  temp2 = (pj::AudioMedia *)jarg2;
  arg2 = (pj::AudioMedia **)&temp2; 
  result = (int)std_vector_Sl_pj_AudioMedia_Sm__Sg__IndexOf(arg1,(pj::AudioMedia *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_LastIndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  pj::AudioMedia **arg2 = 0 ;
  pj::AudioMedia *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  temp2 = (pj::AudioMedia *)jarg2;
  arg2 = (pj::AudioMedia **)&temp2; 
  result = (int)std_vector_Sl_pj_AudioMedia_Sm__Sg__LastIndexOf(arg1,(pj::AudioMedia *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaVector_Remove___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  pj::AudioMedia **arg2 = 0 ;
  pj::AudioMedia *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  temp2 = (pj::AudioMedia *)jarg2;
  arg2 = (pj::AudioMedia **)&temp2; 
  result = (bool)std_vector_Sl_pj_AudioMedia_Sm__Sg__Remove(arg1,(pj::AudioMedia *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AudioMediaVector___(void * jarg1) {
  std::vector< pj::AudioMedia * > *arg1 = (std::vector< pj::AudioMedia * > *) 0 ;
  
  arg1 = (std::vector< pj::AudioMedia * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_Clear___(void * jarg1) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  pj::ToneDesc *arg2 = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (pj::ToneDesc *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDesc const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::ToneDesc const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  std::vector< pj::ToneDesc >::size_type result;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  result = ((std::vector< pj::ToneDesc > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  std::vector< pj::ToneDesc >::size_type result;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  result = ((std::vector< pj::ToneDesc > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  std::vector< pj::ToneDesc >::size_type arg2 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (std::vector< pj::ToneDesc >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ToneDescVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  result = (std::vector< pj::ToneDesc > *)new std::vector< pj::ToneDesc >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ToneDescVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::ToneDesc > *arg1 = 0 ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDesc > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::ToneDesc > *)new std::vector< pj::ToneDesc >((std::vector< pj::ToneDesc > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ToneDescVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::ToneDesc > *)new_std_vector_Sl_pj_ToneDesc_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  pj::ToneDesc result;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_ToneDesc_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new pj::ToneDesc((const pj::ToneDesc &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  pj::ToneDesc *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::ToneDesc *) &std_vector_Sl_pj_ToneDesc_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  pj::ToneDesc *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::ToneDesc *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDesc const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__setitem(arg1,arg2,(pj::ToneDesc const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  std::vector< pj::ToneDesc > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (std::vector< pj::ToneDesc > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDesc > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_ToneDesc_Sg__AddRange(arg1,(std::vector< pj::ToneDesc > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::ToneDesc > *)std_vector_Sl_pj_ToneDesc_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  pj::ToneDesc *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::ToneDesc *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDesc const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__Insert(arg1,arg2,(pj::ToneDesc const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDesc > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::ToneDesc > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDesc > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__InsertRange(arg1,arg2,(std::vector< pj::ToneDesc > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::ToneDesc *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::ToneDesc > *result = 0 ;
  
  arg1 = (pj::ToneDesc *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDesc const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::ToneDesc > *)std_vector_Sl_pj_ToneDesc_Sg__Repeat((pj::ToneDesc const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  std_vector_Sl_pj_ToneDesc_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDescVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDesc > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::ToneDesc > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDesc > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDesc_Sg__SetRange(arg1,arg2,(std::vector< pj::ToneDesc > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_ToneDescVector___(void * jarg1) {
  std::vector< pj::ToneDesc > *arg1 = (std::vector< pj::ToneDesc > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDesc > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_Clear___(void * jarg1) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  pj::ToneDigit *arg2 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (pj::ToneDigit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigit const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::ToneDigit const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  std::vector< pj::ToneDigit >::size_type result;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  result = ((std::vector< pj::ToneDigit > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  std::vector< pj::ToneDigit >::size_type result;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  result = ((std::vector< pj::ToneDigit > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  std::vector< pj::ToneDigit >::size_type arg2 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (std::vector< pj::ToneDigit >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ToneDigitVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  result = (std::vector< pj::ToneDigit > *)new std::vector< pj::ToneDigit >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ToneDigitVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::ToneDigit > *arg1 = 0 ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigit > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::ToneDigit > *)new std::vector< pj::ToneDigit >((std::vector< pj::ToneDigit > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ToneDigitVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::ToneDigit > *)new_std_vector_Sl_pj_ToneDigit_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  pj::ToneDigit result;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_ToneDigit_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new pj::ToneDigit((const pj::ToneDigit &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  pj::ToneDigit *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::ToneDigit *) &std_vector_Sl_pj_ToneDigit_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  pj::ToneDigit *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::ToneDigit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigit const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__setitem(arg1,arg2,(pj::ToneDigit const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  std::vector< pj::ToneDigit > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (std::vector< pj::ToneDigit > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigit > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_ToneDigit_Sg__AddRange(arg1,(std::vector< pj::ToneDigit > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::ToneDigit > *)std_vector_Sl_pj_ToneDigit_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  pj::ToneDigit *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::ToneDigit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigit const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__Insert(arg1,arg2,(pj::ToneDigit const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDigit > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::ToneDigit > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigit > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__InsertRange(arg1,arg2,(std::vector< pj::ToneDigit > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::ToneDigit *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::ToneDigit > *result = 0 ;
  
  arg1 = (pj::ToneDigit *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigit const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::ToneDigit > *)std_vector_Sl_pj_ToneDigit_Sg__Repeat((pj::ToneDigit const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  std_vector_Sl_pj_ToneDigit_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDigit > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::ToneDigit > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigit > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigit_Sg__SetRange(arg1,arg2,(std::vector< pj::ToneDigit > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_ToneDigitVector___(void * jarg1) {
  std::vector< pj::ToneDigit > *arg1 = (std::vector< pj::ToneDigit > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDigit > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_Clear___(void * jarg1) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  pj::ToneDigitMapDigit *arg2 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (pj::ToneDigitMapDigit *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigitMapDigit const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::ToneDigitMapDigit const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  std::vector< pj::ToneDigitMapDigit >::size_type result;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  result = ((std::vector< pj::ToneDigitMapDigit > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  std::vector< pj::ToneDigitMapDigit >::size_type result;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  result = ((std::vector< pj::ToneDigitMapDigit > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  std::vector< pj::ToneDigitMapDigit >::size_type arg2 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (std::vector< pj::ToneDigitMapDigit >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ToneDigitMapVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  result = (std::vector< pj::ToneDigitMapDigit > *)new std::vector< pj::ToneDigitMapDigit >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ToneDigitMapVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = 0 ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigitMapDigit > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::ToneDigitMapDigit > *)new std::vector< pj::ToneDigitMapDigit >((std::vector< pj::ToneDigitMapDigit > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ToneDigitMapVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::ToneDigitMapDigit > *)new_std_vector_Sl_pj_ToneDigitMapDigit_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  pj::ToneDigitMapDigit result;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_ToneDigitMapDigit_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new pj::ToneDigitMapDigit((const pj::ToneDigitMapDigit &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  pj::ToneDigitMapDigit *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::ToneDigitMapDigit *) &std_vector_Sl_pj_ToneDigitMapDigit_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  pj::ToneDigitMapDigit *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::ToneDigitMapDigit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigitMapDigit const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__setitem(arg1,arg2,(pj::ToneDigitMapDigit const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  std::vector< pj::ToneDigitMapDigit > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (std::vector< pj::ToneDigitMapDigit > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigitMapDigit > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_ToneDigitMapDigit_Sg__AddRange(arg1,(std::vector< pj::ToneDigitMapDigit > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::ToneDigitMapDigit > *)std_vector_Sl_pj_ToneDigitMapDigit_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  pj::ToneDigitMapDigit *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::ToneDigitMapDigit *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigitMapDigit const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__Insert(arg1,arg2,(pj::ToneDigitMapDigit const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDigitMapDigit > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::ToneDigitMapDigit > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigitMapDigit > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__InsertRange(arg1,arg2,(std::vector< pj::ToneDigitMapDigit > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::ToneDigitMapDigit *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::ToneDigitMapDigit > *result = 0 ;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigitMapDigit const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::ToneDigitMapDigit > *)std_vector_Sl_pj_ToneDigitMapDigit_Sg__Repeat((pj::ToneDigitMapDigit const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  std_vector_Sl_pj_ToneDigitMapDigit_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  int arg2 ;
  std::vector< pj::ToneDigitMapDigit > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::ToneDigitMapDigit > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::ToneDigitMapDigit > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_ToneDigitMapDigit_Sg__SetRange(arg1,arg2,(std::vector< pj::ToneDigitMapDigit > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_ToneDigitMapVector___(void * jarg1) {
  std::vector< pj::ToneDigitMapDigit > *arg1 = (std::vector< pj::ToneDigitMapDigit > *) 0 ;
  
  arg1 = (std::vector< pj::ToneDigitMapDigit > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_Clear___(void * jarg1) {
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  pj::MediaFormat **arg2 = 0 ;
  pj::MediaFormat *temp2 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  temp2 = (pj::MediaFormat *)jarg2;
  arg2 = (pj::MediaFormat **)&temp2; 
  (arg1)->push_back((pj::MediaFormat *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  std::vector< pj::MediaFormat * >::size_type result;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  result = ((std::vector< pj::MediaFormat * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  std::vector< pj::MediaFormat * >::size_type result;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  result = ((std::vector< pj::MediaFormat * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  std::vector< pj::MediaFormat * >::size_type arg2 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  arg2 = (std::vector< pj::MediaFormat * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_MediaFormatVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::MediaFormat * > *result = 0 ;
  
  result = (std::vector< pj::MediaFormat * > *)new std::vector< pj::MediaFormat * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_MediaFormatVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::MediaFormat * > *arg1 = 0 ;
  std::vector< pj::MediaFormat * > *result = 0 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::MediaFormat * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::MediaFormat * > *)new std::vector< pj::MediaFormat * >((std::vector< pj::MediaFormat * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_MediaFormatVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::MediaFormat * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::MediaFormat * > *)new_std_vector_Sl_pj_MediaFormat_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  int arg2 ;
  pj::MediaFormat *result = 0 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::MediaFormat *)std_vector_Sl_pj_MediaFormat_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  int arg2 ;
  pj::MediaFormat **result = 0 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::MediaFormat **) &std_vector_Sl_pj_MediaFormat_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  int arg2 ;
  pj::MediaFormat **arg3 = 0 ;
  pj::MediaFormat *temp3 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::MediaFormat *)jarg3;
  arg3 = (pj::MediaFormat **)&temp3; 
  try {
    std_vector_Sl_pj_MediaFormat_Sm__Sg__setitem(arg1,arg2,(pj::MediaFormat *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  std::vector< pj::MediaFormat * > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  arg2 = (std::vector< pj::MediaFormat * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::MediaFormat * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_MediaFormat_Sm__Sg__AddRange(arg1,(std::vector< pj::MediaFormat * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::MediaFormat * > *result = 0 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::MediaFormat * > *)std_vector_Sl_pj_MediaFormat_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  int arg2 ;
  pj::MediaFormat **arg3 = 0 ;
  pj::MediaFormat *temp3 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::MediaFormat *)jarg3;
  arg3 = (pj::MediaFormat **)&temp3; 
  try {
    std_vector_Sl_pj_MediaFormat_Sm__Sg__Insert(arg1,arg2,(pj::MediaFormat *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  int arg2 ;
  std::vector< pj::MediaFormat * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::MediaFormat * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::MediaFormat * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_MediaFormat_Sm__Sg__InsertRange(arg1,arg2,(std::vector< pj::MediaFormat * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_MediaFormat_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_MediaFormat_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::MediaFormat **arg1 = 0 ;
  int arg2 ;
  pj::MediaFormat *temp1 = 0 ;
  std::vector< pj::MediaFormat * > *result = 0 ;
  
  temp1 = (pj::MediaFormat *)jarg1;
  arg1 = (pj::MediaFormat **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::MediaFormat * > *)std_vector_Sl_pj_MediaFormat_Sm__Sg__Repeat((pj::MediaFormat *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  std_vector_Sl_pj_MediaFormat_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_MediaFormat_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  int arg2 ;
  std::vector< pj::MediaFormat * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::MediaFormat * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::MediaFormat * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_MediaFormat_Sm__Sg__SetRange(arg1,arg2,(std::vector< pj::MediaFormat * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_Contains___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  pj::MediaFormat **arg2 = 0 ;
  pj::MediaFormat *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  temp2 = (pj::MediaFormat *)jarg2;
  arg2 = (pj::MediaFormat **)&temp2; 
  result = (bool)std_vector_Sl_pj_MediaFormat_Sm__Sg__Contains(arg1,(pj::MediaFormat *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_IndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  pj::MediaFormat **arg2 = 0 ;
  pj::MediaFormat *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  temp2 = (pj::MediaFormat *)jarg2;
  arg2 = (pj::MediaFormat **)&temp2; 
  result = (int)std_vector_Sl_pj_MediaFormat_Sm__Sg__IndexOf(arg1,(pj::MediaFormat *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_LastIndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  pj::MediaFormat **arg2 = 0 ;
  pj::MediaFormat *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  temp2 = (pj::MediaFormat *)jarg2;
  arg2 = (pj::MediaFormat **)&temp2; 
  result = (int)std_vector_Sl_pj_MediaFormat_Sm__Sg__LastIndexOf(arg1,(pj::MediaFormat *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVector_Remove___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  pj::MediaFormat **arg2 = 0 ;
  pj::MediaFormat *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  temp2 = (pj::MediaFormat *)jarg2;
  arg2 = (pj::MediaFormat **)&temp2; 
  result = (bool)std_vector_Sl_pj_MediaFormat_Sm__Sg__Remove(arg1,(pj::MediaFormat *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_MediaFormatVector___(void * jarg1) {
  std::vector< pj::MediaFormat * > *arg1 = (std::vector< pj::MediaFormat * > *) 0 ;
  
  arg1 = (std::vector< pj::MediaFormat * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_Clear___(void * jarg1) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  pj::AudioDevInfo **arg2 = 0 ;
  pj::AudioDevInfo *temp2 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  temp2 = (pj::AudioDevInfo *)jarg2;
  arg2 = (pj::AudioDevInfo **)&temp2; 
  (arg1)->push_back((pj::AudioDevInfo *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  std::vector< pj::AudioDevInfo * >::size_type result;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  result = ((std::vector< pj::AudioDevInfo * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  std::vector< pj::AudioDevInfo * >::size_type result;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  result = ((std::vector< pj::AudioDevInfo * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  std::vector< pj::AudioDevInfo * >::size_type arg2 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (std::vector< pj::AudioDevInfo * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AudioDevInfoVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  result = (std::vector< pj::AudioDevInfo * > *)new std::vector< pj::AudioDevInfo * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AudioDevInfoVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = 0 ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioDevInfo * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::AudioDevInfo * > *)new std::vector< pj::AudioDevInfo * >((std::vector< pj::AudioDevInfo * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AudioDevInfoVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::AudioDevInfo * > *)new_std_vector_Sl_pj_AudioDevInfo_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  pj::AudioDevInfo *result = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::AudioDevInfo *)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  pj::AudioDevInfo **result = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::AudioDevInfo **) &std_vector_Sl_pj_AudioDevInfo_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  pj::AudioDevInfo **arg3 = 0 ;
  pj::AudioDevInfo *temp3 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::AudioDevInfo *)jarg3;
  arg3 = (pj::AudioDevInfo **)&temp3; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__setitem(arg1,arg2,(pj::AudioDevInfo *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  std::vector< pj::AudioDevInfo * > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (std::vector< pj::AudioDevInfo * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioDevInfo * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_AudioDevInfo_Sm__Sg__AddRange(arg1,(std::vector< pj::AudioDevInfo * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::AudioDevInfo * > *)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  pj::AudioDevInfo **arg3 = 0 ;
  pj::AudioDevInfo *temp3 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::AudioDevInfo *)jarg3;
  arg3 = (pj::AudioDevInfo **)&temp3; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Insert(arg1,arg2,(pj::AudioDevInfo *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioDevInfo * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AudioDevInfo * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioDevInfo * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__InsertRange(arg1,arg2,(std::vector< pj::AudioDevInfo * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::AudioDevInfo **arg1 = 0 ;
  int arg2 ;
  pj::AudioDevInfo *temp1 = 0 ;
  std::vector< pj::AudioDevInfo * > *result = 0 ;
  
  temp1 = (pj::AudioDevInfo *)jarg1;
  arg1 = (pj::AudioDevInfo **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::AudioDevInfo * > *)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Repeat((pj::AudioDevInfo *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::AudioDevInfo * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::AudioDevInfo * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::AudioDevInfo * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_AudioDevInfo_Sm__Sg__SetRange(arg1,arg2,(std::vector< pj::AudioDevInfo * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_Contains___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  pj::AudioDevInfo **arg2 = 0 ;
  pj::AudioDevInfo *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  temp2 = (pj::AudioDevInfo *)jarg2;
  arg2 = (pj::AudioDevInfo **)&temp2; 
  result = (bool)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Contains(arg1,(pj::AudioDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_IndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  pj::AudioDevInfo **arg2 = 0 ;
  pj::AudioDevInfo *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  temp2 = (pj::AudioDevInfo *)jarg2;
  arg2 = (pj::AudioDevInfo **)&temp2; 
  result = (int)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__IndexOf(arg1,(pj::AudioDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_LastIndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  pj::AudioDevInfo **arg2 = 0 ;
  pj::AudioDevInfo *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  temp2 = (pj::AudioDevInfo *)jarg2;
  arg2 = (pj::AudioDevInfo **)&temp2; 
  result = (int)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__LastIndexOf(arg1,(pj::AudioDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfoVector_Remove___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  pj::AudioDevInfo **arg2 = 0 ;
  pj::AudioDevInfo *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  temp2 = (pj::AudioDevInfo *)jarg2;
  arg2 = (pj::AudioDevInfo **)&temp2; 
  result = (bool)std_vector_Sl_pj_AudioDevInfo_Sm__Sg__Remove(arg1,(pj::AudioDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AudioDevInfoVector___(void * jarg1) {
  std::vector< pj::AudioDevInfo * > *arg1 = (std::vector< pj::AudioDevInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::AudioDevInfo * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_Clear___(void * jarg1) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  pj::CodecInfo **arg2 = 0 ;
  pj::CodecInfo *temp2 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  temp2 = (pj::CodecInfo *)jarg2;
  arg2 = (pj::CodecInfo **)&temp2; 
  (arg1)->push_back((pj::CodecInfo *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  std::vector< pj::CodecInfo * >::size_type result;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  result = ((std::vector< pj::CodecInfo * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  std::vector< pj::CodecInfo * >::size_type result;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  result = ((std::vector< pj::CodecInfo * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  std::vector< pj::CodecInfo * >::size_type arg2 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (std::vector< pj::CodecInfo * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CodecInfoVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  result = (std::vector< pj::CodecInfo * > *)new std::vector< pj::CodecInfo * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CodecInfoVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::CodecInfo * > *arg1 = 0 ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecInfo * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::CodecInfo * > *)new std::vector< pj::CodecInfo * >((std::vector< pj::CodecInfo * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CodecInfoVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::CodecInfo * > *)new_std_vector_Sl_pj_CodecInfo_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  pj::CodecInfo *result = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::CodecInfo *)std_vector_Sl_pj_CodecInfo_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  pj::CodecInfo **result = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::CodecInfo **) &std_vector_Sl_pj_CodecInfo_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  pj::CodecInfo **arg3 = 0 ;
  pj::CodecInfo *temp3 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::CodecInfo *)jarg3;
  arg3 = (pj::CodecInfo **)&temp3; 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__setitem(arg1,arg2,(pj::CodecInfo *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  std::vector< pj::CodecInfo * > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (std::vector< pj::CodecInfo * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecInfo * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_CodecInfo_Sm__Sg__AddRange(arg1,(std::vector< pj::CodecInfo * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::CodecInfo * > *)std_vector_Sl_pj_CodecInfo_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  pj::CodecInfo **arg3 = 0 ;
  pj::CodecInfo *temp3 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::CodecInfo *)jarg3;
  arg3 = (pj::CodecInfo **)&temp3; 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__Insert(arg1,arg2,(pj::CodecInfo *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::CodecInfo * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::CodecInfo * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecInfo * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__InsertRange(arg1,arg2,(std::vector< pj::CodecInfo * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::CodecInfo **arg1 = 0 ;
  int arg2 ;
  pj::CodecInfo *temp1 = 0 ;
  std::vector< pj::CodecInfo * > *result = 0 ;
  
  temp1 = (pj::CodecInfo *)jarg1;
  arg1 = (pj::CodecInfo **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::CodecInfo * > *)std_vector_Sl_pj_CodecInfo_Sm__Sg__Repeat((pj::CodecInfo *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  std_vector_Sl_pj_CodecInfo_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::CodecInfo * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::CodecInfo * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecInfo * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecInfo_Sm__Sg__SetRange(arg1,arg2,(std::vector< pj::CodecInfo * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_Contains___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  pj::CodecInfo **arg2 = 0 ;
  pj::CodecInfo *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  temp2 = (pj::CodecInfo *)jarg2;
  arg2 = (pj::CodecInfo **)&temp2; 
  result = (bool)std_vector_Sl_pj_CodecInfo_Sm__Sg__Contains(arg1,(pj::CodecInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_IndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  pj::CodecInfo **arg2 = 0 ;
  pj::CodecInfo *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  temp2 = (pj::CodecInfo *)jarg2;
  arg2 = (pj::CodecInfo **)&temp2; 
  result = (int)std_vector_Sl_pj_CodecInfo_Sm__Sg__IndexOf(arg1,(pj::CodecInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_LastIndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  pj::CodecInfo **arg2 = 0 ;
  pj::CodecInfo *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  temp2 = (pj::CodecInfo *)jarg2;
  arg2 = (pj::CodecInfo **)&temp2; 
  result = (int)std_vector_Sl_pj_CodecInfo_Sm__Sg__LastIndexOf(arg1,(pj::CodecInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfoVector_Remove___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  pj::CodecInfo **arg2 = 0 ;
  pj::CodecInfo *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  temp2 = (pj::CodecInfo *)jarg2;
  arg2 = (pj::CodecInfo **)&temp2; 
  result = (bool)std_vector_Sl_pj_CodecInfo_Sm__Sg__Remove(arg1,(pj::CodecInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CodecInfoVector___(void * jarg1) {
  std::vector< pj::CodecInfo * > *arg1 = (std::vector< pj::CodecInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::CodecInfo * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_Clear___(void * jarg1) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  pj::VideoDevInfo **arg2 = 0 ;
  pj::VideoDevInfo *temp2 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  temp2 = (pj::VideoDevInfo *)jarg2;
  arg2 = (pj::VideoDevInfo **)&temp2; 
  (arg1)->push_back((pj::VideoDevInfo *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  std::vector< pj::VideoDevInfo * >::size_type result;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  result = ((std::vector< pj::VideoDevInfo * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  std::vector< pj::VideoDevInfo * >::size_type result;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  result = ((std::vector< pj::VideoDevInfo * > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  std::vector< pj::VideoDevInfo * >::size_type arg2 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (std::vector< pj::VideoDevInfo * >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_VideoDevInfoVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::VideoDevInfo * > *result = 0 ;
  
  result = (std::vector< pj::VideoDevInfo * > *)new std::vector< pj::VideoDevInfo * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_VideoDevInfoVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = 0 ;
  std::vector< pj::VideoDevInfo * > *result = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoDevInfo * > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::VideoDevInfo * > *)new std::vector< pj::VideoDevInfo * >((std::vector< pj::VideoDevInfo * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_VideoDevInfoVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::VideoDevInfo * > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::VideoDevInfo * > *)new_std_vector_Sl_pj_VideoDevInfo_Sm__Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  pj::VideoDevInfo *result = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::VideoDevInfo *)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  pj::VideoDevInfo **result = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::VideoDevInfo **) &std_vector_Sl_pj_VideoDevInfo_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  pj::VideoDevInfo **arg3 = 0 ;
  pj::VideoDevInfo *temp3 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::VideoDevInfo *)jarg3;
  arg3 = (pj::VideoDevInfo **)&temp3; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__setitem(arg1,arg2,(pj::VideoDevInfo *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  std::vector< pj::VideoDevInfo * > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (std::vector< pj::VideoDevInfo * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoDevInfo * > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_VideoDevInfo_Sm__Sg__AddRange(arg1,(std::vector< pj::VideoDevInfo * > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::VideoDevInfo * > *result = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::VideoDevInfo * > *)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  pj::VideoDevInfo **arg3 = 0 ;
  pj::VideoDevInfo *temp3 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (pj::VideoDevInfo *)jarg3;
  arg3 = (pj::VideoDevInfo **)&temp3; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Insert(arg1,arg2,(pj::VideoDevInfo *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::VideoDevInfo * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::VideoDevInfo * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoDevInfo * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__InsertRange(arg1,arg2,(std::vector< pj::VideoDevInfo * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::VideoDevInfo **arg1 = 0 ;
  int arg2 ;
  pj::VideoDevInfo *temp1 = 0 ;
  std::vector< pj::VideoDevInfo * > *result = 0 ;
  
  temp1 = (pj::VideoDevInfo *)jarg1;
  arg1 = (pj::VideoDevInfo **)&temp1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::VideoDevInfo * > *)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Repeat((pj::VideoDevInfo *const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  int arg2 ;
  std::vector< pj::VideoDevInfo * > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::VideoDevInfo * > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::VideoDevInfo * > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_VideoDevInfo_Sm__Sg__SetRange(arg1,arg2,(std::vector< pj::VideoDevInfo * > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_Contains___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  pj::VideoDevInfo **arg2 = 0 ;
  pj::VideoDevInfo *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  temp2 = (pj::VideoDevInfo *)jarg2;
  arg2 = (pj::VideoDevInfo **)&temp2; 
  result = (bool)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Contains(arg1,(pj::VideoDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_IndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  pj::VideoDevInfo **arg2 = 0 ;
  pj::VideoDevInfo *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  temp2 = (pj::VideoDevInfo *)jarg2;
  arg2 = (pj::VideoDevInfo **)&temp2; 
  result = (int)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__IndexOf(arg1,(pj::VideoDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_LastIndexOf___(void * jarg1, void * jarg2) {
  int jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  pj::VideoDevInfo **arg2 = 0 ;
  pj::VideoDevInfo *temp2 = 0 ;
  int result;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  temp2 = (pj::VideoDevInfo *)jarg2;
  arg2 = (pj::VideoDevInfo **)&temp2; 
  result = (int)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__LastIndexOf(arg1,(pj::VideoDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfoVector_Remove___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  pj::VideoDevInfo **arg2 = 0 ;
  pj::VideoDevInfo *temp2 = 0 ;
  bool result;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  temp2 = (pj::VideoDevInfo *)jarg2;
  arg2 = (pj::VideoDevInfo **)&temp2; 
  result = (bool)std_vector_Sl_pj_VideoDevInfo_Sm__Sg__Remove(arg1,(pj::VideoDevInfo *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_VideoDevInfoVector___(void * jarg1) {
  std::vector< pj::VideoDevInfo * > *arg1 = (std::vector< pj::VideoDevInfo * > *) 0 ;
  
  arg1 = (std::vector< pj::VideoDevInfo * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_Clear___(void * jarg1) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  pj::CodecFmtp *arg2 = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (pj::CodecFmtp *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecFmtp const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::CodecFmtp const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  std::vector< pj::CodecFmtp >::size_type result;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  result = ((std::vector< pj::CodecFmtp > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  std::vector< pj::CodecFmtp >::size_type result;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  result = ((std::vector< pj::CodecFmtp > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  std::vector< pj::CodecFmtp >::size_type arg2 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (std::vector< pj::CodecFmtp >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CodecFmtpVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::CodecFmtp > *result = 0 ;
  
  result = (std::vector< pj::CodecFmtp > *)new std::vector< pj::CodecFmtp >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CodecFmtpVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::CodecFmtp > *arg1 = 0 ;
  std::vector< pj::CodecFmtp > *result = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecFmtp > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::CodecFmtp > *)new std::vector< pj::CodecFmtp >((std::vector< pj::CodecFmtp > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CodecFmtpVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::CodecFmtp > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::CodecFmtp > *)new_std_vector_Sl_pj_CodecFmtp_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  pj::CodecFmtp result;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_CodecFmtp_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new pj::CodecFmtp((const pj::CodecFmtp &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  pj::CodecFmtp *result = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::CodecFmtp *) &std_vector_Sl_pj_CodecFmtp_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  pj::CodecFmtp *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::CodecFmtp *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecFmtp const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__setitem(arg1,arg2,(pj::CodecFmtp const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  std::vector< pj::CodecFmtp > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (std::vector< pj::CodecFmtp > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecFmtp > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_CodecFmtp_Sg__AddRange(arg1,(std::vector< pj::CodecFmtp > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::CodecFmtp > *result = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::CodecFmtp > *)std_vector_Sl_pj_CodecFmtp_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  pj::CodecFmtp *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::CodecFmtp *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecFmtp const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__Insert(arg1,arg2,(pj::CodecFmtp const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  std::vector< pj::CodecFmtp > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::CodecFmtp > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecFmtp > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__InsertRange(arg1,arg2,(std::vector< pj::CodecFmtp > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::CodecFmtp *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::CodecFmtp > *result = 0 ;
  
  arg1 = (pj::CodecFmtp *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CodecFmtp const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::CodecFmtp > *)std_vector_Sl_pj_CodecFmtp_Sg__Repeat((pj::CodecFmtp const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  std_vector_Sl_pj_CodecFmtp_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtpVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  int arg2 ;
  std::vector< pj::CodecFmtp > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::CodecFmtp > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CodecFmtp > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CodecFmtp_Sg__SetRange(arg1,arg2,(std::vector< pj::CodecFmtp > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CodecFmtpVector___(void * jarg1) {
  std::vector< pj::CodecFmtp > *arg1 = (std::vector< pj::CodecFmtp > *) 0 ;
  
  arg1 = (std::vector< pj::CodecFmtp > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormat_id_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::MediaFormat *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormat_id_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::MediaFormat *)jarg1; 
  result = (pj_uint32_t) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormat_type_set___(void * jarg1, int jarg2) {
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pjmedia_type arg2 ;
  
  arg1 = (pj::MediaFormat *)jarg1; 
  arg2 = (pjmedia_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormat_type_get___(void * jarg1) {
  int jresult ;
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  pjmedia_type result;
  
  arg1 = (pj::MediaFormat *)jarg1; 
  result = (pjmedia_type) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_MediaFormat___() {
  void * jresult ;
  pj::MediaFormat *result = 0 ;
  
  result = (pj::MediaFormat *)new pj::MediaFormat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_MediaFormat___(void * jarg1) {
  pj::MediaFormat *arg1 = (pj::MediaFormat *) 0 ;
  
  arg1 = (pj::MediaFormat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatAudio_clockRate_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->clockRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatAudio_clockRate_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  result = (unsigned int) ((arg1)->clockRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatAudio_channelCount_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->channelCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatAudio_channelCount_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  result = (unsigned int) ((arg1)->channelCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatAudio_frameTimeUsec_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frameTimeUsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatAudio_frameTimeUsec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  result = (unsigned int) ((arg1)->frameTimeUsec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatAudio_bitsPerSample_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->bitsPerSample = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatAudio_bitsPerSample_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  result = (unsigned int) ((arg1)->bitsPerSample);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatAudio_avgBps_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->avgBps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatAudio_avgBps_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  result = (pj_uint32_t) ((arg1)->avgBps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatAudio_maxBps_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->maxBps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatAudio_maxBps_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  result = (pj_uint32_t) ((arg1)->maxBps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_MediaFormatAudio___() {
  void * jresult ;
  pj::MediaFormatAudio *result = 0 ;
  
  result = (pj::MediaFormatAudio *)new pj::MediaFormatAudio();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_MediaFormatAudio___(void * jarg1) {
  pj::MediaFormatAudio *arg1 = (pj::MediaFormatAudio *) 0 ;
  
  arg1 = (pj::MediaFormatAudio *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVideo_width_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->width = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVideo_width_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  result = (unsigned int) ((arg1)->width);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVideo_height_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->height = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVideo_height_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  result = (unsigned int) ((arg1)->height);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVideo_fpsNum_set___(void * jarg1, int jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fpsNum = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVideo_fpsNum_get___(void * jarg1) {
  int jresult ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int result;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  result = (int) ((arg1)->fpsNum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVideo_fpsDenum_set___(void * jarg1, int jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->fpsDenum = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVideo_fpsDenum_get___(void * jarg1) {
  int jresult ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  int result;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  result = (int) ((arg1)->fpsDenum);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVideo_avgBps_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->avgBps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVideo_avgBps_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  result = (pj_uint32_t) ((arg1)->avgBps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVideo_maxBps_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->maxBps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVideo_maxBps_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  result = (pj_uint32_t) ((arg1)->maxBps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_MediaFormatVideo___() {
  void * jresult ;
  pj::MediaFormatVideo *result = 0 ;
  
  result = (pj::MediaFormatVideo *)new pj::MediaFormatVideo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_MediaFormatVideo___(void * jarg1) {
  pj::MediaFormatVideo *arg1 = (pj::MediaFormatVideo *) 0 ;
  
  arg1 = (pj::MediaFormatVideo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ConfPortInfo_portId_set___(void * jarg1, int jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->portId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ConfPortInfo_portId_get___(void * jarg1) {
  int jresult ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  int result;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  result = (int) ((arg1)->portId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ConfPortInfo_name_set___(void * jarg1, char * jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ConfPortInfo_name_get___(void * jarg1) {
  char * jresult ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ConfPortInfo_format_set___(void * jarg1, void * jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::MediaFormatAudio *arg2 = (pj::MediaFormatAudio *) 0 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  arg2 = (pj::MediaFormatAudio *)jarg2; 
  if (arg1) (arg1)->format = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ConfPortInfo_format_get___(void * jarg1) {
  void * jresult ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::MediaFormatAudio *result = 0 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  result = (pj::MediaFormatAudio *)& ((arg1)->format);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ConfPortInfo_txLevelAdj_set___(void * jarg1, float jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float arg2 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->txLevelAdj = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ConfPortInfo_txLevelAdj_get___(void * jarg1) {
  float jresult ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float result;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  result = (float) ((arg1)->txLevelAdj);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ConfPortInfo_rxLevelAdj_set___(void * jarg1, float jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float arg2 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->rxLevelAdj = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ConfPortInfo_rxLevelAdj_get___(void * jarg1) {
  float jresult ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  float result;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  result = (float) ((arg1)->rxLevelAdj);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ConfPortInfo_listeners_set___(void * jarg1, void * jarg2) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  arg2 = (pj::IntVector *)jarg2; 
  if (arg1) (arg1)->listeners = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ConfPortInfo_listeners_get___(void * jarg1) {
  void * jresult ;
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  pj::IntVector *result = 0 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  result = (pj::IntVector *)& ((arg1)->listeners);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ConfPortInfo___() {
  void * jresult ;
  pj::ConfPortInfo *result = 0 ;
  
  result = (pj::ConfPortInfo *)new pj::ConfPortInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_ConfPortInfo___(void * jarg1) {
  pj::ConfPortInfo *arg1 = (pj::ConfPortInfo *) 0 ;
  
  arg1 = (pj::ConfPortInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_Media___(void * jarg1) {
  pj::Media *arg1 = (pj::Media *) 0 ;
  
  arg1 = (pj::Media *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Media_getType___(void * jarg1) {
  int jresult ;
  pj::Media *arg1 = (pj::Media *) 0 ;
  pjmedia_type result;
  
  arg1 = (pj::Media *)jarg1; 
  result = (pjmedia_type)((pj::Media const *)arg1)->getType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaTransmitParam_level_set___(void * jarg1, float jarg2) {
  pj::AudioMediaTransmitParam *arg1 = (pj::AudioMediaTransmitParam *) 0 ;
  float arg2 ;
  
  arg1 = (pj::AudioMediaTransmitParam *)jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT float SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaTransmitParam_level_get___(void * jarg1) {
  float jresult ;
  pj::AudioMediaTransmitParam *arg1 = (pj::AudioMediaTransmitParam *) 0 ;
  float result;
  
  arg1 = (pj::AudioMediaTransmitParam *)jarg1; 
  result = (float) ((arg1)->level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AudioMediaTransmitParam___() {
  void * jresult ;
  pj::AudioMediaTransmitParam *result = 0 ;
  
  result = (pj::AudioMediaTransmitParam *)new pj::AudioMediaTransmitParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AudioMediaTransmitParam___(void * jarg1) {
  pj::AudioMediaTransmitParam *arg1 = (pj::AudioMediaTransmitParam *) 0 ;
  
  arg1 = (pj::AudioMediaTransmitParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMedia_getPortInfo___(void * jarg1) {
  void * jresult ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::ConfPortInfo result;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  try {
    result = ((pj::AudioMedia const *)arg1)->getPortInfo();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ConfPortInfo((const pj::ConfPortInfo &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMedia_getPortId___(void * jarg1) {
  int jresult ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  int result;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  result = (int)((pj::AudioMedia const *)arg1)->getPortId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMedia_getPortInfoFromId___(int jarg1) {
  void * jresult ;
  int arg1 ;
  pj::ConfPortInfo result;
  
  arg1 = (int)jarg1; 
  try {
    result = pj::AudioMedia::getPortInfoFromId(arg1);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ConfPortInfo((const pj::ConfPortInfo &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMedia_startTransmit___(void * jarg1, void * jarg2) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  arg2 = (pj::AudioMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia const & type is null", 0);
    return ;
  } 
  try {
    ((pj::AudioMedia const *)arg1)->startTransmit((pj::AudioMedia const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMedia_startTransmit2___(void * jarg1, void * jarg2, void * jarg3) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  pj::AudioMediaTransmitParam *arg3 = 0 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  arg2 = (pj::AudioMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia const & type is null", 0);
    return ;
  } 
  arg3 = (pj::AudioMediaTransmitParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMediaTransmitParam const & type is null", 0);
    return ;
  } 
  try {
    ((pj::AudioMedia const *)arg1)->startTransmit2((pj::AudioMedia const &)*arg2,(pj::AudioMediaTransmitParam const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMedia_stopTransmit___(void * jarg1, void * jarg2) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  arg2 = (pj::AudioMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia const & type is null", 0);
    return ;
  } 
  try {
    ((pj::AudioMedia const *)arg1)->stopTransmit((pj::AudioMedia const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMedia_adjustRxLevel___(void * jarg1, float jarg2) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  float arg2 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  arg2 = (float)jarg2; 
  try {
    (arg1)->adjustRxLevel(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMedia_adjustTxLevel___(void * jarg1, float jarg2) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  float arg2 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  arg2 = (float)jarg2; 
  try {
    (arg1)->adjustTxLevel(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMedia_getRxLevel___(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  try {
    result = (unsigned int)((pj::AudioMedia const *)arg1)->getRxLevel();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMedia_getTxLevel___(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  try {
    result = (unsigned int)((pj::AudioMedia const *)arg1)->getTxLevel();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMedia_typecastFromMedia___(void * jarg1) {
  void * jresult ;
  pj::Media *arg1 = (pj::Media *) 0 ;
  pj::AudioMedia *result = 0 ;
  
  arg1 = (pj::Media *)jarg1; 
  result = (pj::AudioMedia *)pj::AudioMedia::typecastFromMedia(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AudioMedia___(void * jarg1) {
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayerInfo_formatId_set___(void * jarg1, int jarg2) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pjmedia_format_id arg2 ;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  arg2 = (pjmedia_format_id)jarg2; 
  if (arg1) (arg1)->formatId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayerInfo_formatId_get___(void * jarg1) {
  int jresult ;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pjmedia_format_id result;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  result = (pjmedia_format_id) ((arg1)->formatId);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayerInfo_payloadBitsPerSample_set___(void * jarg1, unsigned int jarg2) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->payloadBitsPerSample = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayerInfo_payloadBitsPerSample_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  result = (unsigned int) ((arg1)->payloadBitsPerSample);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayerInfo_sizeBytes_set___(void * jarg1, unsigned int jarg2) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->sizeBytes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayerInfo_sizeBytes_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  result = (pj_uint32_t) ((arg1)->sizeBytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayerInfo_sizeSamples_set___(void * jarg1, unsigned int jarg2) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->sizeSamples = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayerInfo_sizeSamples_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  result = (pj_uint32_t) ((arg1)->sizeSamples);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AudioMediaPlayerInfo___() {
  void * jresult ;
  pj::AudioMediaPlayerInfo *result = 0 ;
  
  result = (pj::AudioMediaPlayerInfo *)new pj::AudioMediaPlayerInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AudioMediaPlayerInfo___(void * jarg1) {
  pj::AudioMediaPlayerInfo *arg1 = (pj::AudioMediaPlayerInfo *) 0 ;
  
  arg1 = (pj::AudioMediaPlayerInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AudioMediaPlayer___() {
  void * jresult ;
  pj::AudioMediaPlayer *result = 0 ;
  
  result = (pj::AudioMediaPlayer *)new SwigDirector_AudioMediaPlayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayer_createPlayer__SWIG_0___(void * jarg1, char * jarg2, unsigned int jarg3) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (unsigned int)jarg3; 
  try {
    (arg1)->createPlayer((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayer_createPlayer__SWIG_1___(void * jarg1, char * jarg2) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->createPlayer((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayer_createPlaylist__SWIG_0___(void * jarg1, void * jarg2, char * jarg3, unsigned int jarg4) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::StringVector *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  unsigned int arg4 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  arg2 = (pj::StringVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::StringVector const & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (unsigned int)jarg4; 
  try {
    (arg1)->createPlaylist((pj::StringVector const &)*arg2,(pj::string const &)*arg3,arg4);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayer_createPlaylist__SWIG_1___(void * jarg1, void * jarg2, char * jarg3) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::StringVector *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  arg2 = (pj::StringVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::StringVector const & type is null", 0);
    return ;
  } 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    (arg1)->createPlaylist((pj::StringVector const &)*arg2,(pj::string const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayer_createPlaylist__SWIG_2___(void * jarg1, void * jarg2) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::StringVector *arg2 = 0 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  arg2 = (pj::StringVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::StringVector const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->createPlaylist((pj::StringVector const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayer_getInfo___(void * jarg1) {
  void * jresult ;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj::AudioMediaPlayerInfo result;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  try {
    result = ((pj::AudioMediaPlayer const *)arg1)->getInfo();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::AudioMediaPlayerInfo((const pj::AudioMediaPlayerInfo &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayer_getPos___(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  try {
    result = (pj_uint32_t)((pj::AudioMediaPlayer const *)arg1)->getPos();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayer_setPos___(void * jarg1, unsigned int jarg2) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  try {
    (arg1)->setPos(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayer_typecastFromAudioMedia___(void * jarg1) {
  void * jresult ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMediaPlayer *result = 0 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  result = (pj::AudioMediaPlayer *)pj::AudioMediaPlayer::typecastFromAudioMedia(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AudioMediaPlayer___(void * jarg1) {
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayer_onEof___(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  bool result;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  result = (bool)(arg1)->onEof();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayer_onEofSwigExplicitAudioMediaPlayer___(void * jarg1) {
  unsigned int jresult ;
  pj::AudioMediaPlayer *arg1 = (pj::AudioMediaPlayer *) 0 ;
  bool result;
  
  arg1 = (pj::AudioMediaPlayer *)jarg1; 
  result = (bool)(arg1)->pj::AudioMediaPlayer::onEof();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayer_director_connect___(void *objarg, SwigDirector_AudioMediaPlayer::SWIG_Callback0_t callback0) {
  pj::AudioMediaPlayer *obj = (pj::AudioMediaPlayer *)objarg;
  SwigDirector_AudioMediaPlayer *director = dynamic_cast<SwigDirector_AudioMediaPlayer *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AudioMediaRecorder___() {
  void * jresult ;
  pj::AudioMediaRecorder *result = 0 ;
  
  result = (pj::AudioMediaRecorder *)new pj::AudioMediaRecorder();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaRecorder_createRecorder__SWIG_0___(void * jarg1, char * jarg2, unsigned int jarg3, void * jarg4, unsigned int jarg5) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  pj_ssize_t arg4 ;
  unsigned int arg5 ;
  pj_ssize_t *argp4 ;
  
  arg1 = (pj::AudioMediaRecorder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (unsigned int)jarg3; 
  argp4 = (pj_ssize_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pj_ssize_t", 0);
    return ;
  }
  arg4 = *argp4; 
  arg5 = (unsigned int)jarg5; 
  try {
    (arg1)->createRecorder((pj::string const &)*arg2,arg3,arg4,arg5);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaRecorder_createRecorder__SWIG_1___(void * jarg1, char * jarg2, unsigned int jarg3, void * jarg4) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  pj_ssize_t arg4 ;
  pj_ssize_t *argp4 ;
  
  arg1 = (pj::AudioMediaRecorder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (unsigned int)jarg3; 
  argp4 = (pj_ssize_t *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pj_ssize_t", 0);
    return ;
  }
  arg4 = *argp4; 
  try {
    (arg1)->createRecorder((pj::string const &)*arg2,arg3,arg4);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaRecorder_createRecorder__SWIG_2___(void * jarg1, char * jarg2, unsigned int jarg3) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  unsigned int arg3 ;
  
  arg1 = (pj::AudioMediaRecorder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (unsigned int)jarg3; 
  try {
    (arg1)->createRecorder((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaRecorder_createRecorder__SWIG_3___(void * jarg1, char * jarg2) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AudioMediaRecorder *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->createRecorder((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaRecorder_typecastFromAudioMedia___(void * jarg1) {
  void * jresult ;
  pj::AudioMedia *arg1 = (pj::AudioMedia *) 0 ;
  pj::AudioMediaRecorder *result = 0 ;
  
  arg1 = (pj::AudioMedia *)jarg1; 
  result = (pj::AudioMediaRecorder *)pj::AudioMediaRecorder::typecastFromAudioMedia(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AudioMediaRecorder___(void * jarg1) {
  pj::AudioMediaRecorder *arg1 = (pj::AudioMediaRecorder *) 0 ;
  
  arg1 = (pj::AudioMediaRecorder *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ToneDesc___() {
  void * jresult ;
  pj::ToneDesc *result = 0 ;
  
  result = (pj::ToneDesc *)new pj::ToneDesc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_ToneDesc___(void * jarg1) {
  pj::ToneDesc *arg1 = (pj::ToneDesc *) 0 ;
  
  arg1 = (pj::ToneDesc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ToneDigit___() {
  void * jresult ;
  pj::ToneDigit *result = 0 ;
  
  result = (pj::ToneDigit *)new pj::ToneDigit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_ToneDigit___(void * jarg1) {
  pj::ToneDigit *arg1 = (pj::ToneDigit *) 0 ;
  
  arg1 = (pj::ToneDigit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapDigit_digit_set___(void * jarg1, char * jarg2) {
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->digit = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapDigit_digit_get___(void * jarg1) {
  char * jresult ;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1; 
  result = (pj::string *) & ((arg1)->digit);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapDigit_freq1_set___(void * jarg1, int jarg2) {
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int arg2 ;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->freq1 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapDigit_freq1_get___(void * jarg1) {
  int jresult ;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int result;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1; 
  result = (int) ((arg1)->freq1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapDigit_freq2_set___(void * jarg1, int jarg2) {
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int arg2 ;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->freq2 = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigitMapDigit_freq2_get___(void * jarg1) {
  int jresult ;
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  int result;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1; 
  result = (int) ((arg1)->freq2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ToneDigitMapDigit___() {
  void * jresult ;
  pj::ToneDigitMapDigit *result = 0 ;
  
  result = (pj::ToneDigitMapDigit *)new pj::ToneDigitMapDigit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_ToneDigitMapDigit___(void * jarg1) {
  pj::ToneDigitMapDigit *arg1 = (pj::ToneDigitMapDigit *) 0 ;
  
  arg1 = (pj::ToneDigitMapDigit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ToneGenerator___() {
  void * jresult ;
  pj::ToneGenerator *result = 0 ;
  
  result = (pj::ToneGenerator *)new pj::ToneGenerator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_ToneGenerator___(void * jarg1) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneGenerator_createToneGenerator__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  try {
    (arg1)->createToneGenerator(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneGenerator_createToneGenerator__SWIG_1___(void * jarg1, unsigned int jarg2) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->createToneGenerator(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneGenerator_createToneGenerator__SWIG_2___(void * jarg1) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  try {
    (arg1)->createToneGenerator();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneGenerator_isBusy___(void * jarg1) {
  unsigned int jresult ;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  bool result;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  result = (bool)((pj::ToneGenerator const *)arg1)->isBusy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneGenerator_stop___(void * jarg1) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  try {
    (arg1)->stop();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneGenerator_rewind___(void * jarg1) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  try {
    (arg1)->rewind();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneGenerator_play__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDescVector *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  arg2 = (pj::ToneDescVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDescVector const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->play((pj::ToneDescVector const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneGenerator_play__SWIG_1___(void * jarg1, void * jarg2) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDescVector *arg2 = 0 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  arg2 = (pj::ToneDescVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDescVector const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->play((pj::ToneDescVector const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneGenerator_playDigits__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitVector *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  arg2 = (pj::ToneDigitVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigitVector const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->playDigits((pj::ToneDigitVector const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneGenerator_playDigits__SWIG_1___(void * jarg1, void * jarg2) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitVector *arg2 = 0 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  arg2 = (pj::ToneDigitVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigitVector const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->playDigits((pj::ToneDigitVector const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneGenerator_getDigitMap___(void * jarg1) {
  void * jresult ;
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitMapVector result;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  try {
    result = ((pj::ToneGenerator const *)arg1)->getDigitMap();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::ToneDigitMapVector((const pj::ToneDigitMapVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneGenerator_setDigitMap___(void * jarg1, void * jarg2) {
  pj::ToneGenerator *arg1 = (pj::ToneGenerator *) 0 ;
  pj::ToneDigitMapVector *arg2 = 0 ;
  
  arg1 = (pj::ToneGenerator *)jarg1; 
  arg2 = (pj::ToneDigitMapVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ToneDigitMapVector const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->setDigitMap((pj::ToneDigitMapVector const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_name_set___(void * jarg1, char * jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_name_get___(void * jarg1) {
  char * jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_inputCount_set___(void * jarg1, unsigned int jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->inputCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_inputCount_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (unsigned int) ((arg1)->inputCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_outputCount_set___(void * jarg1, unsigned int jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->outputCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_outputCount_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (unsigned int) ((arg1)->outputCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_defaultSamplesPerSec_set___(void * jarg1, unsigned int jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->defaultSamplesPerSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_defaultSamplesPerSec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (unsigned int) ((arg1)->defaultSamplesPerSec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_driver_set___(void * jarg1, char * jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->driver = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_driver_get___(void * jarg1) {
  char * jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->driver);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_caps_set___(void * jarg1, unsigned int jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->caps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_caps_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (unsigned int) ((arg1)->caps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_routes_set___(void * jarg1, unsigned int jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->routes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_routes_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (unsigned int) ((arg1)->routes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_extFmt_set___(void * jarg1, void * jarg2) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::MediaFormatVector *arg2 = (pj::MediaFormatVector *) 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  arg2 = (pj::MediaFormatVector *)jarg2; 
  if (arg1) (arg1)->extFmt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioDevInfo_extFmt_get___(void * jarg1) {
  void * jresult ;
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  pj::MediaFormatVector *result = 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  result = (pj::MediaFormatVector *)& ((arg1)->extFmt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AudioDevInfo___(void * jarg1) {
  pj::AudioDevInfo *arg1 = (pj::AudioDevInfo *) 0 ;
  
  arg1 = (pj::AudioDevInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AudioDevInfo___() {
  void * jresult ;
  pj::AudioDevInfo *result = 0 ;
  
  result = (pj::AudioDevInfo *)new pj::AudioDevInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getCaptureDev___(void * jarg1) {
  int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (int)((pj::AudDevManager const *)arg1)->getCaptureDev();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getCaptureDevMedia___(void * jarg1) {
  void * jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::AudioMedia *result = 0 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (pj::AudioMedia *) &(arg1)->getCaptureDevMedia();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getPlaybackDev___(void * jarg1) {
  int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (int)((pj::AudDevManager const *)arg1)->getPlaybackDev();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getPlaybackDevMedia___(void * jarg1) {
  void * jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::AudioMedia *result = 0 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (pj::AudioMedia *) &(arg1)->getPlaybackDevMedia();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setCaptureDev___(void * jarg1, int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    ((pj::AudDevManager const *)arg1)->setCaptureDev(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setPlaybackDev___(void * jarg1, int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    ((pj::AudDevManager const *)arg1)->setPlaybackDev(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_enumDev___(void * jarg1) {
  void * jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::AudioDevInfoVector *result = 0 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (pj::AudioDevInfoVector *) &(arg1)->enumDev();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setNullDev___(void * jarg1) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    (arg1)->setNullDev();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setNoDev___(void * jarg1) {
  void * jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaPort *result = 0 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  result = (pj::MediaPort *)(arg1)->setNoDev();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setSndDevMode___(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    ((pj::AudDevManager const *)arg1)->setSndDevMode(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setEcOptions___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  try {
    (arg1)->setEcOptions(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getEcTail___(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getEcTail();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_sndIsActive___(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  result = (bool)((pj::AudDevManager const *)arg1)->sndIsActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_refreshDevs___(void * jarg1) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    (arg1)->refreshDevs();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getDevCount___(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  result = (unsigned int)((pj::AudDevManager const *)arg1)->getDevCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getDevInfo___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  int arg2 ;
  pj::AudioDevInfo result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::AudDevManager const *)arg1)->getDevInfo(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::AudioDevInfo((const pj::AudioDevInfo &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_lookupDev___(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    result = (int)((pj::AudDevManager const *)arg1)->lookupDev((pj::string const &)*arg2,(pj::string const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_capName___(void * jarg1, int jarg2) {
  char * jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_cap arg2 ;
  pj::string result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (pjmedia_aud_dev_cap)jarg2; 
  result = ((pj::AudDevManager const *)arg1)->capName(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setExtFormat__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaFormatAudio *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (pj::MediaFormatAudio *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatAudio const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setExtFormat((pj::MediaFormatAudio const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setExtFormat__SWIG_1___(void * jarg1, void * jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaFormatAudio *arg2 = 0 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (pj::MediaFormatAudio *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatAudio const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->setExtFormat((pj::MediaFormatAudio const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getExtFormat___(void * jarg1) {
  void * jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pj::MediaFormatAudio result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = ((pj::AudDevManager const *)arg1)->getExtFormat();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::MediaFormatAudio((const pj::MediaFormatAudio &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setInputLatency__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setInputLatency(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setInputLatency__SWIG_1___(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->setInputLatency(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getInputLatency___(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getInputLatency();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setOutputLatency__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setOutputLatency(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setOutputLatency__SWIG_1___(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->setOutputLatency(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getOutputLatency___(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getOutputLatency();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setInputVolume__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setInputVolume(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setInputVolume__SWIG_1___(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->setInputVolume(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getInputVolume___(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getInputVolume();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setOutputVolume__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setOutputVolume(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setOutputVolume__SWIG_1___(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->setOutputVolume(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getOutputVolume___(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getOutputVolume();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getInputSignal___(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getInputSignal();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getOutputSignal___(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (unsigned int)((pj::AudDevManager const *)arg1)->getOutputSignal();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setInputRoute__SWIG_0___(void * jarg1, int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (pjmedia_aud_dev_route)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setInputRoute(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setInputRoute__SWIG_1___(void * jarg1, int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (pjmedia_aud_dev_route)jarg2; 
  try {
    (arg1)->setInputRoute(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getInputRoute___(void * jarg1) {
  int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (pjmedia_aud_dev_route)((pj::AudDevManager const *)arg1)->getInputRoute();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setOutputRoute__SWIG_0___(void * jarg1, int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (pjmedia_aud_dev_route)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setOutputRoute(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setOutputRoute__SWIG_1___(void * jarg1, int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = (pjmedia_aud_dev_route)jarg2; 
  try {
    (arg1)->setOutputRoute(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getOutputRoute___(void * jarg1) {
  int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  pjmedia_aud_dev_route result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (pjmedia_aud_dev_route)((pj::AudDevManager const *)arg1)->getOutputRoute();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setVad__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setVad(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setVad__SWIG_1___(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setVad(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getVad___(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (bool)((pj::AudDevManager const *)arg1)->getVad();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setCng__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setCng(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setCng__SWIG_1___(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setCng(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getCng___(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (bool)((pj::AudDevManager const *)arg1)->getCng();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setPlc__SWIG_0___(void * jarg1, unsigned int jarg2, unsigned int jarg3) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  bool arg3 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->setPlc(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_setPlc__SWIG_1___(void * jarg1, unsigned int jarg2) {
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setPlc(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudDevManager_getPlc___(void * jarg1) {
  unsigned int jresult ;
  pj::AudDevManager *arg1 = (pj::AudDevManager *) 0 ;
  bool result;
  
  arg1 = (pj::AudDevManager *)jarg1; 
  try {
    result = (bool)((pj::AudDevManager const *)arg1)->getPlc();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_ExtraAudioDevice___(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  pj::ExtraAudioDevice *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (pj::ExtraAudioDevice *)new pj::ExtraAudioDevice(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_ExtraAudioDevice___(void * jarg1) {
  pj::ExtraAudioDevice *arg1 = (pj::ExtraAudioDevice *) 0 ;
  
  arg1 = (pj::ExtraAudioDevice *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ExtraAudioDevice_open___(void * jarg1) {
  pj::ExtraAudioDevice *arg1 = (pj::ExtraAudioDevice *) 0 ;
  
  arg1 = (pj::ExtraAudioDevice *)jarg1; 
  (arg1)->open();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ExtraAudioDevice_close___(void * jarg1) {
  pj::ExtraAudioDevice *arg1 = (pj::ExtraAudioDevice *) 0 ;
  
  arg1 = (pj::ExtraAudioDevice *)jarg1; 
  (arg1)->close();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ExtraAudioDevice_isOpened___(void * jarg1) {
  unsigned int jresult ;
  pj::ExtraAudioDevice *arg1 = (pj::ExtraAudioDevice *) 0 ;
  bool result;
  
  arg1 = (pj::ExtraAudioDevice *)jarg1; 
  result = (bool)(arg1)->isOpened();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaCoordinate_x_set___(void * jarg1, int jarg2) {
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaCoordinate *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaCoordinate_x_get___(void * jarg1) {
  int jresult ;
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  int result;
  
  arg1 = (pj::MediaCoordinate *)jarg1; 
  result = (int) ((arg1)->x);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaCoordinate_y_set___(void * jarg1, int jarg2) {
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaCoordinate *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaCoordinate_y_get___(void * jarg1) {
  int jresult ;
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  int result;
  
  arg1 = (pj::MediaCoordinate *)jarg1; 
  result = (int) ((arg1)->y);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_MediaCoordinate___() {
  void * jresult ;
  pj::MediaCoordinate *result = 0 ;
  
  result = (pj::MediaCoordinate *)new pj::MediaCoordinate();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_MediaCoordinate___(void * jarg1) {
  pj::MediaCoordinate *arg1 = (pj::MediaCoordinate *) 0 ;
  
  arg1 = (pj::MediaCoordinate *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaSize_w_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaSize *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->w = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaSize_w_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaSize *)jarg1; 
  result = (unsigned int) ((arg1)->w);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaSize_h_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaSize *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->h = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaSize_h_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaSize *)jarg1; 
  result = (unsigned int) ((arg1)->h);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_MediaSize___() {
  void * jresult ;
  pj::MediaSize *result = 0 ;
  
  result = (pj::MediaSize *)new pj::MediaSize();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_MediaSize___(void * jarg1) {
  pj::MediaSize *arg1 = (pj::MediaSize *) 0 ;
  
  arg1 = (pj::MediaSize *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_WindowHandle_setWindow___(void * jarg1, long long jarg2) {
  pj::WindowHandle *arg1 = (pj::WindowHandle *) 0 ;
  long long arg2 ;
  
  arg1 = (pj::WindowHandle *)jarg1; 
  arg2 = (long long)jarg2; 
  pj_WindowHandle_setWindow(arg1,arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_WindowHandle___() {
  void * jresult ;
  pj::WindowHandle *result = 0 ;
  
  result = (pj::WindowHandle *)new pj::WindowHandle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_WindowHandle___(void * jarg1) {
  pj::WindowHandle *arg1 = (pj::WindowHandle *) 0 ;
  
  arg1 = (pj::WindowHandle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowHandle_type_set___(void * jarg1, void * jarg2) {
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  pjmedia_vid_dev_hwnd_type arg2 ;
  pjmedia_vid_dev_hwnd_type *argp2 ;
  
  arg1 = (pj::VideoWindowHandle *)jarg1; 
  argp2 = (pjmedia_vid_dev_hwnd_type *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pjmedia_vid_dev_hwnd_type", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowHandle_type_get___(void * jarg1) {
  void * jresult ;
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  pjmedia_vid_dev_hwnd_type result;
  
  arg1 = (pj::VideoWindowHandle *)jarg1; 
  result =  ((arg1)->type);
  jresult = new pjmedia_vid_dev_hwnd_type((const pjmedia_vid_dev_hwnd_type &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowHandle_handle_set___(void * jarg1, void * jarg2) {
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  pj::WindowHandle *arg2 = (pj::WindowHandle *) 0 ;
  
  arg1 = (pj::VideoWindowHandle *)jarg1; 
  arg2 = (pj::WindowHandle *)jarg2; 
  if (arg1) (arg1)->handle = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowHandle_handle_get___(void * jarg1) {
  void * jresult ;
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  pj::WindowHandle *result = 0 ;
  
  arg1 = (pj::VideoWindowHandle *)jarg1; 
  result = (pj::WindowHandle *)& ((arg1)->handle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_VideoWindowHandle___() {
  void * jresult ;
  pj::VideoWindowHandle *result = 0 ;
  
  result = (pj::VideoWindowHandle *)new pj::VideoWindowHandle();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_VideoWindowHandle___(void * jarg1) {
  pj::VideoWindowHandle *arg1 = (pj::VideoWindowHandle *) 0 ;
  
  arg1 = (pj::VideoWindowHandle *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowInfo_isNative_set___(void * jarg1, unsigned int jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isNative = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowInfo_isNative_get___(void * jarg1) {
  unsigned int jresult ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  bool result;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  result = (bool) ((arg1)->isNative);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowInfo_winHandle_set___(void * jarg1, void * jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::VideoWindowHandle *arg2 = (pj::VideoWindowHandle *) 0 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  arg2 = (pj::VideoWindowHandle *)jarg2; 
  if (arg1) (arg1)->winHandle = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowInfo_winHandle_get___(void * jarg1) {
  void * jresult ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::VideoWindowHandle *result = 0 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  result = (pj::VideoWindowHandle *)& ((arg1)->winHandle);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowInfo_renderDeviceId_set___(void * jarg1, int jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->renderDeviceId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowInfo_renderDeviceId_get___(void * jarg1) {
  int jresult ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  int result;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  result = (int) ((arg1)->renderDeviceId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowInfo_show_set___(void * jarg1, unsigned int jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->show = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowInfo_show_get___(void * jarg1) {
  unsigned int jresult ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  bool result;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  result = (bool) ((arg1)->show);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowInfo_pos_set___(void * jarg1, void * jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::MediaCoordinate *arg2 = (pj::MediaCoordinate *) 0 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  arg2 = (pj::MediaCoordinate *)jarg2; 
  if (arg1) (arg1)->pos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowInfo_pos_get___(void * jarg1) {
  void * jresult ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::MediaCoordinate *result = 0 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  result = (pj::MediaCoordinate *)& ((arg1)->pos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowInfo_size_set___(void * jarg1, void * jarg2) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::MediaSize *arg2 = (pj::MediaSize *) 0 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  arg2 = (pj::MediaSize *)jarg2; 
  if (arg1) (arg1)->size = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindowInfo_size_get___(void * jarg1) {
  void * jresult ;
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  pj::MediaSize *result = 0 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  result = (pj::MediaSize *)& ((arg1)->size);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_VideoWindowInfo___() {
  void * jresult ;
  pj::VideoWindowInfo *result = 0 ;
  
  result = (pj::VideoWindowInfo *)new pj::VideoWindowInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_VideoWindowInfo___(void * jarg1) {
  pj::VideoWindowInfo *arg1 = (pj::VideoWindowInfo *) 0 ;
  
  arg1 = (pj::VideoWindowInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_VideoWindow___(int jarg1) {
  void * jresult ;
  int arg1 ;
  pj::VideoWindow *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (pj::VideoWindow *)new pj::VideoWindow(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindow_getInfo___(void * jarg1) {
  void * jresult ;
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pj::VideoWindowInfo result;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  try {
    result = ((pj::VideoWindow const *)arg1)->getInfo();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::VideoWindowInfo((const pj::VideoWindowInfo &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindow_Show___(void * jarg1, unsigned int jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->Show(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindow_setPos___(void * jarg1, void * jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pj::MediaCoordinate *arg2 = 0 ;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  arg2 = (pj::MediaCoordinate *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaCoordinate const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->setPos((pj::MediaCoordinate const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindow_setSize___(void * jarg1, void * jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pj::MediaSize *arg2 = 0 ;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  arg2 = (pj::MediaSize *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaSize const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->setSize((pj::MediaSize const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindow_rotate___(void * jarg1, int jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  int arg2 ;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    (arg1)->rotate(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoWindow_setWindow___(void * jarg1, void * jarg2) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  pj::VideoWindowHandle *arg2 = 0 ;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  arg2 = (pj::VideoWindowHandle *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoWindowHandle const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->setWindow((pj::VideoWindowHandle const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_VideoWindow___(void * jarg1) {
  pj::VideoWindow *arg1 = (pj::VideoWindow *) 0 ;
  
  arg1 = (pj::VideoWindow *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoPreviewOpParam_rendId_set___(void * jarg1, int jarg2) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->rendId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoPreviewOpParam_rendId_get___(void * jarg1) {
  int jresult ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pjmedia_vid_dev_index result;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->rendId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoPreviewOpParam_show_set___(void * jarg1, unsigned int jarg2) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->show = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoPreviewOpParam_show_get___(void * jarg1) {
  unsigned int jresult ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  bool result;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  result = (bool) ((arg1)->show);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoPreviewOpParam_windowFlags_set___(void * jarg1, unsigned int jarg2) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->windowFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoPreviewOpParam_windowFlags_get___(void * jarg1) {
  unsigned int jresult ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  result = (unsigned int) ((arg1)->windowFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoPreviewOpParam_format_set___(void * jarg1, void * jarg2) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pj::MediaFormat *arg2 = (pj::MediaFormat *) 0 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  arg2 = (pj::MediaFormat *)jarg2; 
  if (arg1) (arg1)->format = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoPreviewOpParam_format_get___(void * jarg1) {
  void * jresult ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pj::MediaFormat *result = 0 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  result = (pj::MediaFormat *)& ((arg1)->format);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoPreviewOpParam_window_set___(void * jarg1, void * jarg2) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pj::VideoWindowHandle *arg2 = (pj::VideoWindowHandle *) 0 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  arg2 = (pj::VideoWindowHandle *)jarg2; 
  if (arg1) (arg1)->window = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoPreviewOpParam_window_get___(void * jarg1) {
  void * jresult ;
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  pj::VideoWindowHandle *result = 0 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  result = (pj::VideoWindowHandle *)& ((arg1)->window);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_VideoPreviewOpParam___() {
  void * jresult ;
  pj::VideoPreviewOpParam *result = 0 ;
  
  result = (pj::VideoPreviewOpParam *)new pj::VideoPreviewOpParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_VideoPreviewOpParam___(void * jarg1) {
  pj::VideoPreviewOpParam *arg1 = (pj::VideoPreviewOpParam *) 0 ;
  
  arg1 = (pj::VideoPreviewOpParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_VideoPreview___(int jarg1) {
  void * jresult ;
  int arg1 ;
  pj::VideoPreview *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (pj::VideoPreview *)new pj::VideoPreview(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoPreview_hasNative___(void * jarg1) {
  unsigned int jresult ;
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  bool result;
  
  arg1 = (pj::VideoPreview *)jarg1; 
  result = (bool)(arg1)->hasNative();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoPreview_start___(void * jarg1, void * jarg2) {
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  pj::VideoPreviewOpParam *arg2 = 0 ;
  
  arg1 = (pj::VideoPreview *)jarg1; 
  arg2 = (pj::VideoPreviewOpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoPreviewOpParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->start((pj::VideoPreviewOpParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoPreview_stop___(void * jarg1) {
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  
  arg1 = (pj::VideoPreview *)jarg1; 
  try {
    (arg1)->stop();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoPreview_getVideoWindow___(void * jarg1) {
  void * jresult ;
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  SwigValueWrapper< pj::VideoWindow > result;
  
  arg1 = (pj::VideoPreview *)jarg1; 
  result = (arg1)->getVideoWindow();
  jresult = new pj::VideoWindow((const pj::VideoWindow &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_VideoPreview___(void * jarg1) {
  pj::VideoPreview *arg1 = (pj::VideoPreview *) 0 ;
  
  arg1 = (pj::VideoPreview *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfo_id_set___(void * jarg1, int jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfo_id_get___(void * jarg1) {
  int jresult ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pjmedia_vid_dev_index result;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfo_name_set___(void * jarg1, char * jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfo_name_get___(void * jarg1) {
  char * jresult ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfo_driver_set___(void * jarg1, char * jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->driver = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfo_driver_get___(void * jarg1) {
  char * jresult ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->driver);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfo_dir_set___(void * jarg1, int jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pjmedia_dir arg2 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfo_dir_get___(void * jarg1) {
  int jresult ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pjmedia_dir result;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfo_caps_set___(void * jarg1, unsigned int jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->caps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfo_caps_get___(void * jarg1) {
  unsigned int jresult ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  result = (unsigned int) ((arg1)->caps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfo_fmt_set___(void * jarg1, void * jarg2) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::MediaFormatVector *arg2 = (pj::MediaFormatVector *) 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  arg2 = (pj::MediaFormatVector *)jarg2; 
  if (arg1) (arg1)->fmt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoDevInfo_fmt_get___(void * jarg1) {
  void * jresult ;
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  pj::MediaFormatVector *result = 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  result = (pj::MediaFormatVector *)& ((arg1)->fmt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_VideoDevInfo___(void * jarg1) {
  pj::VideoDevInfo *arg1 = (pj::VideoDevInfo *) 0 ;
  
  arg1 = (pj::VideoDevInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_VideoDevInfo___() {
  void * jresult ;
  pj::VideoDevInfo *result = 0 ;
  
  result = (pj::VideoDevInfo *)new pj::VideoDevInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoSwitchParam_target_id_set___(void * jarg1, int jarg2) {
  pj::VideoSwitchParam *arg1 = (pj::VideoSwitchParam *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  arg1 = (pj::VideoSwitchParam *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->target_id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VideoSwitchParam_target_id_get___(void * jarg1) {
  int jresult ;
  pj::VideoSwitchParam *arg1 = (pj::VideoSwitchParam *) 0 ;
  pjmedia_vid_dev_index result;
  
  arg1 = (pj::VideoSwitchParam *)jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->target_id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_VideoSwitchParam___() {
  void * jresult ;
  pj::VideoSwitchParam *result = 0 ;
  
  result = (pj::VideoSwitchParam *)new pj::VideoSwitchParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_VideoSwitchParam___(void * jarg1) {
  pj::VideoSwitchParam *arg1 = (pj::VideoSwitchParam *) 0 ;
  
  arg1 = (pj::VideoSwitchParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_refreshDevs___(void * jarg1) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  try {
    (arg1)->refreshDevs();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_getDevCount___(void * jarg1) {
  unsigned int jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  unsigned int result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  result = (unsigned int)(arg1)->getDevCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_getDevInfo___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::VideoDevInfo result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::VidDevManager const *)arg1)->getDevInfo(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::VideoDevInfo((const pj::VideoDevInfo &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_enumDev___(void * jarg1) {
  void * jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pj::VideoDevInfoVector *result = 0 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  try {
    result = (pj::VideoDevInfoVector *) &(arg1)->enumDev();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_lookupDev___(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pj::string *arg2 = 0 ;
  pj::string *arg3 = 0 ;
  int result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  try {
    result = (int)((pj::VidDevManager const *)arg1)->lookupDev((pj::string const &)*arg2,(pj::string const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_capName___(void * jarg1, int jarg2) {
  char * jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pjmedia_vid_dev_cap arg2 ;
  pj::string result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (pjmedia_vid_dev_cap)jarg2; 
  result = ((pj::VidDevManager const *)arg1)->capName(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_setFormat___(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::MediaFormatVideo *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::MediaFormatVideo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaFormatVideo const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->setFormat(arg2,(pj::MediaFormatVideo const &)*arg3,arg4);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_getFormat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::MediaFormatVideo result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::VidDevManager const *)arg1)->getFormat(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::MediaFormatVideo((const pj::MediaFormatVideo &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_setInputScale___(void * jarg1, int jarg2, void * jarg3, unsigned int jarg4) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::MediaSize *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::MediaSize *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::MediaSize const & type is null", 0);
    return ;
  } 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->setInputScale(arg2,(pj::MediaSize const &)*arg3,arg4);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_getInputScale___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::MediaSize result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = ((pj::VidDevManager const *)arg1)->getInputScale(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::MediaSize((const pj::MediaSize &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_setOutputWindowFlags___(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->setOutputWindowFlags(arg2,arg3,arg4);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_getOutputWindowFlags___(void * jarg1, int jarg2) {
  int jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)(arg1)->getOutputWindowFlags(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_switchDev___(void * jarg1, int jarg2, void * jarg3) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  pj::VideoSwitchParam *arg3 = 0 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::VideoSwitchParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VideoSwitchParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->switchDev(arg2,(pj::VideoSwitchParam const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_isCaptureActive___(void * jarg1, int jarg2) {
  unsigned int jresult ;
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)((pj::VidDevManager const *)arg1)->isCaptureActive(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_setCaptureOrient__SWIG_0___(void * jarg1, int jarg2, int jarg3, unsigned int jarg4) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  pjmedia_orient arg3 ;
  bool arg4 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  arg3 = (pjmedia_orient)jarg3; 
  arg4 = jarg4 ? true : false; 
  try {
    (arg1)->setCaptureOrient(arg2,arg3,arg4);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidDevManager_setCaptureOrient__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  pj::VidDevManager *arg1 = (pj::VidDevManager *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  pjmedia_orient arg3 ;
  
  arg1 = (pj::VidDevManager *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  arg3 = (pjmedia_orient)jarg3; 
  try {
    (arg1)->setCaptureOrient(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfo_codecId_set___(void * jarg1, char * jarg2) {
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CodecInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->codecId = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfo_codecId_get___(void * jarg1) {
  char * jresult ;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CodecInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->codecId);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfo_priority_set___(void * jarg1, unsigned char jarg2) {
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj_uint8_t arg2 ;
  
  arg1 = (pj::CodecInfo *)jarg1; 
  arg2 = (pj_uint8_t)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT unsigned char SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfo_priority_get___(void * jarg1) {
  unsigned char jresult ;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj_uint8_t result;
  
  arg1 = (pj::CodecInfo *)jarg1; 
  result = (pj_uint8_t) ((arg1)->priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfo_desc_set___(void * jarg1, char * jarg2) {
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CodecInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->desc = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecInfo_desc_get___(void * jarg1) {
  char * jresult ;
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CodecInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->desc);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CodecInfo___() {
  void * jresult ;
  pj::CodecInfo *result = 0 ;
  
  result = (pj::CodecInfo *)new pj::CodecInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CodecInfo___(void * jarg1) {
  pj::CodecInfo *arg1 = (pj::CodecInfo *) 0 ;
  
  arg1 = (pj::CodecInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtp_name_set___(void * jarg1, char * jarg2) {
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CodecFmtp *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtp_name_get___(void * jarg1) {
  char * jresult ;
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CodecFmtp *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtp_val_set___(void * jarg1, char * jarg2) {
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CodecFmtp *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->val = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecFmtp_val_get___(void * jarg1) {
  char * jresult ;
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CodecFmtp *)jarg1; 
  result = (pj::string *) & ((arg1)->val);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CodecFmtp___() {
  void * jresult ;
  pj::CodecFmtp *result = 0 ;
  
  result = (pj::CodecFmtp *)new pj::CodecFmtp();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CodecFmtp___(void * jarg1) {
  pj::CodecFmtp *arg1 = (pj::CodecFmtp *) 0 ;
  
  arg1 = (pj::CodecFmtp *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_clockRate_set___(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->clockRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_clockRate_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->clockRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_channelCnt_set___(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->channelCnt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_channelCnt_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->channelCnt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_avgBps_set___(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->avgBps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_avgBps_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->avgBps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_maxBps_set___(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxBps = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_maxBps_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->maxBps);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_maxRxFrameSize_set___(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxRxFrameSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_maxRxFrameSize_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->maxRxFrameSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_frameLen_set___(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frameLen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_frameLen_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->frameLen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_pcmBitsPerSample_set___(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->pcmBitsPerSample = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_pcmBitsPerSample_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->pcmBitsPerSample);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_pt_set___(void * jarg1, unsigned int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->pt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_pt_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->pt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_fmtId_set___(void * jarg1, int jarg2) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  pjmedia_format_id arg2 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  arg2 = (pjmedia_format_id)jarg2; 
  if (arg1) (arg1)->fmtId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamInfo_fmtId_get___(void * jarg1) {
  int jresult ;
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  pjmedia_format_id result;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  result = (pjmedia_format_id) ((arg1)->fmtId);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CodecParamInfo___() {
  void * jresult ;
  pj::CodecParamInfo *result = 0 ;
  
  result = (pj::CodecParamInfo *)new pj::CodecParamInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CodecParamInfo___(void * jarg1) {
  pj::CodecParamInfo *arg1 = (pj::CodecParamInfo *) 0 ;
  
  arg1 = (pj::CodecParamInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_frmPerPkt_set___(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frmPerPkt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_frmPerPkt_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (unsigned int) ((arg1)->frmPerPkt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_vad_set___(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vad = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_vad_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (bool) ((arg1)->vad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_cng_set___(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->cng = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_cng_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (bool) ((arg1)->cng);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_penh_set___(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->penh = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_penh_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (bool) ((arg1)->penh);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_plc_set___(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->plc = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_plc_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (bool) ((arg1)->plc);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_reserved_set___(void * jarg1, unsigned int jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->reserved = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_reserved_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  bool result;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (bool) ((arg1)->reserved);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_encFmtp_set___(void * jarg1, void * jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  pj::CodecFmtpVector *arg2 = (pj::CodecFmtpVector *) 0 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = (pj::CodecFmtpVector *)jarg2; 
  if (arg1) (arg1)->encFmtp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_encFmtp_get___(void * jarg1) {
  void * jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  pj::CodecFmtpVector *result = 0 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (pj::CodecFmtpVector *)& ((arg1)->encFmtp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_decFmtp_set___(void * jarg1, void * jarg2) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  pj::CodecFmtpVector *arg2 = (pj::CodecFmtpVector *) 0 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  arg2 = (pj::CodecFmtpVector *)jarg2; 
  if (arg1) (arg1)->decFmtp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParamSetting_decFmtp_get___(void * jarg1) {
  void * jresult ;
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  pj::CodecFmtpVector *result = 0 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  result = (pj::CodecFmtpVector *)& ((arg1)->decFmtp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CodecParamSetting___() {
  void * jresult ;
  pj::CodecParamSetting *result = 0 ;
  
  result = (pj::CodecParamSetting *)new pj::CodecParamSetting();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CodecParamSetting___(void * jarg1) {
  pj::CodecParamSetting *arg1 = (pj::CodecParamSetting *) 0 ;
  
  arg1 = (pj::CodecParamSetting *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParam_info_set___(void * jarg1, void * jarg2) {
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  pj::CodecParamInfo *arg2 = (pj::CodecParamInfo *) 0 ;
  
  arg1 = (pj::CodecParam *)jarg1; 
  arg2 = (pj::CodecParamInfo *)jarg2; 
  if (arg1) (arg1)->info = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParam_info_get___(void * jarg1) {
  void * jresult ;
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  pj::CodecParamInfo *result = 0 ;
  
  arg1 = (pj::CodecParam *)jarg1; 
  result = (pj::CodecParamInfo *)& ((arg1)->info);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParam_setting_set___(void * jarg1, void * jarg2) {
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  pj::CodecParamSetting *arg2 = (pj::CodecParamSetting *) 0 ;
  
  arg1 = (pj::CodecParam *)jarg1; 
  arg2 = (pj::CodecParamSetting *)jarg2; 
  if (arg1) (arg1)->setting = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CodecParam_setting_get___(void * jarg1) {
  void * jresult ;
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  pj::CodecParamSetting *result = 0 ;
  
  arg1 = (pj::CodecParam *)jarg1; 
  result = (pj::CodecParamSetting *)& ((arg1)->setting);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CodecParam___() {
  void * jresult ;
  pj::CodecParam *result = 0 ;
  
  result = (pj::CodecParam *)new pj::CodecParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CodecParam___(void * jarg1) {
  pj::CodecParam *arg1 = (pj::CodecParam *) 0 ;
  
  arg1 = (pj::CodecParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_dir_set___(void * jarg1, int jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pjmedia_dir arg2 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_dir_get___(void * jarg1) {
  int jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pjmedia_dir result;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_packing_set___(void * jarg1, int jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pjmedia_vid_packing arg2 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = (pjmedia_vid_packing)jarg2; 
  if (arg1) (arg1)->packing = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_packing_get___(void * jarg1) {
  int jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pjmedia_vid_packing result;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (pjmedia_vid_packing) ((arg1)->packing);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_encFmt_set___(void * jarg1, void * jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::MediaFormatVideo *arg2 = (pj::MediaFormatVideo *) 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = (pj::MediaFormatVideo *)jarg2; 
  if (arg1) (arg1)->encFmt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_encFmt_get___(void * jarg1) {
  void * jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::MediaFormatVideo *result = 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (pj::MediaFormatVideo *)& ((arg1)->encFmt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_encFmtp_set___(void * jarg1, void * jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::CodecFmtpVector *arg2 = (pj::CodecFmtpVector *) 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = (pj::CodecFmtpVector *)jarg2; 
  if (arg1) (arg1)->encFmtp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_encFmtp_get___(void * jarg1) {
  void * jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::CodecFmtpVector *result = 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (pj::CodecFmtpVector *)& ((arg1)->encFmtp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_encMtu_set___(void * jarg1, unsigned int jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->encMtu = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_encMtu_get___(void * jarg1) {
  unsigned int jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (unsigned int) ((arg1)->encMtu);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_decFmt_set___(void * jarg1, void * jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::MediaFormatVideo *arg2 = (pj::MediaFormatVideo *) 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = (pj::MediaFormatVideo *)jarg2; 
  if (arg1) (arg1)->decFmt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_decFmt_get___(void * jarg1) {
  void * jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::MediaFormatVideo *result = 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (pj::MediaFormatVideo *)& ((arg1)->decFmt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_decFmtp_set___(void * jarg1, void * jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::CodecFmtpVector *arg2 = (pj::CodecFmtpVector *) 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = (pj::CodecFmtpVector *)jarg2; 
  if (arg1) (arg1)->decFmtp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_decFmtp_get___(void * jarg1) {
  void * jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  pj::CodecFmtpVector *result = 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (pj::CodecFmtpVector *)& ((arg1)->decFmtp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_ignoreFmtp_set___(void * jarg1, unsigned int jarg2) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->ignoreFmtp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_VidCodecParam_ignoreFmtp_get___(void * jarg1) {
  unsigned int jresult ;
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  bool result;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  result = (bool) ((arg1)->ignoreFmtp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_VidCodecParam___() {
  void * jresult ;
  pj::VidCodecParam *result = 0 ;
  
  result = (pj::VidCodecParam *)new pj::VidCodecParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_VidCodecParam___(void * jarg1) {
  pj::VidCodecParam *arg1 = (pj::VidCodecParam *) 0 ;
  
  arg1 = (pj::VidCodecParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresenceStatus_status_set___(void * jarg1, int jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjsua_buddy_status arg2 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  arg2 = (pjsua_buddy_status)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresenceStatus_status_get___(void * jarg1) {
  int jresult ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjsua_buddy_status result;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  result = (pjsua_buddy_status) ((arg1)->status);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresenceStatus_statusText_set___(void * jarg1, char * jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->statusText = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresenceStatus_statusText_get___(void * jarg1) {
  char * jresult ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  result = (pj::string *) & ((arg1)->statusText);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresenceStatus_activity_set___(void * jarg1, int jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjrpid_activity arg2 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  arg2 = (pjrpid_activity)jarg2; 
  if (arg1) (arg1)->activity = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresenceStatus_activity_get___(void * jarg1) {
  int jresult ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pjrpid_activity result;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  result = (pjrpid_activity) ((arg1)->activity);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresenceStatus_note_set___(void * jarg1, char * jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->note = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresenceStatus_note_get___(void * jarg1) {
  char * jresult ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  result = (pj::string *) & ((arg1)->note);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresenceStatus_rpidId_set___(void * jarg1, char * jarg2) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->rpidId = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresenceStatus_rpidId_get___(void * jarg1) {
  char * jresult ;
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  result = (pj::string *) & ((arg1)->rpidId);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_PresenceStatus___() {
  void * jresult ;
  pj::PresenceStatus *result = 0 ;
  
  result = (pj::PresenceStatus *)new pj::PresenceStatus();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_PresenceStatus___(void * jarg1) {
  pj::PresenceStatus *arg1 = (pj::PresenceStatus *) 0 ;
  
  arg1 = (pj::PresenceStatus *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyConfig_uri_set___(void * jarg1, char * jarg2) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::BuddyConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->uri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyConfig_uri_get___(void * jarg1) {
  char * jresult ;
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::BuddyConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->uri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyConfig_subscribe_set___(void * jarg1, unsigned int jarg2) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::BuddyConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->subscribe = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyConfig_subscribe_get___(void * jarg1) {
  unsigned int jresult ;
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  bool result;
  
  arg1 = (pj::BuddyConfig *)jarg1; 
  result = (bool) ((arg1)->subscribe);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyConfig_readObject___(void * jarg1, void * jarg2) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::BuddyConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::BuddyConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::BuddyConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_BuddyConfig___() {
  void * jresult ;
  pj::BuddyConfig *result = 0 ;
  
  result = (pj::BuddyConfig *)new pj::BuddyConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_BuddyConfig___(void * jarg1) {
  pj::BuddyConfig *arg1 = (pj::BuddyConfig *) 0 ;
  
  arg1 = (pj::BuddyConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_uri_set___(void * jarg1, char * jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->uri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_uri_get___(void * jarg1) {
  char * jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->uri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_contact_set___(void * jarg1, char * jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contact = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_contact_get___(void * jarg1) {
  char * jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->contact);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_presMonitorEnabled_set___(void * jarg1, unsigned int jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->presMonitorEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_presMonitorEnabled_get___(void * jarg1) {
  unsigned int jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  bool result;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (bool) ((arg1)->presMonitorEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_subState_set___(void * jarg1, int jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_evsub_state arg2 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  arg2 = (pjsip_evsub_state)jarg2; 
  if (arg1) (arg1)->subState = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_subState_get___(void * jarg1) {
  int jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_evsub_state result;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (pjsip_evsub_state) ((arg1)->subState);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_subStateName_set___(void * jarg1, char * jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->subStateName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_subStateName_get___(void * jarg1) {
  char * jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->subStateName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_subTermCode_set___(void * jarg1, int jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->subTermCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_subTermCode_get___(void * jarg1) {
  int jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (pjsip_status_code) ((arg1)->subTermCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_subTermReason_set___(void * jarg1, char * jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->subTermReason = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_subTermReason_get___(void * jarg1) {
  char * jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->subTermReason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_presStatus_set___(void * jarg1, void * jarg2) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::PresenceStatus *arg2 = (pj::PresenceStatus *) 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  arg2 = (pj::PresenceStatus *)jarg2; 
  if (arg1) (arg1)->presStatus = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyInfo_presStatus_get___(void * jarg1) {
  void * jresult ;
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  pj::PresenceStatus *result = 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  result = (pj::PresenceStatus *)& ((arg1)->presStatus);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_BuddyInfo___() {
  void * jresult ;
  pj::BuddyInfo *result = 0 ;
  
  result = (pj::BuddyInfo *)new pj::BuddyInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_BuddyInfo___(void * jarg1) {
  pj::BuddyInfo *arg1 = (pj::BuddyInfo *) 0 ;
  
  arg1 = (pj::BuddyInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnBuddyEvSubStateParam_e_set___(void * jarg1, void * jarg2) {
  pj::OnBuddyEvSubStateParam *arg1 = (pj::OnBuddyEvSubStateParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  arg1 = (pj::OnBuddyEvSubStateParam *)jarg1; 
  arg2 = (pj::SipEvent *)jarg2; 
  if (arg1) (arg1)->e = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnBuddyEvSubStateParam_e_get___(void * jarg1) {
  void * jresult ;
  pj::OnBuddyEvSubStateParam *arg1 = (pj::OnBuddyEvSubStateParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  arg1 = (pj::OnBuddyEvSubStateParam *)jarg1; 
  result = (pj::SipEvent *)& ((arg1)->e);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnBuddyEvSubStateParam___() {
  void * jresult ;
  pj::OnBuddyEvSubStateParam *result = 0 ;
  
  result = (pj::OnBuddyEvSubStateParam *)new pj::OnBuddyEvSubStateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnBuddyEvSubStateParam___(void * jarg1) {
  pj::OnBuddyEvSubStateParam *arg1 = (pj::OnBuddyEvSubStateParam *) 0 ;
  
  arg1 = (pj::OnBuddyEvSubStateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_Buddy___() {
  void * jresult ;
  pj::Buddy *result = 0 ;
  
  result = (pj::Buddy *)new SwigDirector_Buddy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_Buddy___(void * jarg1) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Buddy_create___(void * jarg1, void * jarg2, void * jarg3) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::Account *arg2 = 0 ;
  pj::BuddyConfig *arg3 = 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  arg2 = (pj::Account *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Account & type is null", 0);
    return ;
  } 
  arg3 = (pj::BuddyConfig *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::BuddyConfig const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->create(*arg2,(pj::BuddyConfig const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Buddy_isValid___(void * jarg1) {
  unsigned int jresult ;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  bool result;
  
  arg1 = (pj::Buddy *)jarg1; 
  result = (bool)((pj::Buddy const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Buddy_getInfo___(void * jarg1) {
  void * jresult ;
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::BuddyInfo result;
  
  arg1 = (pj::Buddy *)jarg1; 
  try {
    result = ((pj::Buddy const *)arg1)->getInfo();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::BuddyInfo((const pj::BuddyInfo &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Buddy_subscribePresence___(void * jarg1, unsigned int jarg2) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->subscribePresence(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Buddy_updatePresence___(void * jarg1) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  try {
    (arg1)->updatePresence();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Buddy_sendInstantMessage___(void * jarg1, void * jarg2) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::SendInstantMessageParam *arg2 = 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  arg2 = (pj::SendInstantMessageParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SendInstantMessageParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->sendInstantMessage((pj::SendInstantMessageParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Buddy_sendTypingIndication___(void * jarg1, void * jarg2) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::SendTypingIndicationParam *arg2 = 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  arg2 = (pj::SendTypingIndicationParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SendTypingIndicationParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->sendTypingIndication((pj::SendTypingIndicationParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Buddy_onBuddyState___(void * jarg1) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  (arg1)->onBuddyState();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Buddy_onBuddyStateSwigExplicitBuddy___(void * jarg1) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  (arg1)->pj::Buddy::onBuddyState();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Buddy_onBuddyEvSubState___(void * jarg1, void * jarg2) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::OnBuddyEvSubStateParam *arg2 = 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  arg2 = (pj::OnBuddyEvSubStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnBuddyEvSubStateParam & type is null", 0);
    return ;
  } 
  (arg1)->onBuddyEvSubState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Buddy_onBuddyEvSubStateSwigExplicitBuddy___(void * jarg1, void * jarg2) {
  pj::Buddy *arg1 = (pj::Buddy *) 0 ;
  pj::OnBuddyEvSubStateParam *arg2 = 0 ;
  
  arg1 = (pj::Buddy *)jarg1; 
  arg2 = (pj::OnBuddyEvSubStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnBuddyEvSubStateParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Buddy::onBuddyEvSubState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Buddy_director_connect___(void *objarg, SwigDirector_Buddy::SWIG_Callback0_t callback0, SwigDirector_Buddy::SWIG_Callback1_t callback1) {
  pj::Buddy *obj = (pj::Buddy *)objarg;
  SwigDirector_Buddy *director = dynamic_cast<SwigDirector_Buddy *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_registrarUri_set___(void * jarg1, char * jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->registrarUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_registrarUri_get___(void * jarg1) {
  char * jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->registrarUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_registerOnAdd_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->registerOnAdd = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_registerOnAdd_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (bool) ((arg1)->registerOnAdd);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_headers_set___(void * jarg1, void * jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (pj::SipHeaderVector *)jarg2; 
  if (arg1) (arg1)->headers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_headers_get___(void * jarg1) {
  void * jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_contactParams_set___(void * jarg1, char * jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contactParams = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_contactParams_get___(void * jarg1) {
  char * jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->contactParams);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_timeoutSec_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->timeoutSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_timeoutSec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (unsigned int) ((arg1)->timeoutSec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_retryIntervalSec_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->retryIntervalSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_retryIntervalSec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (unsigned int) ((arg1)->retryIntervalSec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_firstRetryIntervalSec_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->firstRetryIntervalSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_firstRetryIntervalSec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (unsigned int) ((arg1)->firstRetryIntervalSec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_randomRetryIntervalSec_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->randomRetryIntervalSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_randomRetryIntervalSec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (unsigned int) ((arg1)->randomRetryIntervalSec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_delayBeforeRefreshSec_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->delayBeforeRefreshSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_delayBeforeRefreshSec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (unsigned int) ((arg1)->delayBeforeRefreshSec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_dropCallsOnFail_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dropCallsOnFail = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_dropCallsOnFail_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (bool) ((arg1)->dropCallsOnFail);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_unregWaitMsec_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->unregWaitMsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_unregWaitMsec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (unsigned int) ((arg1)->unregWaitMsec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_proxyUse_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->proxyUse = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_proxyUse_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  result = (unsigned int) ((arg1)->proxyUse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_readObject___(void * jarg1, void * jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::AccountRegConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AccountRegConfig___() {
  void * jresult ;
  pj::AccountRegConfig *result = 0 ;
  
  result = (pj::AccountRegConfig *)new pj::AccountRegConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AccountRegConfig___(void * jarg1) {
  pj::AccountRegConfig *arg1 = (pj::AccountRegConfig *) 0 ;
  
  arg1 = (pj::AccountRegConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_authCreds_set___(void * jarg1, void * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::AuthCredInfoVector *arg2 = (pj::AuthCredInfoVector *) 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  arg2 = (pj::AuthCredInfoVector *)jarg2; 
  if (arg1) (arg1)->authCreds = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_authCreds_get___(void * jarg1) {
  void * jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::AuthCredInfoVector *result = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pj::AuthCredInfoVector *)& ((arg1)->authCreds);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_proxies_set___(void * jarg1, void * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  arg2 = (pj::StringVector *)jarg2; 
  if (arg1) (arg1)->proxies = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_proxies_get___(void * jarg1) {
  void * jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pj::StringVector *)& ((arg1)->proxies);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_contactForced_set___(void * jarg1, char * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contactForced = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_contactForced_get___(void * jarg1) {
  char * jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->contactForced);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_contactParams_set___(void * jarg1, char * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contactParams = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_contactParams_get___(void * jarg1) {
  char * jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->contactParams);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_contactUriParams_set___(void * jarg1, char * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contactUriParams = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_contactUriParams_get___(void * jarg1) {
  char * jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->contactUriParams);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_authInitialEmpty_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->authInitialEmpty = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_authInitialEmpty_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (bool) ((arg1)->authInitialEmpty);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_authInitialAlgorithm_set___(void * jarg1, char * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->authInitialAlgorithm = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_authInitialAlgorithm_get___(void * jarg1) {
  char * jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->authInitialAlgorithm);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_transportId_set___(void * jarg1, int jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::TransportId arg2 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  if (arg1) (arg1)->transportId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_transportId_get___(void * jarg1) {
  int jresult ;
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::TransportId result;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  result = (pj::TransportId) ((arg1)->transportId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_readObject___(void * jarg1, void * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::AccountSipConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AccountSipConfig___() {
  void * jresult ;
  pj::AccountSipConfig *result = 0 ;
  
  result = (pj::AccountSipConfig *)new pj::AccountSipConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AccountSipConfig___(void * jarg1) {
  pj::AccountSipConfig *arg1 = (pj::AccountSipConfig *) 0 ;
  
  arg1 = (pj::AccountSipConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountCallConfig_holdType_set___(void * jarg1, int jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_call_hold_type arg2 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  arg2 = (pjsua_call_hold_type)jarg2; 
  if (arg1) (arg1)->holdType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountCallConfig_holdType_get___(void * jarg1) {
  int jresult ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_call_hold_type result;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  result = (pjsua_call_hold_type) ((arg1)->holdType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountCallConfig_prackUse_set___(void * jarg1, int jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_100rel_use arg2 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  arg2 = (pjsua_100rel_use)jarg2; 
  if (arg1) (arg1)->prackUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountCallConfig_prackUse_get___(void * jarg1) {
  int jresult ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_100rel_use result;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  result = (pjsua_100rel_use) ((arg1)->prackUse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountCallConfig_timerUse_set___(void * jarg1, int jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_sip_timer_use arg2 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  arg2 = (pjsua_sip_timer_use)jarg2; 
  if (arg1) (arg1)->timerUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountCallConfig_timerUse_get___(void * jarg1) {
  int jresult ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pjsua_sip_timer_use result;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  result = (pjsua_sip_timer_use) ((arg1)->timerUse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountCallConfig_timerMinSESec_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->timerMinSESec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountCallConfig_timerMinSESec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  result = (unsigned int) ((arg1)->timerMinSESec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountCallConfig_timerSessExpiresSec_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->timerSessExpiresSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountCallConfig_timerSessExpiresSec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  result = (unsigned int) ((arg1)->timerSessExpiresSec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountCallConfig_readObject___(void * jarg1, void * jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountCallConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::AccountCallConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AccountCallConfig___() {
  void * jresult ;
  pj::AccountCallConfig *result = 0 ;
  
  result = (pj::AccountCallConfig *)new pj::AccountCallConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AccountCallConfig___(void * jarg1) {
  pj::AccountCallConfig *arg1 = (pj::AccountCallConfig *) 0 ;
  
  arg1 = (pj::AccountCallConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountPresConfig_headers_set___(void * jarg1, void * jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::SipHeaderVector *arg2 = (pj::SipHeaderVector *) 0 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  arg2 = (pj::SipHeaderVector *)jarg2; 
  if (arg1) (arg1)->headers = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountPresConfig_headers_get___(void * jarg1) {
  void * jresult ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::SipHeaderVector *result = 0 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  result = (pj::SipHeaderVector *)& ((arg1)->headers);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountPresConfig_publishEnabled_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->publishEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountPresConfig_publishEnabled_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  result = (bool) ((arg1)->publishEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountPresConfig_publishQueue_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->publishQueue = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountPresConfig_publishQueue_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  result = (bool) ((arg1)->publishQueue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountPresConfig_publishShutdownWaitMsec_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->publishShutdownWaitMsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountPresConfig_publishShutdownWaitMsec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  result = (unsigned int) ((arg1)->publishShutdownWaitMsec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountPresConfig_pidfTupleId_set___(void * jarg1, char * jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->pidfTupleId = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountPresConfig_pidfTupleId_get___(void * jarg1) {
  char * jresult ;
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->pidfTupleId);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountPresConfig_readObject___(void * jarg1, void * jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountPresConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::AccountPresConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AccountPresConfig___() {
  void * jresult ;
  pj::AccountPresConfig *result = 0 ;
  
  result = (pj::AccountPresConfig *)new pj::AccountPresConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AccountPresConfig___(void * jarg1) {
  pj::AccountPresConfig *arg1 = (pj::AccountPresConfig *) 0 ;
  
  arg1 = (pj::AccountPresConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMwiConfig_enabled_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountMwiConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMwiConfig_enabled_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountMwiConfig *)jarg1; 
  result = (bool) ((arg1)->enabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMwiConfig_expirationSec_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountMwiConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->expirationSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMwiConfig_expirationSec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountMwiConfig *)jarg1; 
  result = (unsigned int) ((arg1)->expirationSec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMwiConfig_readObject___(void * jarg1, void * jarg2) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountMwiConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMwiConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountMwiConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::AccountMwiConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AccountMwiConfig___() {
  void * jresult ;
  pj::AccountMwiConfig *result = 0 ;
  
  result = (pj::AccountMwiConfig *)new pj::AccountMwiConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AccountMwiConfig___(void * jarg1) {
  pj::AccountMwiConfig *arg1 = (pj::AccountMwiConfig *) 0 ;
  
  arg1 = (pj::AccountMwiConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_sipStunUse_set___(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pjsua_stun_use)jarg2; 
  if (arg1) (arg1)->sipStunUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_sipStunUse_get___(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pjsua_stun_use) ((arg1)->sipStunUse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_mediaStunUse_set___(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pjsua_stun_use)jarg2; 
  if (arg1) (arg1)->mediaStunUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_mediaStunUse_get___(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_stun_use result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pjsua_stun_use) ((arg1)->mediaStunUse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_nat64Opt_set___(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_nat64_opt arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pjsua_nat64_opt)jarg2; 
  if (arg1) (arg1)->nat64Opt = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_nat64Opt_get___(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pjsua_nat64_opt result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pjsua_nat64_opt) ((arg1)->nat64Opt);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_iceEnabled_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->iceEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_iceEnabled_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (bool) ((arg1)->iceEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_iceMaxHostCands_set___(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iceMaxHostCands = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_iceMaxHostCands_get___(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->iceMaxHostCands);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_iceAggressiveNomination_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->iceAggressiveNomination = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_iceAggressiveNomination_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (bool) ((arg1)->iceAggressiveNomination);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_iceNominatedCheckDelayMsec_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->iceNominatedCheckDelayMsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_iceNominatedCheckDelayMsec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (unsigned int) ((arg1)->iceNominatedCheckDelayMsec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_iceWaitNominationTimeoutMsec_set___(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->iceWaitNominationTimeoutMsec = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_iceWaitNominationTimeoutMsec_get___(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->iceWaitNominationTimeoutMsec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_iceNoRtcp_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->iceNoRtcp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_iceNoRtcp_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (bool) ((arg1)->iceNoRtcp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_iceAlwaysUpdate_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->iceAlwaysUpdate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_iceAlwaysUpdate_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (bool) ((arg1)->iceAlwaysUpdate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_turnEnabled_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->turnEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_turnEnabled_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (bool) ((arg1)->turnEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_turnServer_set___(void * jarg1, char * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->turnServer = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_turnServer_get___(void * jarg1) {
  char * jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->turnServer);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_turnConnType_set___(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj_turn_tp_type arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pj_turn_tp_type)jarg2; 
  if (arg1) (arg1)->turnConnType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_turnConnType_get___(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj_turn_tp_type result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj_turn_tp_type) ((arg1)->turnConnType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_turnUserName_set___(void * jarg1, char * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->turnUserName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_turnUserName_get___(void * jarg1) {
  char * jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->turnUserName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_turnPasswordType_set___(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->turnPasswordType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_turnPasswordType_get___(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->turnPasswordType);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_turnPassword_set___(void * jarg1, char * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->turnPassword = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_turnPassword_get___(void * jarg1) {
  char * jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->turnPassword);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_contactRewriteUse_set___(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->contactRewriteUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_contactRewriteUse_get___(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->contactRewriteUse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_contactRewriteMethod_set___(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->contactRewriteMethod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_contactRewriteMethod_get___(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->contactRewriteMethod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_contactUseSrcPort_set___(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->contactUseSrcPort = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_contactUseSrcPort_get___(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->contactUseSrcPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_viaRewriteUse_set___(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->viaRewriteUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_viaRewriteUse_get___(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->viaRewriteUse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_sdpNatRewriteUse_set___(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sdpNatRewriteUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_sdpNatRewriteUse_get___(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->sdpNatRewriteUse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_sipOutboundUse_set___(void * jarg1, int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sipOutboundUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_sipOutboundUse_get___(void * jarg1) {
  int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (int) ((arg1)->sipOutboundUse);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_sipOutboundInstanceId_set___(void * jarg1, char * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->sipOutboundInstanceId = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_sipOutboundInstanceId_get___(void * jarg1) {
  char * jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->sipOutboundInstanceId);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_sipOutboundRegId_set___(void * jarg1, char * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->sipOutboundRegId = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_sipOutboundRegId_get___(void * jarg1) {
  char * jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->sipOutboundRegId);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_udpKaIntervalSec_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->udpKaIntervalSec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_udpKaIntervalSec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (unsigned int) ((arg1)->udpKaIntervalSec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_udpKaData_set___(void * jarg1, char * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->udpKaData = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_udpKaData_get___(void * jarg1) {
  char * jresult ;
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->udpKaData);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_readObject___(void * jarg1, void * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::AccountNatConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AccountNatConfig___() {
  void * jresult ;
  pj::AccountNatConfig *result = 0 ;
  
  result = (pj::AccountNatConfig *)new pj::AccountNatConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AccountNatConfig___(void * jarg1) {
  pj::AccountNatConfig *arg1 = (pj::AccountNatConfig *) 0 ;
  
  arg1 = (pj::AccountNatConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCrypto_key_set___(void * jarg1, char * jarg2) {
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SrtpCrypto *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->key = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCrypto_key_get___(void * jarg1) {
  char * jresult ;
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SrtpCrypto *)jarg1; 
  result = (pj::string *) & ((arg1)->key);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCrypto_name_set___(void * jarg1, char * jarg2) {
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SrtpCrypto *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCrypto_name_get___(void * jarg1) {
  char * jresult ;
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SrtpCrypto *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCrypto_flags_set___(void * jarg1, unsigned int jarg2) {
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::SrtpCrypto *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpCrypto_flags_get___(void * jarg1) {
  unsigned int jresult ;
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  unsigned int result;
  
  arg1 = (pj::SrtpCrypto *)jarg1; 
  result = (unsigned int) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SrtpCrypto___() {
  void * jresult ;
  pj::SrtpCrypto *result = 0 ;
  
  result = (pj::SrtpCrypto *)new pj::SrtpCrypto();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SrtpCrypto___(void * jarg1) {
  pj::SrtpCrypto *arg1 = (pj::SrtpCrypto *) 0 ;
  
  arg1 = (pj::SrtpCrypto *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpOpt_cryptos_set___(void * jarg1, void * jarg2) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::SrtpCryptoVector *arg2 = (pj::SrtpCryptoVector *) 0 ;
  
  arg1 = (pj::SrtpOpt *)jarg1; 
  arg2 = (pj::SrtpCryptoVector *)jarg2; 
  if (arg1) (arg1)->cryptos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpOpt_cryptos_get___(void * jarg1) {
  void * jresult ;
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::SrtpCryptoVector *result = 0 ;
  
  arg1 = (pj::SrtpOpt *)jarg1; 
  result = (pj::SrtpCryptoVector *)& ((arg1)->cryptos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpOpt_keyings_set___(void * jarg1, void * jarg2) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::IntVector *arg2 = (pj::IntVector *) 0 ;
  
  arg1 = (pj::SrtpOpt *)jarg1; 
  arg2 = (pj::IntVector *)jarg2; 
  if (arg1) (arg1)->keyings = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpOpt_keyings_get___(void * jarg1) {
  void * jresult ;
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::IntVector *result = 0 ;
  
  arg1 = (pj::SrtpOpt *)jarg1; 
  result = (pj::IntVector *)& ((arg1)->keyings);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SrtpOpt___() {
  void * jresult ;
  pj::SrtpOpt *result = 0 ;
  
  result = (pj::SrtpOpt *)new pj::SrtpOpt();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpOpt_readObject___(void * jarg1, void * jarg2) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::SrtpOpt *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpOpt_writeObject___(void * jarg1, void * jarg2) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::SrtpOpt *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::SrtpOpt const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SrtpOpt___(void * jarg1) {
  pj::SrtpOpt *arg1 = (pj::SrtpOpt *) 0 ;
  
  arg1 = (pj::SrtpOpt *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbCap_codecId_set___(void * jarg1, char * jarg2) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->codecId = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbCap_codecId_get___(void * jarg1) {
  char * jresult ;
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  result = (pj::string *) & ((arg1)->codecId);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbCap_type_set___(void * jarg1, int jarg2) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pjmedia_rtcp_fb_type arg2 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  arg2 = (pjmedia_rtcp_fb_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbCap_type_get___(void * jarg1) {
  int jresult ;
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pjmedia_rtcp_fb_type result;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  result = (pjmedia_rtcp_fb_type) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbCap_typeName_set___(void * jarg1, char * jarg2) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->typeName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbCap_typeName_get___(void * jarg1) {
  char * jresult ;
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  result = (pj::string *) & ((arg1)->typeName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbCap_param_set___(void * jarg1, char * jarg2) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->param = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbCap_param_get___(void * jarg1) {
  char * jresult ;
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  result = (pj::string *) & ((arg1)->param);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_RtcpFbCap___() {
  void * jresult ;
  pj::RtcpFbCap *result = 0 ;
  
  result = (pj::RtcpFbCap *)new pj::RtcpFbCap();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_RtcpFbCap___(void * jarg1) {
  pj::RtcpFbCap *arg1 = (pj::RtcpFbCap *) 0 ;
  
  arg1 = (pj::RtcpFbCap *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbConfig_dontUseAvpf_set___(void * jarg1, unsigned int jarg2) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::RtcpFbConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->dontUseAvpf = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbConfig_dontUseAvpf_get___(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  bool result;
  
  arg1 = (pj::RtcpFbConfig *)jarg1; 
  result = (bool) ((arg1)->dontUseAvpf);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbConfig_caps_set___(void * jarg1, void * jarg2) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  pj::RtcpFbCapVector *arg2 = (pj::RtcpFbCapVector *) 0 ;
  
  arg1 = (pj::RtcpFbConfig *)jarg1; 
  arg2 = (pj::RtcpFbCapVector *)jarg2; 
  if (arg1) (arg1)->caps = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbConfig_caps_get___(void * jarg1) {
  void * jresult ;
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  pj::RtcpFbCapVector *result = 0 ;
  
  arg1 = (pj::RtcpFbConfig *)jarg1; 
  result = (pj::RtcpFbCapVector *)& ((arg1)->caps);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_RtcpFbConfig___() {
  void * jresult ;
  pj::RtcpFbConfig *result = 0 ;
  
  result = (pj::RtcpFbConfig *)new pj::RtcpFbConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbConfig_readObject___(void * jarg1, void * jarg2) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::RtcpFbConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::RtcpFbConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::RtcpFbConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_RtcpFbConfig___(void * jarg1) {
  pj::RtcpFbConfig *arg1 = (pj::RtcpFbConfig *) 0 ;
  
  arg1 = (pj::RtcpFbConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_transportConfig_set___(void * jarg1, void * jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::TransportConfig *arg2 = (pj::TransportConfig *) 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (pj::TransportConfig *)jarg2; 
  if (arg1) (arg1)->transportConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_transportConfig_get___(void * jarg1) {
  void * jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::TransportConfig *result = 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (pj::TransportConfig *)& ((arg1)->transportConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_lockCodecEnabled_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->lockCodecEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_lockCodecEnabled_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (bool) ((arg1)->lockCodecEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_streamKaEnabled_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->streamKaEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_streamKaEnabled_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (bool) ((arg1)->streamKaEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_srtpUse_set___(void * jarg1, int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjmedia_srtp_use arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (pjmedia_srtp_use)jarg2; 
  if (arg1) (arg1)->srtpUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_srtpUse_get___(void * jarg1) {
  int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjmedia_srtp_use result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (pjmedia_srtp_use) ((arg1)->srtpUse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_srtpSecureSignaling_set___(void * jarg1, int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->srtpSecureSignaling = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_srtpSecureSignaling_get___(void * jarg1) {
  int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (int) ((arg1)->srtpSecureSignaling);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_srtpOpt_set___(void * jarg1, void * jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::SrtpOpt *arg2 = (pj::SrtpOpt *) 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (pj::SrtpOpt *)jarg2; 
  if (arg1) (arg1)->srtpOpt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_srtpOpt_get___(void * jarg1) {
  void * jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::SrtpOpt *result = 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (pj::SrtpOpt *)& ((arg1)->srtpOpt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_ipv6Use_set___(void * jarg1, int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjsua_ipv6_use arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (pjsua_ipv6_use)jarg2; 
  if (arg1) (arg1)->ipv6Use = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_ipv6Use_get___(void * jarg1) {
  int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pjsua_ipv6_use result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (pjsua_ipv6_use) ((arg1)->ipv6Use);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_rtcpMuxEnabled_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->rtcpMuxEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_rtcpMuxEnabled_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (bool) ((arg1)->rtcpMuxEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_rtcpFbConfig_set___(void * jarg1, void * jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::RtcpFbConfig *arg2 = (pj::RtcpFbConfig *) 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (pj::RtcpFbConfig *)jarg2; 
  if (arg1) (arg1)->rtcpFbConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_rtcpFbConfig_get___(void * jarg1) {
  void * jresult ;
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::RtcpFbConfig *result = 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  result = (pj::RtcpFbConfig *)& ((arg1)->rtcpFbConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_readObject___(void * jarg1, void * jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::AccountMediaConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AccountMediaConfig___() {
  void * jresult ;
  pj::AccountMediaConfig *result = 0 ;
  
  result = (pj::AccountMediaConfig *)new pj::AccountMediaConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AccountMediaConfig___(void * jarg1) {
  pj::AccountMediaConfig *arg1 = (pj::AccountMediaConfig *) 0 ;
  
  arg1 = (pj::AccountMediaConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_autoShowIncoming_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoShowIncoming = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_autoShowIncoming_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (bool) ((arg1)->autoShowIncoming);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_autoTransmitOutgoing_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->autoTransmitOutgoing = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_autoTransmitOutgoing_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (bool) ((arg1)->autoTransmitOutgoing);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_windowFlags_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->windowFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_windowFlags_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (unsigned int) ((arg1)->windowFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_defaultCaptureDevice_set___(void * jarg1, int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->defaultCaptureDevice = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_defaultCaptureDevice_get___(void * jarg1) {
  int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->defaultCaptureDevice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_defaultRenderDevice_set___(void * jarg1, int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->defaultRenderDevice = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_defaultRenderDevice_get___(void * jarg1) {
  int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_dev_index result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->defaultRenderDevice);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_rateControlMethod_set___(void * jarg1, int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_stream_rc_method arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (pjmedia_vid_stream_rc_method)jarg2; 
  if (arg1) (arg1)->rateControlMethod = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_rateControlMethod_get___(void * jarg1) {
  int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pjmedia_vid_stream_rc_method result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (pjmedia_vid_stream_rc_method) ((arg1)->rateControlMethod);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_rateControlBandwidth_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->rateControlBandwidth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_rateControlBandwidth_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (unsigned int) ((arg1)->rateControlBandwidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_startKeyframeCount_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->startKeyframeCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_startKeyframeCount_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (unsigned int) ((arg1)->startKeyframeCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_startKeyframeInterval_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->startKeyframeInterval = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_startKeyframeInterval_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  result = (unsigned int) ((arg1)->startKeyframeInterval);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_readObject___(void * jarg1, void * jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::AccountVideoConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AccountVideoConfig___() {
  void * jresult ;
  pj::AccountVideoConfig *result = 0 ;
  
  result = (pj::AccountVideoConfig *)new pj::AccountVideoConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AccountVideoConfig___(void * jarg1) {
  pj::AccountVideoConfig *arg1 = (pj::AccountVideoConfig *) 0 ;
  
  arg1 = (pj::AccountVideoConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountIpChangeConfig_shutdownTp_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->shutdownTp = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountIpChangeConfig_shutdownTp_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  result = (bool) ((arg1)->shutdownTp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountIpChangeConfig_hangupCalls_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hangupCalls = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountIpChangeConfig_hangupCalls_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  bool result;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  result = (bool) ((arg1)->hangupCalls);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountIpChangeConfig_reinviteFlags_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->reinviteFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountIpChangeConfig_reinviteFlags_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  result = (unsigned int) ((arg1)->reinviteFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AccountIpChangeConfig___(void * jarg1) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountIpChangeConfig_readObject___(void * jarg1, void * jarg2) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountIpChangeConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::AccountIpChangeConfig *arg1 = (pj::AccountIpChangeConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountIpChangeConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::AccountIpChangeConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AccountIpChangeConfig___() {
  void * jresult ;
  pj::AccountIpChangeConfig *result = 0 ;
  
  result = (pj::AccountIpChangeConfig *)new pj::AccountIpChangeConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_priority_set___(void * jarg1, int jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->priority = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_priority_get___(void * jarg1) {
  int jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  int result;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (int) ((arg1)->priority);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_idUri_set___(void * jarg1, char * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->idUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_idUri_get___(void * jarg1) {
  char * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->idUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_regConfig_set___(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountRegConfig *arg2 = (pj::AccountRegConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountRegConfig *)jarg2; 
  if (arg1) (arg1)->regConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_regConfig_get___(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountRegConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountRegConfig *)& ((arg1)->regConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_sipConfig_set___(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountSipConfig *arg2 = (pj::AccountSipConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountSipConfig *)jarg2; 
  if (arg1) (arg1)->sipConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_sipConfig_get___(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountSipConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountSipConfig *)& ((arg1)->sipConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_callConfig_set___(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountCallConfig *arg2 = (pj::AccountCallConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountCallConfig *)jarg2; 
  if (arg1) (arg1)->callConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_callConfig_get___(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountCallConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountCallConfig *)& ((arg1)->callConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_presConfig_set___(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountPresConfig *arg2 = (pj::AccountPresConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountPresConfig *)jarg2; 
  if (arg1) (arg1)->presConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_presConfig_get___(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountPresConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountPresConfig *)& ((arg1)->presConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_mwiConfig_set___(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMwiConfig *arg2 = (pj::AccountMwiConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountMwiConfig *)jarg2; 
  if (arg1) (arg1)->mwiConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_mwiConfig_get___(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMwiConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountMwiConfig *)& ((arg1)->mwiConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_natConfig_set___(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountNatConfig *arg2 = (pj::AccountNatConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountNatConfig *)jarg2; 
  if (arg1) (arg1)->natConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_natConfig_get___(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountNatConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountNatConfig *)& ((arg1)->natConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_mediaConfig_set___(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMediaConfig *arg2 = (pj::AccountMediaConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountMediaConfig *)jarg2; 
  if (arg1) (arg1)->mediaConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_mediaConfig_get___(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountMediaConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountMediaConfig *)& ((arg1)->mediaConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_videoConfig_set___(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountVideoConfig *arg2 = (pj::AccountVideoConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountVideoConfig *)jarg2; 
  if (arg1) (arg1)->videoConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_videoConfig_get___(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountVideoConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountVideoConfig *)& ((arg1)->videoConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_ipChangeConfig_set___(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountIpChangeConfig *arg2 = (pj::AccountIpChangeConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::AccountIpChangeConfig *)jarg2; 
  if (arg1) (arg1)->ipChangeConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_ipChangeConfig_get___(void * jarg1) {
  void * jresult ;
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::AccountIpChangeConfig *result = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  result = (pj::AccountIpChangeConfig *)& ((arg1)->ipChangeConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AccountConfig___() {
  void * jresult ;
  pj::AccountConfig *result = 0 ;
  
  result = (pj::AccountConfig *)new pj::AccountConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_readObject___(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::AccountConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AccountConfig___(void * jarg1) {
  pj::AccountConfig *arg1 = (pj::AccountConfig *) 0 ;
  
  arg1 = (pj::AccountConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_id_set___(void * jarg1, int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsua_acc_id arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = (pjsua_acc_id)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_id_get___(void * jarg1) {
  int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsua_acc_id result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (pjsua_acc_id) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_isDefault_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isDefault = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_isDefault_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (bool) ((arg1)->isDefault);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_uri_set___(void * jarg1, char * jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->uri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_uri_get___(void * jarg1) {
  char * jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->uri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_regIsConfigured_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->regIsConfigured = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_regIsConfigured_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (bool) ((arg1)->regIsConfigured);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_regIsActive_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->regIsActive = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_regIsActive_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (bool) ((arg1)->regIsActive);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_regExpiresSec_set___(void * jarg1, int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->regExpiresSec = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_regExpiresSec_get___(void * jarg1) {
  int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  int result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (int) ((arg1)->regExpiresSec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_regStatus_set___(void * jarg1, int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->regStatus = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_regStatus_get___(void * jarg1) {
  int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (pjsip_status_code) ((arg1)->regStatus);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_regStatusText_set___(void * jarg1, char * jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->regStatusText = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_regStatusText_get___(void * jarg1) {
  char * jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->regStatusText);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_regLastErr_set___(void * jarg1, int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->regLastErr = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_regLastErr_get___(void * jarg1) {
  int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (pj_status_t) ((arg1)->regLastErr);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_onlineStatus_set___(void * jarg1, unsigned int jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->onlineStatus = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_onlineStatus_get___(void * jarg1) {
  unsigned int jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  bool result;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (bool) ((arg1)->onlineStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_onlineStatusText_set___(void * jarg1, char * jarg2) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->onlineStatusText = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountInfo_onlineStatusText_get___(void * jarg1) {
  char * jresult ;
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->onlineStatusText);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_AccountInfo___() {
  void * jresult ;
  pj::AccountInfo *result = 0 ;
  
  result = (pj::AccountInfo *)new pj::AccountInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_AccountInfo___(void * jarg1) {
  pj::AccountInfo *arg1 = (pj::AccountInfo *) 0 ;
  
  arg1 = (pj::AccountInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingCallParam_callId_set___(void * jarg1, int jarg2) {
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::OnIncomingCallParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->callId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingCallParam_callId_get___(void * jarg1) {
  int jresult ;
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  int result;
  
  arg1 = (pj::OnIncomingCallParam *)jarg1; 
  result = (int) ((arg1)->callId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingCallParam_rdata_set___(void * jarg1, void * jarg2) {
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnIncomingCallParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingCallParam_rdata_get___(void * jarg1) {
  void * jresult ;
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnIncomingCallParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnIncomingCallParam___() {
  void * jresult ;
  pj::OnIncomingCallParam *result = 0 ;
  
  result = (pj::OnIncomingCallParam *)new pj::OnIncomingCallParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnIncomingCallParam___(void * jarg1) {
  pj::OnIncomingCallParam *arg1 = (pj::OnIncomingCallParam *) 0 ;
  
  arg1 = (pj::OnIncomingCallParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnRegStartedParam_renew_set___(void * jarg1, unsigned int jarg2) {
  pj::OnRegStartedParam *arg1 = (pj::OnRegStartedParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::OnRegStartedParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->renew = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnRegStartedParam_renew_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnRegStartedParam *arg1 = (pj::OnRegStartedParam *) 0 ;
  bool result;
  
  arg1 = (pj::OnRegStartedParam *)jarg1; 
  result = (bool) ((arg1)->renew);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnRegStartedParam___() {
  void * jresult ;
  pj::OnRegStartedParam *result = 0 ;
  
  result = (pj::OnRegStartedParam *)new pj::OnRegStartedParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnRegStartedParam___(void * jarg1) {
  pj::OnRegStartedParam *arg1 = (pj::OnRegStartedParam *) 0 ;
  
  arg1 = (pj::OnRegStartedParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnRegStateParam_status_set___(void * jarg1, int jarg2) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnRegStateParam_status_get___(void * jarg1) {
  int jresult ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnRegStateParam_code_set___(void * jarg1, int jarg2) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnRegStateParam_code_get___(void * jarg1) {
  int jresult ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->code);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnRegStateParam_reason_set___(void * jarg1, char * jarg2) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnRegStateParam_reason_get___(void * jarg1) {
  char * jresult ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnRegStateParam_rdata_set___(void * jarg1, void * jarg2) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnRegStateParam_rdata_get___(void * jarg1) {
  void * jresult ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnRegStateParam_expiration_set___(void * jarg1, int jarg2) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->expiration = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnRegStateParam_expiration_get___(void * jarg1) {
  int jresult ;
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  int result;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  result = (int) ((arg1)->expiration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnRegStateParam___() {
  void * jresult ;
  pj::OnRegStateParam *result = 0 ;
  
  result = (pj::OnRegStateParam *)new pj::OnRegStateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnRegStateParam___(void * jarg1) {
  pj::OnRegStateParam *arg1 = (pj::OnRegStateParam *) 0 ;
  
  arg1 = (pj::OnRegStateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingSubscribeParam_srvPres_set___(void * jarg1, void * jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->srvPres = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingSubscribeParam_srvPres_get___(void * jarg1) {
  void * jresult ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  result = (void *) ((arg1)->srvPres);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingSubscribeParam_fromUri_set___(void * jarg1, char * jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->fromUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingSubscribeParam_fromUri_get___(void * jarg1) {
  char * jresult ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  result = (pj::string *) & ((arg1)->fromUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingSubscribeParam_rdata_set___(void * jarg1, void * jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingSubscribeParam_rdata_get___(void * jarg1) {
  void * jresult ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingSubscribeParam_code_set___(void * jarg1, int jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingSubscribeParam_code_get___(void * jarg1) {
  int jresult ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->code);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingSubscribeParam_reason_set___(void * jarg1, char * jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingSubscribeParam_reason_get___(void * jarg1) {
  char * jresult ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingSubscribeParam_txOption_set___(void * jarg1, void * jarg2) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  arg2 = (pj::SipTxOption *)jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIncomingSubscribeParam_txOption_get___(void * jarg1) {
  void * jresult ;
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnIncomingSubscribeParam___() {
  void * jresult ;
  pj::OnIncomingSubscribeParam *result = 0 ;
  
  result = (pj::OnIncomingSubscribeParam *)new pj::OnIncomingSubscribeParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnIncomingSubscribeParam___(void * jarg1) {
  pj::OnIncomingSubscribeParam *arg1 = (pj::OnIncomingSubscribeParam *) 0 ;
  
  arg1 = (pj::OnIncomingSubscribeParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageParam_fromUri_set___(void * jarg1, char * jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->fromUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageParam_fromUri_get___(void * jarg1) {
  char * jresult ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  result = (pj::string *) & ((arg1)->fromUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageParam_toUri_set___(void * jarg1, char * jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->toUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageParam_toUri_get___(void * jarg1) {
  char * jresult ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  result = (pj::string *) & ((arg1)->toUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageParam_contactUri_set___(void * jarg1, char * jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contactUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageParam_contactUri_get___(void * jarg1) {
  char * jresult ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  result = (pj::string *) & ((arg1)->contactUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageParam_contentType_set___(void * jarg1, char * jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contentType = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageParam_contentType_get___(void * jarg1) {
  char * jresult ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  result = (pj::string *) & ((arg1)->contentType);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageParam_msgBody_set___(void * jarg1, char * jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->msgBody = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageParam_msgBody_get___(void * jarg1) {
  char * jresult ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  result = (pj::string *) & ((arg1)->msgBody);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageParam_rdata_set___(void * jarg1, void * jarg2) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageParam_rdata_get___(void * jarg1) {
  void * jresult ;
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnInstantMessageParam___() {
  void * jresult ;
  pj::OnInstantMessageParam *result = 0 ;
  
  result = (pj::OnInstantMessageParam *)new pj::OnInstantMessageParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnInstantMessageParam___(void * jarg1) {
  pj::OnInstantMessageParam *arg1 = (pj::OnInstantMessageParam *) 0 ;
  
  arg1 = (pj::OnInstantMessageParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageStatusParam_userData_set___(void * jarg1, void * jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  arg2 = (pj::Token)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageStatusParam_userData_get___(void * jarg1) {
  void * jresult ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::Token result;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  result = (pj::Token) ((arg1)->userData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageStatusParam_toUri_set___(void * jarg1, char * jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->toUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageStatusParam_toUri_get___(void * jarg1) {
  char * jresult ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  result = (pj::string *) & ((arg1)->toUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageStatusParam_msgBody_set___(void * jarg1, char * jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->msgBody = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageStatusParam_msgBody_get___(void * jarg1) {
  char * jresult ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  result = (pj::string *) & ((arg1)->msgBody);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageStatusParam_code_set___(void * jarg1, int jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageStatusParam_code_get___(void * jarg1) {
  int jresult ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->code);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageStatusParam_reason_set___(void * jarg1, char * jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageStatusParam_reason_get___(void * jarg1) {
  char * jresult ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageStatusParam_rdata_set___(void * jarg1, void * jarg2) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnInstantMessageStatusParam_rdata_get___(void * jarg1) {
  void * jresult ;
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnInstantMessageStatusParam___() {
  void * jresult ;
  pj::OnInstantMessageStatusParam *result = 0 ;
  
  result = (pj::OnInstantMessageStatusParam *)new pj::OnInstantMessageStatusParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnInstantMessageStatusParam___(void * jarg1) {
  pj::OnInstantMessageStatusParam *arg1 = (pj::OnInstantMessageStatusParam *) 0 ;
  
  arg1 = (pj::OnInstantMessageStatusParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTypingIndicationParam_fromUri_set___(void * jarg1, char * jarg2) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->fromUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTypingIndicationParam_fromUri_get___(void * jarg1) {
  char * jresult ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  result = (pj::string *) & ((arg1)->fromUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTypingIndicationParam_toUri_set___(void * jarg1, char * jarg2) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->toUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTypingIndicationParam_toUri_get___(void * jarg1) {
  char * jresult ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  result = (pj::string *) & ((arg1)->toUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTypingIndicationParam_contactUri_set___(void * jarg1, char * jarg2) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contactUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTypingIndicationParam_contactUri_get___(void * jarg1) {
  char * jresult ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  result = (pj::string *) & ((arg1)->contactUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTypingIndicationParam_isTyping_set___(void * jarg1, unsigned int jarg2) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isTyping = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTypingIndicationParam_isTyping_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  bool result;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  result = (bool) ((arg1)->isTyping);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTypingIndicationParam_rdata_set___(void * jarg1, void * jarg2) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTypingIndicationParam_rdata_get___(void * jarg1) {
  void * jresult ;
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnTypingIndicationParam___() {
  void * jresult ;
  pj::OnTypingIndicationParam *result = 0 ;
  
  result = (pj::OnTypingIndicationParam *)new pj::OnTypingIndicationParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnTypingIndicationParam___(void * jarg1) {
  pj::OnTypingIndicationParam *arg1 = (pj::OnTypingIndicationParam *) 0 ;
  
  arg1 = (pj::OnTypingIndicationParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnMwiInfoParam_state_set___(void * jarg1, int jarg2) {
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pjsip_evsub_state arg2 ;
  
  arg1 = (pj::OnMwiInfoParam *)jarg1; 
  arg2 = (pjsip_evsub_state)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnMwiInfoParam_state_get___(void * jarg1) {
  int jresult ;
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pjsip_evsub_state result;
  
  arg1 = (pj::OnMwiInfoParam *)jarg1; 
  result = (pjsip_evsub_state) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnMwiInfoParam_rdata_set___(void * jarg1, void * jarg2) {
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnMwiInfoParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnMwiInfoParam_rdata_get___(void * jarg1) {
  void * jresult ;
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnMwiInfoParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnMwiInfoParam___() {
  void * jresult ;
  pj::OnMwiInfoParam *result = 0 ;
  
  result = (pj::OnMwiInfoParam *)new pj::OnMwiInfoParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnMwiInfoParam___(void * jarg1) {
  pj::OnMwiInfoParam *arg1 = (pj::OnMwiInfoParam *) 0 ;
  
  arg1 = (pj::OnMwiInfoParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresNotifyParam_srvPres_set___(void * jarg1, void * jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->srvPres = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresNotifyParam_srvPres_get___(void * jarg1) {
  void * jresult ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  result = (void *) ((arg1)->srvPres);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresNotifyParam_state_set___(void * jarg1, int jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pjsip_evsub_state arg2 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  arg2 = (pjsip_evsub_state)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresNotifyParam_state_get___(void * jarg1) {
  int jresult ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pjsip_evsub_state result;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  result = (pjsip_evsub_state) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresNotifyParam_stateStr_set___(void * jarg1, char * jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->stateStr = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresNotifyParam_stateStr_get___(void * jarg1) {
  char * jresult ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  result = (pj::string *) & ((arg1)->stateStr);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresNotifyParam_reason_set___(void * jarg1, char * jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresNotifyParam_reason_get___(void * jarg1) {
  char * jresult ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresNotifyParam_withBody_set___(void * jarg1, unsigned int jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->withBody = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresNotifyParam_withBody_get___(void * jarg1) {
  unsigned int jresult ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  bool result;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  result = (bool) ((arg1)->withBody);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresNotifyParam_txOption_set___(void * jarg1, void * jarg2) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  arg2 = (pj::SipTxOption *)jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PresNotifyParam_txOption_get___(void * jarg1) {
  void * jresult ;
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_PresNotifyParam___() {
  void * jresult ;
  pj::PresNotifyParam *result = 0 ;
  
  result = (pj::PresNotifyParam *)new pj::PresNotifyParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_PresNotifyParam___(void * jarg1) {
  pj::PresNotifyParam *arg1 = (pj::PresNotifyParam *) 0 ;
  
  arg1 = (pj::PresNotifyParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_FindBuddyMatch_match___(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  pj::FindBuddyMatch *arg1 = (pj::FindBuddyMatch *) 0 ;
  pj::string *arg2 = 0 ;
  pj::Buddy *arg3 = 0 ;
  bool result;
  
  arg1 = (pj::FindBuddyMatch *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::Buddy *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Buddy const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->match((pj::string const &)*arg2,(pj::Buddy const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_FindBuddyMatch_matchSwigExplicitFindBuddyMatch___(void * jarg1, char * jarg2, void * jarg3) {
  unsigned int jresult ;
  pj::FindBuddyMatch *arg1 = (pj::FindBuddyMatch *) 0 ;
  pj::string *arg2 = 0 ;
  pj::Buddy *arg3 = 0 ;
  bool result;
  
  arg1 = (pj::FindBuddyMatch *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::Buddy *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Buddy const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->pj::FindBuddyMatch::match((pj::string const &)*arg2,(pj::Buddy const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_FindBuddyMatch___(void * jarg1) {
  pj::FindBuddyMatch *arg1 = (pj::FindBuddyMatch *) 0 ;
  
  arg1 = (pj::FindBuddyMatch *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_FindBuddyMatch___() {
  void * jresult ;
  pj::FindBuddyMatch *result = 0 ;
  
  result = (pj::FindBuddyMatch *)new SwigDirector_FindBuddyMatch();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_FindBuddyMatch_director_connect___(void *objarg, SwigDirector_FindBuddyMatch::SWIG_Callback0_t callback0) {
  pj::FindBuddyMatch *obj = (pj::FindBuddyMatch *)objarg;
  SwigDirector_FindBuddyMatch *director = dynamic_cast<SwigDirector_FindBuddyMatch *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_Account___() {
  void * jresult ;
  pj::Account *result = 0 ;
  
  result = (pj::Account *)new SwigDirector_Account();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_Account___(void * jarg1) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_create__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountConfig *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::AccountConfig *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AccountConfig const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->create((pj::AccountConfig const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_create__SWIG_1___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountConfig *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::AccountConfig *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AccountConfig const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->create((pj::AccountConfig const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_shutdown___(void * jarg1) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  (arg1)->shutdown();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_modify___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountConfig *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::AccountConfig *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AccountConfig const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->modify((pj::AccountConfig const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_isValid___(void * jarg1) {
  unsigned int jresult ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  bool result;
  
  arg1 = (pj::Account *)jarg1; 
  result = (bool)((pj::Account const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_setDefault___(void * jarg1) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  try {
    (arg1)->setDefault();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_isDefault___(void * jarg1) {
  unsigned int jresult ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  bool result;
  
  arg1 = (pj::Account *)jarg1; 
  result = (bool)((pj::Account const *)arg1)->isDefault();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_getId___(void * jarg1) {
  int jresult ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  int result;
  
  arg1 = (pj::Account *)jarg1; 
  result = (int)((pj::Account const *)arg1)->getId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_lookup___(int jarg1) {
  void * jresult ;
  int arg1 ;
  pj::Account *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (pj::Account *)pj::Account::lookup(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_getInfo___(void * jarg1) {
  void * jresult ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::AccountInfo result;
  
  arg1 = (pj::Account *)jarg1; 
  try {
    result = ((pj::Account const *)arg1)->getInfo();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::AccountInfo((const pj::AccountInfo &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_setRegistration___(void * jarg1, unsigned int jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = jarg2 ? true : false; 
  try {
    (arg1)->setRegistration(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_setOnlineStatus___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::PresenceStatus *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::PresenceStatus *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::PresenceStatus const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->setOnlineStatus((pj::PresenceStatus const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_setTransport___(void * jarg1, int jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::TransportId arg2 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  try {
    (arg1)->setTransport(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_presNotify___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::PresNotifyParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::PresNotifyParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::PresNotifyParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->presNotify((pj::PresNotifyParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_enumBuddies___(void * jarg1) {
  void * jresult ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::BuddyVector *result = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  try {
    result = (pj::BuddyVector *) &((pj::Account const *)arg1)->enumBuddies();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_findBuddy__SWIG_0___(void * jarg1, char * jarg2, void * jarg3) {
  void * jresult ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::string arg2 ;
  pj::FindBuddyMatch *arg3 = (pj::FindBuddyMatch *) 0 ;
  pj::Buddy *result = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  arg3 = (pj::FindBuddyMatch *)jarg3; 
  try {
    result = (pj::Buddy *)((pj::Account const *)arg1)->findBuddy(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_findBuddy__SWIG_1___(void * jarg1, char * jarg2) {
  void * jresult ;
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::string arg2 ;
  pj::Buddy *result = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  try {
    result = (pj::Buddy *)((pj::Account const *)arg1)->findBuddy(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onIncomingCall___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnIncomingCallParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnIncomingCallParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnIncomingCallParam & type is null", 0);
    return ;
  } 
  (arg1)->onIncomingCall(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onIncomingCallSwigExplicitAccount___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnIncomingCallParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnIncomingCallParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnIncomingCallParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onIncomingCall(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onRegStarted___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnRegStartedParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnRegStartedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnRegStartedParam & type is null", 0);
    return ;
  } 
  (arg1)->onRegStarted(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onRegStartedSwigExplicitAccount___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnRegStartedParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnRegStartedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnRegStartedParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onRegStarted(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onRegState___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnRegStateParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnRegStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnRegStateParam & type is null", 0);
    return ;
  } 
  (arg1)->onRegState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onRegStateSwigExplicitAccount___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnRegStateParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnRegStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnRegStateParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onRegState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onIncomingSubscribe___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnIncomingSubscribeParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnIncomingSubscribeParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnIncomingSubscribeParam & type is null", 0);
    return ;
  } 
  (arg1)->onIncomingSubscribe(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onIncomingSubscribeSwigExplicitAccount___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnIncomingSubscribeParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnIncomingSubscribeParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnIncomingSubscribeParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onIncomingSubscribe(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onInstantMessage___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnInstantMessageParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnInstantMessageParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageParam & type is null", 0);
    return ;
  } 
  (arg1)->onInstantMessage(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onInstantMessageSwigExplicitAccount___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnInstantMessageParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnInstantMessageParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onInstantMessage(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onInstantMessageStatus___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnInstantMessageStatusParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnInstantMessageStatusParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageStatusParam & type is null", 0);
    return ;
  } 
  (arg1)->onInstantMessageStatus(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onInstantMessageStatusSwigExplicitAccount___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnInstantMessageStatusParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnInstantMessageStatusParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageStatusParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onInstantMessageStatus(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onTypingIndication___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnTypingIndicationParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnTypingIndicationParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTypingIndicationParam & type is null", 0);
    return ;
  } 
  (arg1)->onTypingIndication(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onTypingIndicationSwigExplicitAccount___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnTypingIndicationParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnTypingIndicationParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTypingIndicationParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onTypingIndication(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onMwiInfo___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnMwiInfoParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnMwiInfoParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnMwiInfoParam & type is null", 0);
    return ;
  } 
  (arg1)->onMwiInfo(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_onMwiInfoSwigExplicitAccount___(void * jarg1, void * jarg2) {
  pj::Account *arg1 = (pj::Account *) 0 ;
  pj::OnMwiInfoParam *arg2 = 0 ;
  
  arg1 = (pj::Account *)jarg1; 
  arg2 = (pj::OnMwiInfoParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnMwiInfoParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Account::onMwiInfo(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Account_director_connect___(void *objarg, SwigDirector_Account::SWIG_Callback0_t callback0, SwigDirector_Account::SWIG_Callback1_t callback1, SwigDirector_Account::SWIG_Callback2_t callback2, SwigDirector_Account::SWIG_Callback3_t callback3, SwigDirector_Account::SWIG_Callback4_t callback4, SwigDirector_Account::SWIG_Callback5_t callback5, SwigDirector_Account::SWIG_Callback6_t callback6, SwigDirector_Account::SWIG_Callback7_t callback7) {
  pj::Account *obj = (pj::Account *)objarg;
  SwigDirector_Account *director = dynamic_cast<SwigDirector_Account *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MathStat_n_set___(void * jarg1, int jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MathStat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->n = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MathStat_n_get___(void * jarg1) {
  int jresult ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  arg1 = (pj::MathStat *)jarg1; 
  result = (int) ((arg1)->n);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MathStat_max_set___(void * jarg1, int jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MathStat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MathStat_max_get___(void * jarg1) {
  int jresult ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  arg1 = (pj::MathStat *)jarg1; 
  result = (int) ((arg1)->max);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MathStat_min_set___(void * jarg1, int jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MathStat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MathStat_min_get___(void * jarg1) {
  int jresult ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  arg1 = (pj::MathStat *)jarg1; 
  result = (int) ((arg1)->min);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MathStat_last_set___(void * jarg1, int jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MathStat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->last = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MathStat_last_get___(void * jarg1) {
  int jresult ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  arg1 = (pj::MathStat *)jarg1; 
  result = (int) ((arg1)->last);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MathStat_mean_set___(void * jarg1, int jarg2) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MathStat *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->mean = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MathStat_mean_get___(void * jarg1) {
  int jresult ;
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  int result;
  
  arg1 = (pj::MathStat *)jarg1; 
  result = (int) ((arg1)->mean);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_MathStat___() {
  void * jresult ;
  pj::MathStat *result = 0 ;
  
  result = (pj::MathStat *)new pj::MathStat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_MathStat___(void * jarg1) {
  pj::MathStat *arg1 = (pj::MathStat *) 0 ;
  
  arg1 = (pj::MathStat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LossType_burst_set___(void * jarg1, unsigned int jarg2) {
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::LossType *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->burst = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LossType_burst_get___(void * jarg1) {
  unsigned int jresult ;
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  unsigned int result;
  
  arg1 = (pj::LossType *)jarg1; 
  result = (unsigned int) ((arg1)->burst);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LossType_random_set___(void * jarg1, unsigned int jarg2) {
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::LossType *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->random = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LossType_random_get___(void * jarg1) {
  unsigned int jresult ;
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  unsigned int result;
  
  arg1 = (pj::LossType *)jarg1; 
  result = (unsigned int) ((arg1)->random);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_LossType___() {
  void * jresult ;
  pj::LossType *result = 0 ;
  
  result = (pj::LossType *)new pj::LossType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_LossType___(void * jarg1) {
  pj::LossType *arg1 = (pj::LossType *) 0 ;
  
  arg1 = (pj::LossType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_update_set___(void * jarg1, void * jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (pj::TimeVal *)jarg2; 
  if (arg1) (arg1)->update = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_update_get___(void * jarg1) {
  void * jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::TimeVal *result = 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (pj::TimeVal *)& ((arg1)->update);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_updateCount_set___(void * jarg1, unsigned int jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->updateCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_updateCount_get___(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (unsigned int) ((arg1)->updateCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_pkt_set___(void * jarg1, unsigned int jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->pkt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_pkt_get___(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (unsigned int) ((arg1)->pkt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_bytes_set___(void * jarg1, unsigned int jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->bytes = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_bytes_get___(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (unsigned int) ((arg1)->bytes);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_discard_set___(void * jarg1, unsigned int jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->discard = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_discard_get___(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (unsigned int) ((arg1)->discard);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_loss_set___(void * jarg1, unsigned int jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->loss = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_loss_get___(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (unsigned int) ((arg1)->loss);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_reorder_set___(void * jarg1, unsigned int jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->reorder = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_reorder_get___(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (unsigned int) ((arg1)->reorder);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_dup_set___(void * jarg1, unsigned int jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->dup = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_dup_get___(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  unsigned int result;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (unsigned int) ((arg1)->dup);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_lossPeriodUsec_set___(void * jarg1, void * jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (pj::MathStat *)jarg2; 
  if (arg1) (arg1)->lossPeriodUsec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_lossPeriodUsec_get___(void * jarg1) {
  void * jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (pj::MathStat *)& ((arg1)->lossPeriodUsec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_lossType_set___(void * jarg1, void * jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::LossType *arg2 = (pj::LossType *) 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (pj::LossType *)jarg2; 
  if (arg1) (arg1)->lossType = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_lossType_get___(void * jarg1) {
  void * jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::LossType *result = 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (pj::LossType *)& ((arg1)->lossType);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_jitterUsec_set___(void * jarg1, void * jarg2) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  arg2 = (pj::MathStat *)jarg2; 
  if (arg1) (arg1)->jitterUsec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStreamStat_jitterUsec_get___(void * jarg1) {
  void * jresult ;
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  result = (pj::MathStat *)& ((arg1)->jitterUsec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_RtcpStreamStat___() {
  void * jresult ;
  pj::RtcpStreamStat *result = 0 ;
  
  result = (pj::RtcpStreamStat *)new pj::RtcpStreamStat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_RtcpStreamStat___(void * jarg1) {
  pj::RtcpStreamStat *arg1 = (pj::RtcpStreamStat *) 0 ;
  
  arg1 = (pj::RtcpStreamStat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpSdes_cname_set___(void * jarg1, char * jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->cname = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpSdes_cname_get___(void * jarg1) {
  char * jresult ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  result = (pj::string *) & ((arg1)->cname);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpSdes_name_set___(void * jarg1, char * jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpSdes_name_get___(void * jarg1) {
  char * jresult ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpSdes_email_set___(void * jarg1, char * jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->email = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpSdes_email_get___(void * jarg1) {
  char * jresult ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  result = (pj::string *) & ((arg1)->email);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpSdes_phone_set___(void * jarg1, char * jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->phone = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpSdes_phone_get___(void * jarg1) {
  char * jresult ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  result = (pj::string *) & ((arg1)->phone);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpSdes_loc_set___(void * jarg1, char * jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->loc = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpSdes_loc_get___(void * jarg1) {
  char * jresult ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  result = (pj::string *) & ((arg1)->loc);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpSdes_tool_set___(void * jarg1, char * jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->tool = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpSdes_tool_get___(void * jarg1) {
  char * jresult ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  result = (pj::string *) & ((arg1)->tool);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpSdes_note_set___(void * jarg1, char * jarg2) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->note = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpSdes_note_get___(void * jarg1) {
  char * jresult ;
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  result = (pj::string *) & ((arg1)->note);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_RtcpSdes___() {
  void * jresult ;
  pj::RtcpSdes *result = 0 ;
  
  result = (pj::RtcpSdes *)new pj::RtcpSdes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_RtcpSdes___(void * jarg1) {
  pj::RtcpSdes *arg1 = (pj::RtcpSdes *) 0 ;
  
  arg1 = (pj::RtcpSdes *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_start_set___(void * jarg1, void * jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj::TimeVal *)jarg2; 
  if (arg1) (arg1)->start = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_start_get___(void * jarg1) {
  void * jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::TimeVal *result = 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj::TimeVal *)& ((arg1)->start);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_txStat_set___(void * jarg1, void * jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *arg2 = (pj::RtcpStreamStat *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj::RtcpStreamStat *)jarg2; 
  if (arg1) (arg1)->txStat = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_txStat_get___(void * jarg1) {
  void * jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *result = 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj::RtcpStreamStat *)& ((arg1)->txStat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_rxStat_set___(void * jarg1, void * jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *arg2 = (pj::RtcpStreamStat *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj::RtcpStreamStat *)jarg2; 
  if (arg1) (arg1)->rxStat = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_rxStat_get___(void * jarg1) {
  void * jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpStreamStat *result = 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj::RtcpStreamStat *)& ((arg1)->rxStat);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_rttUsec_set___(void * jarg1, void * jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj::MathStat *)jarg2; 
  if (arg1) (arg1)->rttUsec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_rttUsec_get___(void * jarg1) {
  void * jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj::MathStat *)& ((arg1)->rttUsec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_rtpTxLastTs_set___(void * jarg1, unsigned int jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint32_t arg2 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj_uint32_t)jarg2; 
  if (arg1) (arg1)->rtpTxLastTs = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_rtpTxLastTs_get___(void * jarg1) {
  unsigned int jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint32_t result;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj_uint32_t) ((arg1)->rtpTxLastTs);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_rtpTxLastSeq_set___(void * jarg1, unsigned short jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint16_t arg2 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj_uint16_t)jarg2; 
  if (arg1) (arg1)->rtpTxLastSeq = arg2;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_rtpTxLastSeq_get___(void * jarg1) {
  unsigned short jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj_uint16_t result;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj_uint16_t) ((arg1)->rtpTxLastSeq);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_rxIpdvUsec_set___(void * jarg1, void * jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj::MathStat *)jarg2; 
  if (arg1) (arg1)->rxIpdvUsec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_rxIpdvUsec_get___(void * jarg1) {
  void * jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj::MathStat *)& ((arg1)->rxIpdvUsec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_rxRawJitterUsec_set___(void * jarg1, void * jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *arg2 = (pj::MathStat *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj::MathStat *)jarg2; 
  if (arg1) (arg1)->rxRawJitterUsec = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_rxRawJitterUsec_get___(void * jarg1) {
  void * jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::MathStat *result = 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj::MathStat *)& ((arg1)->rxRawJitterUsec);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_peerSdes_set___(void * jarg1, void * jarg2) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpSdes *arg2 = (pj::RtcpSdes *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  arg2 = (pj::RtcpSdes *)jarg2; 
  if (arg1) (arg1)->peerSdes = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpStat_peerSdes_get___(void * jarg1) {
  void * jresult ;
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  pj::RtcpSdes *result = 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  result = (pj::RtcpSdes *)& ((arg1)->peerSdes);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_RtcpStat___() {
  void * jresult ;
  pj::RtcpStat *result = 0 ;
  
  result = (pj::RtcpStat *)new pj::RtcpStat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_RtcpStat___(void * jarg1) {
  pj::RtcpStat *arg1 = (pj::RtcpStat *) 0 ;
  
  arg1 = (pj::RtcpStat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_frameSize_set___(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->frameSize = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_frameSize_get___(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->frameSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_minPrefetch_set___(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->minPrefetch = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_minPrefetch_get___(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->minPrefetch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_maxPrefetch_set___(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxPrefetch = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_maxPrefetch_get___(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->maxPrefetch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_burst_set___(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->burst = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_burst_get___(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->burst);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_prefetch_set___(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->prefetch = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_prefetch_get___(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->prefetch);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_size_set___(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_size_get___(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_avgDelayMsec_set___(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->avgDelayMsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_avgDelayMsec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->avgDelayMsec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_minDelayMsec_set___(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->minDelayMsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_minDelayMsec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->minDelayMsec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_maxDelayMsec_set___(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxDelayMsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_maxDelayMsec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->maxDelayMsec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_devDelayMsec_set___(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->devDelayMsec = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_devDelayMsec_get___(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->devDelayMsec);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_avgBurst_set___(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->avgBurst = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_avgBurst_get___(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->avgBurst);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_lost_set___(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->lost = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_lost_get___(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->lost);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_discard_set___(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->discard = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_discard_get___(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->discard);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_empty_set___(void * jarg1, unsigned int jarg2) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->empty = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JbufState_empty_get___(void * jarg1) {
  unsigned int jresult ;
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  unsigned int result;
  
  arg1 = (pj::JbufState *)jarg1; 
  result = (unsigned int) ((arg1)->empty);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_JbufState___() {
  void * jresult ;
  pj::JbufState *result = 0 ;
  
  result = (pj::JbufState *)new pj::JbufState();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_JbufState___(void * jarg1) {
  pj::JbufState *arg1 = (pj::JbufState *) 0 ;
  
  arg1 = (pj::JbufState *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SdpSession_wholeSdp_set___(void * jarg1, char * jarg2) {
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SdpSession *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->wholeSdp = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SdpSession_wholeSdp_get___(void * jarg1) {
  char * jresult ;
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SdpSession *)jarg1; 
  result = (pj::string *) & ((arg1)->wholeSdp);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SdpSession_pjSdpSession_set___(void * jarg1, void * jarg2) {
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::SdpSession *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pjSdpSession = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SdpSession_pjSdpSession_get___(void * jarg1) {
  void * jresult ;
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::SdpSession *)jarg1; 
  result = (void *) ((arg1)->pjSdpSession);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SdpSession___() {
  void * jresult ;
  pj::SdpSession *result = 0 ;
  
  result = (pj::SdpSession *)new pj::SdpSession();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SdpSession___(void * jarg1) {
  pj::SdpSession *arg1 = (pj::SdpSession *) 0 ;
  
  arg1 = (pj::SdpSession *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFmtChangedEvent_newWidth_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFmtChangedEvent *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->newWidth = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFmtChangedEvent_newWidth_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFmtChangedEvent *)jarg1; 
  result = (unsigned int) ((arg1)->newWidth);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFmtChangedEvent_newHeight_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaFmtChangedEvent *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->newHeight = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFmtChangedEvent_newHeight_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaFmtChangedEvent *)jarg1; 
  result = (unsigned int) ((arg1)->newHeight);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_MediaFmtChangedEvent___() {
  void * jresult ;
  pj::MediaFmtChangedEvent *result = 0 ;
  
  result = (pj::MediaFmtChangedEvent *)new pj::MediaFmtChangedEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_MediaFmtChangedEvent___(void * jarg1) {
  pj::MediaFmtChangedEvent *arg1 = (pj::MediaFmtChangedEvent *) 0 ;
  
  arg1 = (pj::MediaFmtChangedEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaEventData_fmtChanged_set___(void * jarg1, void * jarg2) {
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::MediaFmtChangedEvent *arg2 = (pj::MediaFmtChangedEvent *) 0 ;
  
  arg1 = (pj::MediaEventData *)jarg1; 
  arg2 = (pj::MediaFmtChangedEvent *)jarg2; 
  if (arg1) (arg1)->fmtChanged = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaEventData_fmtChanged_get___(void * jarg1) {
  void * jresult ;
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::MediaFmtChangedEvent *result = 0 ;
  
  arg1 = (pj::MediaEventData *)jarg1; 
  result = (pj::MediaFmtChangedEvent *)& ((arg1)->fmtChanged);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaEventData_ptr_set___(void * jarg1, void * jarg2) {
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::GenericData arg2 = (pj::GenericData) 0 ;
  
  arg1 = (pj::MediaEventData *)jarg1; 
  arg2 = (pj::GenericData)jarg2; 
  if (arg1) (arg1)->ptr = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaEventData_ptr_get___(void * jarg1) {
  void * jresult ;
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  pj::GenericData result;
  
  arg1 = (pj::MediaEventData *)jarg1; 
  result = (pj::GenericData) ((arg1)->ptr);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_MediaEventData___() {
  void * jresult ;
  pj::MediaEventData *result = 0 ;
  
  result = (pj::MediaEventData *)new pj::MediaEventData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_MediaEventData___(void * jarg1) {
  pj::MediaEventData *arg1 = (pj::MediaEventData *) 0 ;
  
  arg1 = (pj::MediaEventData *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaEvent_type_set___(void * jarg1, int jarg2) {
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  pjmedia_event_type arg2 ;
  
  arg1 = (pj::MediaEvent *)jarg1; 
  arg2 = (pjmedia_event_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaEvent_type_get___(void * jarg1) {
  int jresult ;
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  pjmedia_event_type result;
  
  arg1 = (pj::MediaEvent *)jarg1; 
  result = (pjmedia_event_type) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaEvent_data_set___(void * jarg1, void * jarg2) {
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  pj::MediaEventData *arg2 = (pj::MediaEventData *) 0 ;
  
  arg1 = (pj::MediaEvent *)jarg1; 
  arg2 = (pj::MediaEventData *)jarg2; 
  if (arg1) (arg1)->data = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaEvent_data_get___(void * jarg1) {
  void * jresult ;
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  pj::MediaEventData *result = 0 ;
  
  arg1 = (pj::MediaEvent *)jarg1; 
  result = (pj::MediaEventData *)& ((arg1)->data);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaEvent_pjMediaEvent_set___(void * jarg1, void * jarg2) {
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  void *arg2 = (void *) 0 ;
  
  arg1 = (pj::MediaEvent *)jarg1; 
  arg2 = (void *)jarg2; 
  if (arg1) (arg1)->pjMediaEvent = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaEvent_pjMediaEvent_get___(void * jarg1) {
  void * jresult ;
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  void *result = 0 ;
  
  arg1 = (pj::MediaEvent *)jarg1; 
  result = (void *) ((arg1)->pjMediaEvent);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_MediaEvent___() {
  void * jresult ;
  pj::MediaEvent *result = 0 ;
  
  result = (pj::MediaEvent *)new pj::MediaEvent();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_MediaEvent___(void * jarg1) {
  pj::MediaEvent *arg1 = (pj::MediaEvent *) 0 ;
  
  arg1 = (pj::MediaEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaTransportInfo_localRtpName_set___(void * jarg1, char * jarg2) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localRtpName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaTransportInfo_localRtpName_get___(void * jarg1) {
  char * jresult ;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localRtpName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaTransportInfo_localRtcpName_set___(void * jarg1, char * jarg2) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localRtcpName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaTransportInfo_localRtcpName_get___(void * jarg1) {
  char * jresult ;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localRtcpName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaTransportInfo_srcRtpName_set___(void * jarg1, char * jarg2) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->srcRtpName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaTransportInfo_srcRtpName_get___(void * jarg1) {
  char * jresult ;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->srcRtpName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaTransportInfo_srcRtcpName_set___(void * jarg1, char * jarg2) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->srcRtcpName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaTransportInfo_srcRtcpName_get___(void * jarg1) {
  char * jresult ;
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->srcRtcpName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_MediaTransportInfo___() {
  void * jresult ;
  pj::MediaTransportInfo *result = 0 ;
  
  result = (pj::MediaTransportInfo *)new pj::MediaTransportInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_MediaTransportInfo___(void * jarg1) {
  pj::MediaTransportInfo *arg1 = (pj::MediaTransportInfo *) 0 ;
  
  arg1 = (pj::MediaTransportInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSetting_flag_set___(void * jarg1, unsigned int jarg2) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallSetting *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->flag = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSetting_flag_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallSetting *)jarg1; 
  result = (unsigned int) ((arg1)->flag);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSetting_reqKeyframeMethod_set___(void * jarg1, unsigned int jarg2) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallSetting *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->reqKeyframeMethod = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSetting_reqKeyframeMethod_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallSetting *)jarg1; 
  result = (unsigned int) ((arg1)->reqKeyframeMethod);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSetting_audioCount_set___(void * jarg1, unsigned int jarg2) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallSetting *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->audioCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSetting_audioCount_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallSetting *)jarg1; 
  result = (unsigned int) ((arg1)->audioCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSetting_videoCount_set___(void * jarg1, unsigned int jarg2) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallSetting *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->videoCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSetting_videoCount_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallSetting *)jarg1; 
  result = (unsigned int) ((arg1)->videoCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CallSetting__SWIG_0___(void * jarg1) {
  void * jresult ;
  pj_bool_t arg1 ;
  pj_bool_t *argp1 ;
  pj::CallSetting *result = 0 ;
  
  argp1 = (pj_bool_t *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pj_bool_t", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (pj::CallSetting *)new pj::CallSetting(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CallSetting__SWIG_1___() {
  void * jresult ;
  pj::CallSetting *result = 0 ;
  
  result = (pj::CallSetting *)new pj::CallSetting();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSetting_isEmpty___(void * jarg1) {
  unsigned int jresult ;
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  bool result;
  
  arg1 = (pj::CallSetting *)jarg1; 
  result = (bool)((pj::CallSetting const *)arg1)->isEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CallSetting___(void * jarg1) {
  pj::CallSetting *arg1 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::CallSetting *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_index_set___(void * jarg1, unsigned int jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_index_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (unsigned int) ((arg1)->index);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_type_set___(void * jarg1, int jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_type arg2 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (pjmedia_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_type_get___(void * jarg1) {
  int jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_type result;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (pjmedia_type) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_dir_set___(void * jarg1, int jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_dir arg2 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_dir_get___(void * jarg1) {
  int jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_dir result;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_status_set___(void * jarg1, int jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_call_media_status arg2 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (pjsua_call_media_status)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_status_get___(void * jarg1) {
  int jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_call_media_status result;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (pjsua_call_media_status) ((arg1)->status);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_audioConfSlot_set___(void * jarg1, int jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  int arg2 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->audioConfSlot = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_audioConfSlot_get___(void * jarg1) {
  int jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  int result;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (int) ((arg1)->audioConfSlot);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_videoIncomingWindowId_set___(void * jarg1, int jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_vid_win_id arg2 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (pjsua_vid_win_id)jarg2; 
  if (arg1) (arg1)->videoIncomingWindowId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_videoIncomingWindowId_get___(void * jarg1) {
  int jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjsua_vid_win_id result;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (pjsua_vid_win_id) ((arg1)->videoIncomingWindowId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_videoWindow_set___(void * jarg1, void * jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pj::VideoWindow *arg2 = (pj::VideoWindow *) 0 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (pj::VideoWindow *)jarg2; 
  if (arg1) (arg1)->videoWindow = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_videoWindow_get___(void * jarg1) {
  void * jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pj::VideoWindow *result = 0 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (pj::VideoWindow *)& ((arg1)->videoWindow);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_videoCapDev_set___(void * jarg1, int jarg2) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->videoCapDev = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfo_videoCapDev_get___(void * jarg1) {
  int jresult ;
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  pjmedia_vid_dev_index result;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->videoCapDev);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CallMediaInfo___() {
  void * jresult ;
  pj::CallMediaInfo *result = 0 ;
  
  result = (pj::CallMediaInfo *)new pj::CallMediaInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CallMediaInfo___(void * jarg1) {
  pj::CallMediaInfo *arg1 = (pj::CallMediaInfo *) 0 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_id_set___(void * jarg1, int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_call_id arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pjsua_call_id)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_id_get___(void * jarg1) {
  int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_call_id result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pjsua_call_id) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_role_set___(void * jarg1, int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_role_e arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pjsip_role_e)jarg2; 
  if (arg1) (arg1)->role = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_role_get___(void * jarg1) {
  int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_role_e result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pjsip_role_e) ((arg1)->role);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_accId_set___(void * jarg1, int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_acc_id arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pjsua_acc_id)jarg2; 
  if (arg1) (arg1)->accId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_accId_get___(void * jarg1) {
  int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsua_acc_id result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pjsua_acc_id) ((arg1)->accId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_localUri_set___(void * jarg1, char * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_localUri_get___(void * jarg1) {
  char * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->localUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_localContact_set___(void * jarg1, char * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localContact = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_localContact_get___(void * jarg1) {
  char * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->localContact);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_remoteUri_set___(void * jarg1, char * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->remoteUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_remoteUri_get___(void * jarg1) {
  char * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->remoteUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_remoteContact_set___(void * jarg1, char * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->remoteContact = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_remoteContact_get___(void * jarg1) {
  char * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->remoteContact);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_callIdString_set___(void * jarg1, char * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->callIdString = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_callIdString_get___(void * jarg1) {
  char * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->callIdString);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_setting_set___(void * jarg1, void * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pj::CallSetting *)jarg2; 
  if (arg1) (arg1)->setting = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_setting_get___(void * jarg1) {
  void * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::CallSetting *)& ((arg1)->setting);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_state_set___(void * jarg1, int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_inv_state arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pjsip_inv_state)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_state_get___(void * jarg1) {
  int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_inv_state result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pjsip_inv_state) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_stateText_set___(void * jarg1, char * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->stateText = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_stateText_get___(void * jarg1) {
  char * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->stateText);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_lastStatusCode_set___(void * jarg1, int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->lastStatusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_lastStatusCode_get___(void * jarg1) {
  int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pjsip_status_code) ((arg1)->lastStatusCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_lastReason_set___(void * jarg1, char * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->lastReason = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_lastReason_get___(void * jarg1) {
  char * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->lastReason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_media_set___(void * jarg1, void * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *arg2 = (pj::CallMediaInfoVector *) 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pj::CallMediaInfoVector *)jarg2; 
  if (arg1) (arg1)->media = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_media_get___(void * jarg1) {
  void * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::CallMediaInfoVector *)& ((arg1)->media);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_provMedia_set___(void * jarg1, void * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *arg2 = (pj::CallMediaInfoVector *) 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pj::CallMediaInfoVector *)jarg2; 
  if (arg1) (arg1)->provMedia = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_provMedia_get___(void * jarg1) {
  void * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::CallMediaInfoVector *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::CallMediaInfoVector *)& ((arg1)->provMedia);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_connectDuration_set___(void * jarg1, void * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pj::TimeVal *)jarg2; 
  if (arg1) (arg1)->connectDuration = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_connectDuration_get___(void * jarg1) {
  void * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::TimeVal *)& ((arg1)->connectDuration);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_totalDuration_set___(void * jarg1, void * jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (pj::TimeVal *)jarg2; 
  if (arg1) (arg1)->totalDuration = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_totalDuration_get___(void * jarg1) {
  void * jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  pj::TimeVal *result = 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (pj::TimeVal *)& ((arg1)->totalDuration);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_remOfferer_set___(void * jarg1, unsigned int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->remOfferer = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_remOfferer_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  bool result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (bool) ((arg1)->remOfferer);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_remAudioCount_set___(void * jarg1, unsigned int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->remAudioCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_remAudioCount_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (unsigned int) ((arg1)->remAudioCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_remVideoCount_set___(void * jarg1, unsigned int jarg2) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->remVideoCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallInfo_remVideoCount_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallInfo *)jarg1; 
  result = (unsigned int) ((arg1)->remVideoCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CallInfo___() {
  void * jresult ;
  pj::CallInfo *result = 0 ;
  
  result = (pj::CallInfo *)new pj::CallInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CallInfo___(void * jarg1) {
  pj::CallInfo *arg1 = (pj::CallInfo *) 0 ;
  
  arg1 = (pj::CallInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_type_set___(void * jarg1, int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_type arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (pjmedia_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_type_get___(void * jarg1) {
  int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_type result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pjmedia_type) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_proto_set___(void * jarg1, int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_tp_proto arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (pjmedia_tp_proto)jarg2; 
  if (arg1) (arg1)->proto = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_proto_get___(void * jarg1) {
  int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_tp_proto result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pjmedia_tp_proto) ((arg1)->proto);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_dir_set___(void * jarg1, int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_dir arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_dir_get___(void * jarg1) {
  int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pjmedia_dir result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_remoteRtpAddress_set___(void * jarg1, char * jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->remoteRtpAddress = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_remoteRtpAddress_get___(void * jarg1) {
  char * jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->remoteRtpAddress);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_remoteRtcpAddress_set___(void * jarg1, char * jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->remoteRtcpAddress = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_remoteRtcpAddress_get___(void * jarg1) {
  char * jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->remoteRtcpAddress);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_txPt_set___(void * jarg1, unsigned int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->txPt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_txPt_get___(void * jarg1) {
  unsigned int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->txPt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_rxPt_set___(void * jarg1, unsigned int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->rxPt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_rxPt_get___(void * jarg1) {
  unsigned int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->rxPt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_codecName_set___(void * jarg1, char * jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->codecName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_codecName_get___(void * jarg1) {
  char * jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->codecName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_codecClockRate_set___(void * jarg1, unsigned int jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->codecClockRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_codecClockRate_get___(void * jarg1) {
  unsigned int jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (unsigned int) ((arg1)->codecClockRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_audCodecParam_set___(void * jarg1, void * jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::CodecParam *arg2 = (pj::CodecParam *) 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (pj::CodecParam *)jarg2; 
  if (arg1) (arg1)->audCodecParam = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_audCodecParam_get___(void * jarg1) {
  void * jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::CodecParam *result = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pj::CodecParam *)& ((arg1)->audCodecParam);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_vidCodecParam_set___(void * jarg1, void * jarg2) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::VidCodecParam *arg2 = (pj::VidCodecParam *) 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  arg2 = (pj::VidCodecParam *)jarg2; 
  if (arg1) (arg1)->vidCodecParam = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamInfo_vidCodecParam_get___(void * jarg1) {
  void * jresult ;
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  pj::VidCodecParam *result = 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  result = (pj::VidCodecParam *)& ((arg1)->vidCodecParam);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_StreamInfo___() {
  void * jresult ;
  pj::StreamInfo *result = 0 ;
  
  result = (pj::StreamInfo *)new pj::StreamInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_StreamInfo___(void * jarg1) {
  pj::StreamInfo *arg1 = (pj::StreamInfo *) 0 ;
  
  arg1 = (pj::StreamInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamStat_rtcp_set___(void * jarg1, void * jarg2) {
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::RtcpStat *arg2 = (pj::RtcpStat *) 0 ;
  
  arg1 = (pj::StreamStat *)jarg1; 
  arg2 = (pj::RtcpStat *)jarg2; 
  if (arg1) (arg1)->rtcp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamStat_rtcp_get___(void * jarg1) {
  void * jresult ;
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::RtcpStat *result = 0 ;
  
  arg1 = (pj::StreamStat *)jarg1; 
  result = (pj::RtcpStat *)& ((arg1)->rtcp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamStat_jbuf_set___(void * jarg1, void * jarg2) {
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::JbufState *arg2 = (pj::JbufState *) 0 ;
  
  arg1 = (pj::StreamStat *)jarg1; 
  arg2 = (pj::JbufState *)jarg2; 
  if (arg1) (arg1)->jbuf = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_StreamStat_jbuf_get___(void * jarg1) {
  void * jresult ;
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  pj::JbufState *result = 0 ;
  
  arg1 = (pj::StreamStat *)jarg1; 
  result = (pj::JbufState *)& ((arg1)->jbuf);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_StreamStat___() {
  void * jresult ;
  pj::StreamStat *result = 0 ;
  
  result = (pj::StreamStat *)new pj::StreamStat();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_StreamStat___(void * jarg1) {
  pj::StreamStat *arg1 = (pj::StreamStat *) 0 ;
  
  arg1 = (pj::StreamStat *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallStateParam_e_set___(void * jarg1, void * jarg2) {
  pj::OnCallStateParam *arg1 = (pj::OnCallStateParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  arg1 = (pj::OnCallStateParam *)jarg1; 
  arg2 = (pj::SipEvent *)jarg2; 
  if (arg1) (arg1)->e = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallStateParam_e_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallStateParam *arg1 = (pj::OnCallStateParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  arg1 = (pj::OnCallStateParam *)jarg1; 
  result = (pj::SipEvent *)& ((arg1)->e);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCallStateParam___() {
  void * jresult ;
  pj::OnCallStateParam *result = 0 ;
  
  result = (pj::OnCallStateParam *)new pj::OnCallStateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCallStateParam___(void * jarg1) {
  pj::OnCallStateParam *arg1 = (pj::OnCallStateParam *) 0 ;
  
  arg1 = (pj::OnCallStateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTsxStateParam_e_set___(void * jarg1, void * jarg2) {
  pj::OnCallTsxStateParam *arg1 = (pj::OnCallTsxStateParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  arg1 = (pj::OnCallTsxStateParam *)jarg1; 
  arg2 = (pj::SipEvent *)jarg2; 
  if (arg1) (arg1)->e = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTsxStateParam_e_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallTsxStateParam *arg1 = (pj::OnCallTsxStateParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  arg1 = (pj::OnCallTsxStateParam *)jarg1; 
  result = (pj::SipEvent *)& ((arg1)->e);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCallTsxStateParam___() {
  void * jresult ;
  pj::OnCallTsxStateParam *result = 0 ;
  
  result = (pj::OnCallTsxStateParam *)new pj::OnCallTsxStateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCallTsxStateParam___(void * jarg1) {
  pj::OnCallTsxStateParam *arg1 = (pj::OnCallTsxStateParam *) 0 ;
  
  arg1 = (pj::OnCallTsxStateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCallMediaStateParam___() {
  void * jresult ;
  pj::OnCallMediaStateParam *result = 0 ;
  
  result = (pj::OnCallMediaStateParam *)new pj::OnCallMediaStateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCallMediaStateParam___(void * jarg1) {
  pj::OnCallMediaStateParam *arg1 = (pj::OnCallMediaStateParam *) 0 ;
  
  arg1 = (pj::OnCallMediaStateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallSdpCreatedParam_sdp_set___(void * jarg1, void * jarg2) {
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  arg1 = (pj::OnCallSdpCreatedParam *)jarg1; 
  arg2 = (pj::SdpSession *)jarg2; 
  if (arg1) (arg1)->sdp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallSdpCreatedParam_sdp_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  arg1 = (pj::OnCallSdpCreatedParam *)jarg1; 
  result = (pj::SdpSession *)& ((arg1)->sdp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallSdpCreatedParam_remSdp_set___(void * jarg1, void * jarg2) {
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  arg1 = (pj::OnCallSdpCreatedParam *)jarg1; 
  arg2 = (pj::SdpSession *)jarg2; 
  if (arg1) (arg1)->remSdp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallSdpCreatedParam_remSdp_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  arg1 = (pj::OnCallSdpCreatedParam *)jarg1; 
  result = (pj::SdpSession *)& ((arg1)->remSdp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCallSdpCreatedParam___() {
  void * jresult ;
  pj::OnCallSdpCreatedParam *result = 0 ;
  
  result = (pj::OnCallSdpCreatedParam *)new pj::OnCallSdpCreatedParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCallSdpCreatedParam___(void * jarg1) {
  pj::OnCallSdpCreatedParam *arg1 = (pj::OnCallSdpCreatedParam *) 0 ;
  
  arg1 = (pj::OnCallSdpCreatedParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnStreamCreatedParam_stream_set___(void * jarg1, void * jarg2) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaStream arg2 = (pj::MediaStream) 0 ;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  arg2 = (pj::MediaStream)jarg2; 
  if (arg1) (arg1)->stream = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnStreamCreatedParam_stream_get___(void * jarg1) {
  void * jresult ;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaStream result;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  result = (pj::MediaStream) ((arg1)->stream);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnStreamCreatedParam_streamIdx_set___(void * jarg1, unsigned int jarg2) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->streamIdx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnStreamCreatedParam_streamIdx_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  result = (unsigned int) ((arg1)->streamIdx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnStreamCreatedParam_destroyPort_set___(void * jarg1, unsigned int jarg2) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->destroyPort = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnStreamCreatedParam_destroyPort_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  bool result;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  result = (bool) ((arg1)->destroyPort);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnStreamCreatedParam_pPort_set___(void * jarg1, void * jarg2) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaPort arg2 = (pj::MediaPort) 0 ;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  arg2 = (pj::MediaPort)jarg2; 
  if (arg1) (arg1)->pPort = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnStreamCreatedParam_pPort_get___(void * jarg1) {
  void * jresult ;
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  pj::MediaPort result;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  result = (pj::MediaPort) ((arg1)->pPort);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnStreamCreatedParam___() {
  void * jresult ;
  pj::OnStreamCreatedParam *result = 0 ;
  
  result = (pj::OnStreamCreatedParam *)new pj::OnStreamCreatedParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnStreamCreatedParam___(void * jarg1) {
  pj::OnStreamCreatedParam *arg1 = (pj::OnStreamCreatedParam *) 0 ;
  
  arg1 = (pj::OnStreamCreatedParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnStreamDestroyedParam_stream_set___(void * jarg1, void * jarg2) {
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  pj::MediaStream arg2 = (pj::MediaStream) 0 ;
  
  arg1 = (pj::OnStreamDestroyedParam *)jarg1; 
  arg2 = (pj::MediaStream)jarg2; 
  if (arg1) (arg1)->stream = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnStreamDestroyedParam_stream_get___(void * jarg1) {
  void * jresult ;
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  pj::MediaStream result;
  
  arg1 = (pj::OnStreamDestroyedParam *)jarg1; 
  result = (pj::MediaStream) ((arg1)->stream);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnStreamDestroyedParam_streamIdx_set___(void * jarg1, unsigned int jarg2) {
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnStreamDestroyedParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->streamIdx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnStreamDestroyedParam_streamIdx_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnStreamDestroyedParam *)jarg1; 
  result = (unsigned int) ((arg1)->streamIdx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnStreamDestroyedParam___() {
  void * jresult ;
  pj::OnStreamDestroyedParam *result = 0 ;
  
  result = (pj::OnStreamDestroyedParam *)new pj::OnStreamDestroyedParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnStreamDestroyedParam___(void * jarg1) {
  pj::OnStreamDestroyedParam *arg1 = (pj::OnStreamDestroyedParam *) 0 ;
  
  arg1 = (pj::OnStreamDestroyedParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnDtmfDigitParam_method_set___(void * jarg1, int jarg2) {
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  pjsua_dtmf_method arg2 ;
  
  arg1 = (pj::OnDtmfDigitParam *)jarg1; 
  arg2 = (pjsua_dtmf_method)jarg2; 
  if (arg1) (arg1)->method = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnDtmfDigitParam_method_get___(void * jarg1) {
  int jresult ;
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  pjsua_dtmf_method result;
  
  arg1 = (pj::OnDtmfDigitParam *)jarg1; 
  result = (pjsua_dtmf_method) ((arg1)->method);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnDtmfDigitParam_digit_set___(void * jarg1, char * jarg2) {
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnDtmfDigitParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->digit = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnDtmfDigitParam_digit_get___(void * jarg1) {
  char * jresult ;
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnDtmfDigitParam *)jarg1; 
  result = (pj::string *) & ((arg1)->digit);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnDtmfDigitParam_duration_set___(void * jarg1, unsigned int jarg2) {
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnDtmfDigitParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->duration = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnDtmfDigitParam_duration_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnDtmfDigitParam *)jarg1; 
  result = (unsigned int) ((arg1)->duration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnDtmfDigitParam___() {
  void * jresult ;
  pj::OnDtmfDigitParam *result = 0 ;
  
  result = (pj::OnDtmfDigitParam *)new pj::OnDtmfDigitParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnDtmfDigitParam___(void * jarg1) {
  pj::OnDtmfDigitParam *arg1 = (pj::OnDtmfDigitParam *) 0 ;
  
  arg1 = (pj::OnDtmfDigitParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTransferRequestParam_dstUri_set___(void * jarg1, char * jarg2) {
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->dstUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTransferRequestParam_dstUri_get___(void * jarg1) {
  char * jresult ;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  result = (pj::string *) & ((arg1)->dstUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTransferRequestParam_statusCode_set___(void * jarg1, int jarg2) {
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTransferRequestParam_statusCode_get___(void * jarg1) {
  int jresult ;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTransferRequestParam_opt_set___(void * jarg1, void * jarg2) {
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  arg2 = (pj::CallSetting *)jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTransferRequestParam_opt_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCallTransferRequestParam___() {
  void * jresult ;
  pj::OnCallTransferRequestParam *result = 0 ;
  
  result = (pj::OnCallTransferRequestParam *)new pj::OnCallTransferRequestParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCallTransferRequestParam___(void * jarg1) {
  pj::OnCallTransferRequestParam *arg1 = (pj::OnCallTransferRequestParam *) 0 ;
  
  arg1 = (pj::OnCallTransferRequestParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTransferStatusParam_statusCode_set___(void * jarg1, int jarg2) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTransferStatusParam_statusCode_get___(void * jarg1) {
  int jresult ;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTransferStatusParam_reason_set___(void * jarg1, char * jarg2) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTransferStatusParam_reason_get___(void * jarg1) {
  char * jresult ;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTransferStatusParam_finalNotify_set___(void * jarg1, unsigned int jarg2) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->finalNotify = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTransferStatusParam_finalNotify_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool result;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  result = (bool) ((arg1)->finalNotify);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTransferStatusParam_cont_set___(void * jarg1, unsigned int jarg2) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->cont = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTransferStatusParam_cont_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  bool result;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  result = (bool) ((arg1)->cont);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCallTransferStatusParam___() {
  void * jresult ;
  pj::OnCallTransferStatusParam *result = 0 ;
  
  result = (pj::OnCallTransferStatusParam *)new pj::OnCallTransferStatusParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCallTransferStatusParam___(void * jarg1) {
  pj::OnCallTransferStatusParam *arg1 = (pj::OnCallTransferStatusParam *) 0 ;
  
  arg1 = (pj::OnCallTransferStatusParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallReplaceRequestParam_rdata_set___(void * jarg1, void * jarg2) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallReplaceRequestParam_rdata_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallReplaceRequestParam_statusCode_set___(void * jarg1, int jarg2) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallReplaceRequestParam_statusCode_get___(void * jarg1) {
  int jresult ;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallReplaceRequestParam_reason_set___(void * jarg1, char * jarg2) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallReplaceRequestParam_reason_get___(void * jarg1) {
  char * jresult ;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallReplaceRequestParam_opt_set___(void * jarg1, void * jarg2) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  arg2 = (pj::CallSetting *)jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallReplaceRequestParam_opt_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCallReplaceRequestParam___() {
  void * jresult ;
  pj::OnCallReplaceRequestParam *result = 0 ;
  
  result = (pj::OnCallReplaceRequestParam *)new pj::OnCallReplaceRequestParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCallReplaceRequestParam___(void * jarg1) {
  pj::OnCallReplaceRequestParam *arg1 = (pj::OnCallReplaceRequestParam *) 0 ;
  
  arg1 = (pj::OnCallReplaceRequestParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallReplacedParam_newCallId_set___(void * jarg1, int jarg2) {
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  pjsua_call_id arg2 ;
  
  arg1 = (pj::OnCallReplacedParam *)jarg1; 
  arg2 = (pjsua_call_id)jarg2; 
  if (arg1) (arg1)->newCallId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallReplacedParam_newCallId_get___(void * jarg1) {
  int jresult ;
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  pjsua_call_id result;
  
  arg1 = (pj::OnCallReplacedParam *)jarg1; 
  result = (pjsua_call_id) ((arg1)->newCallId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCallReplacedParam___() {
  void * jresult ;
  pj::OnCallReplacedParam *result = 0 ;
  
  result = (pj::OnCallReplacedParam *)new pj::OnCallReplacedParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCallReplacedParam___(void * jarg1) {
  pj::OnCallReplacedParam *arg1 = (pj::OnCallReplacedParam *) 0 ;
  
  arg1 = (pj::OnCallReplacedParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxOfferParam_offer_set___(void * jarg1, void * jarg2) {
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  arg1 = (pj::OnCallRxOfferParam *)jarg1; 
  arg2 = (pj::SdpSession *)jarg2; 
  if (arg1) (arg1)->offer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxOfferParam_offer_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  arg1 = (pj::OnCallRxOfferParam *)jarg1; 
  result = (pj::SdpSession *)& ((arg1)->offer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxOfferParam_statusCode_set___(void * jarg1, int jarg2) {
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnCallRxOfferParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxOfferParam_statusCode_get___(void * jarg1) {
  int jresult ;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnCallRxOfferParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxOfferParam_opt_set___(void * jarg1, void * jarg2) {
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::OnCallRxOfferParam *)jarg1; 
  arg2 = (pj::CallSetting *)jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxOfferParam_opt_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = (pj::OnCallRxOfferParam *)jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCallRxOfferParam___() {
  void * jresult ;
  pj::OnCallRxOfferParam *result = 0 ;
  
  result = (pj::OnCallRxOfferParam *)new pj::OnCallRxOfferParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCallRxOfferParam___(void * jarg1) {
  pj::OnCallRxOfferParam *arg1 = (pj::OnCallRxOfferParam *) 0 ;
  
  arg1 = (pj::OnCallRxOfferParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxReinviteParam_offer_set___(void * jarg1, void * jarg2) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  arg2 = (pj::SdpSession *)jarg2; 
  if (arg1) (arg1)->offer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxReinviteParam_offer_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  result = (pj::SdpSession *)& ((arg1)->offer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxReinviteParam_rdata_set___(void * jarg1, void * jarg2) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxReinviteParam_rdata_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxReinviteParam_async_set___(void * jarg1, unsigned int jarg2) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->async = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxReinviteParam_async_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  bool result;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  result = (bool) ((arg1)->async);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxReinviteParam_statusCode_set___(void * jarg1, int jarg2) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxReinviteParam_statusCode_get___(void * jarg1) {
  int jresult ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxReinviteParam_opt_set___(void * jarg1, void * jarg2) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  arg2 = (pj::CallSetting *)jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRxReinviteParam_opt_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCallRxReinviteParam___() {
  void * jresult ;
  pj::OnCallRxReinviteParam *result = 0 ;
  
  result = (pj::OnCallRxReinviteParam *)new pj::OnCallRxReinviteParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCallRxReinviteParam___(void * jarg1) {
  pj::OnCallRxReinviteParam *arg1 = (pj::OnCallRxReinviteParam *) 0 ;
  
  arg1 = (pj::OnCallRxReinviteParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTxOfferParam_opt_set___(void * jarg1, void * jarg2) {
  pj::OnCallTxOfferParam *arg1 = (pj::OnCallTxOfferParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::OnCallTxOfferParam *)jarg1; 
  arg2 = (pj::CallSetting *)jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallTxOfferParam_opt_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallTxOfferParam *arg1 = (pj::OnCallTxOfferParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = (pj::OnCallTxOfferParam *)jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCallTxOfferParam___() {
  void * jresult ;
  pj::OnCallTxOfferParam *result = 0 ;
  
  result = (pj::OnCallTxOfferParam *)new pj::OnCallTxOfferParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCallTxOfferParam___(void * jarg1) {
  pj::OnCallTxOfferParam *arg1 = (pj::OnCallTxOfferParam *) 0 ;
  
  arg1 = (pj::OnCallTxOfferParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRedirectedParam_targetUri_set___(void * jarg1, char * jarg2) {
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnCallRedirectedParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->targetUri = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRedirectedParam_targetUri_get___(void * jarg1) {
  char * jresult ;
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnCallRedirectedParam *)jarg1; 
  result = (pj::string *) & ((arg1)->targetUri);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRedirectedParam_e_set___(void * jarg1, void * jarg2) {
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::SipEvent *arg2 = (pj::SipEvent *) 0 ;
  
  arg1 = (pj::OnCallRedirectedParam *)jarg1; 
  arg2 = (pj::SipEvent *)jarg2; 
  if (arg1) (arg1)->e = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallRedirectedParam_e_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  pj::SipEvent *result = 0 ;
  
  arg1 = (pj::OnCallRedirectedParam *)jarg1; 
  result = (pj::SipEvent *)& ((arg1)->e);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCallRedirectedParam___() {
  void * jresult ;
  pj::OnCallRedirectedParam *result = 0 ;
  
  result = (pj::OnCallRedirectedParam *)new pj::OnCallRedirectedParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCallRedirectedParam___(void * jarg1) {
  pj::OnCallRedirectedParam *arg1 = (pj::OnCallRedirectedParam *) 0 ;
  
  arg1 = (pj::OnCallRedirectedParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallMediaEventParam_medIdx_set___(void * jarg1, unsigned int jarg2) {
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnCallMediaEventParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->medIdx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallMediaEventParam_medIdx_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnCallMediaEventParam *)jarg1; 
  result = (unsigned int) ((arg1)->medIdx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallMediaEventParam_ev_set___(void * jarg1, void * jarg2) {
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  pj::MediaEvent *arg2 = (pj::MediaEvent *) 0 ;
  
  arg1 = (pj::OnCallMediaEventParam *)jarg1; 
  arg2 = (pj::MediaEvent *)jarg2; 
  if (arg1) (arg1)->ev = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallMediaEventParam_ev_get___(void * jarg1) {
  void * jresult ;
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  pj::MediaEvent *result = 0 ;
  
  arg1 = (pj::OnCallMediaEventParam *)jarg1; 
  result = (pj::MediaEvent *)& ((arg1)->ev);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCallMediaEventParam___() {
  void * jresult ;
  pj::OnCallMediaEventParam *result = 0 ;
  
  result = (pj::OnCallMediaEventParam *)new pj::OnCallMediaEventParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCallMediaEventParam___(void * jarg1) {
  pj::OnCallMediaEventParam *arg1 = (pj::OnCallMediaEventParam *) 0 ;
  
  arg1 = (pj::OnCallMediaEventParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallMediaTransportStateParam_medIdx_set___(void * jarg1, unsigned int jarg2) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->medIdx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallMediaTransportStateParam_medIdx_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  result = (unsigned int) ((arg1)->medIdx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallMediaTransportStateParam_state_set___(void * jarg1, int jarg2) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pjsua_med_tp_st arg2 ;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  arg2 = (pjsua_med_tp_st)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallMediaTransportStateParam_state_get___(void * jarg1) {
  int jresult ;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pjsua_med_tp_st result;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  result = (pjsua_med_tp_st) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallMediaTransportStateParam_status_set___(void * jarg1, int jarg2) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallMediaTransportStateParam_status_get___(void * jarg1) {
  int jresult ;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallMediaTransportStateParam_sipErrorCode_set___(void * jarg1, int jarg2) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sipErrorCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCallMediaTransportStateParam_sipErrorCode_get___(void * jarg1) {
  int jresult ;
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  int result;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  result = (int) ((arg1)->sipErrorCode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCallMediaTransportStateParam___() {
  void * jresult ;
  pj::OnCallMediaTransportStateParam *result = 0 ;
  
  result = (pj::OnCallMediaTransportStateParam *)new pj::OnCallMediaTransportStateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCallMediaTransportStateParam___(void * jarg1) {
  pj::OnCallMediaTransportStateParam *arg1 = (pj::OnCallMediaTransportStateParam *) 0 ;
  
  arg1 = (pj::OnCallMediaTransportStateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCreateMediaTransportParam_mediaIdx_set___(void * jarg1, unsigned int jarg2) {
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnCreateMediaTransportParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mediaIdx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCreateMediaTransportParam_mediaIdx_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnCreateMediaTransportParam *)jarg1; 
  result = (unsigned int) ((arg1)->mediaIdx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCreateMediaTransportParam_mediaTp_set___(void * jarg1, void * jarg2) {
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  pj::MediaTransport arg2 = (pj::MediaTransport) 0 ;
  
  arg1 = (pj::OnCreateMediaTransportParam *)jarg1; 
  arg2 = (pj::MediaTransport)jarg2; 
  if (arg1) (arg1)->mediaTp = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCreateMediaTransportParam_mediaTp_get___(void * jarg1) {
  void * jresult ;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  pj::MediaTransport result;
  
  arg1 = (pj::OnCreateMediaTransportParam *)jarg1; 
  result = (pj::MediaTransport) ((arg1)->mediaTp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCreateMediaTransportParam_flags_set___(void * jarg1, unsigned int jarg2) {
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnCreateMediaTransportParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->flags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCreateMediaTransportParam_flags_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnCreateMediaTransportParam *)jarg1; 
  result = (unsigned int) ((arg1)->flags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCreateMediaTransportParam___() {
  void * jresult ;
  pj::OnCreateMediaTransportParam *result = 0 ;
  
  result = (pj::OnCreateMediaTransportParam *)new pj::OnCreateMediaTransportParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCreateMediaTransportParam___(void * jarg1) {
  pj::OnCreateMediaTransportParam *arg1 = (pj::OnCreateMediaTransportParam *) 0 ;
  
  arg1 = (pj::OnCreateMediaTransportParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCreateMediaTransportSrtpParam_mediaIdx_set___(void * jarg1, unsigned int jarg2) {
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnCreateMediaTransportSrtpParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->mediaIdx = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCreateMediaTransportSrtpParam_mediaIdx_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnCreateMediaTransportSrtpParam *)jarg1; 
  result = (unsigned int) ((arg1)->mediaIdx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCreateMediaTransportSrtpParam_srtpUse_set___(void * jarg1, int jarg2) {
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  pjmedia_srtp_use arg2 ;
  
  arg1 = (pj::OnCreateMediaTransportSrtpParam *)jarg1; 
  arg2 = (pjmedia_srtp_use)jarg2; 
  if (arg1) (arg1)->srtpUse = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCreateMediaTransportSrtpParam_srtpUse_get___(void * jarg1) {
  int jresult ;
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  pjmedia_srtp_use result;
  
  arg1 = (pj::OnCreateMediaTransportSrtpParam *)jarg1; 
  result = (pjmedia_srtp_use) ((arg1)->srtpUse);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCreateMediaTransportSrtpParam_cryptos_set___(void * jarg1, void * jarg2) {
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  vector< pj::SrtpCrypto > *arg2 = (vector< pj::SrtpCrypto > *) 0 ;
  
  arg1 = (pj::OnCreateMediaTransportSrtpParam *)jarg1; 
  arg2 = (vector< pj::SrtpCrypto > *)jarg2; 
  if (arg1) (arg1)->cryptos = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnCreateMediaTransportSrtpParam_cryptos_get___(void * jarg1) {
  void * jresult ;
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  vector< pj::SrtpCrypto > *result = 0 ;
  
  arg1 = (pj::OnCreateMediaTransportSrtpParam *)jarg1; 
  result = (vector< pj::SrtpCrypto > *)& ((arg1)->cryptos);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnCreateMediaTransportSrtpParam___() {
  void * jresult ;
  pj::OnCreateMediaTransportSrtpParam *result = 0 ;
  
  result = (pj::OnCreateMediaTransportSrtpParam *)new pj::OnCreateMediaTransportSrtpParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnCreateMediaTransportSrtpParam___(void * jarg1) {
  pj::OnCreateMediaTransportSrtpParam *arg1 = (pj::OnCreateMediaTransportSrtpParam *) 0 ;
  
  arg1 = (pj::OnCreateMediaTransportSrtpParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallOpParam_opt_set___(void * jarg1, void * jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::CallSetting *arg2 = (pj::CallSetting *) 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  arg2 = (pj::CallSetting *)jarg2; 
  if (arg1) (arg1)->opt = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallOpParam_opt_get___(void * jarg1) {
  void * jresult ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::CallSetting *result = 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  result = (pj::CallSetting *)& ((arg1)->opt);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallOpParam_statusCode_set___(void * jarg1, int jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pjsip_status_code arg2 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  arg2 = (pjsip_status_code)jarg2; 
  if (arg1) (arg1)->statusCode = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallOpParam_statusCode_get___(void * jarg1) {
  int jresult ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pjsip_status_code result;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  result = (pjsip_status_code) ((arg1)->statusCode);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallOpParam_reason_set___(void * jarg1, char * jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallOpParam_reason_get___(void * jarg1) {
  char * jresult ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallOpParam_options_set___(void * jarg1, unsigned int jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->options = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallOpParam_options_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  result = (unsigned int) ((arg1)->options);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallOpParam_txOption_set___(void * jarg1, void * jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  arg2 = (pj::SipTxOption *)jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallOpParam_txOption_get___(void * jarg1) {
  void * jresult ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallOpParam_sdp_set___(void * jarg1, void * jarg2) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::SdpSession *arg2 = (pj::SdpSession *) 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  arg2 = (pj::SdpSession *)jarg2; 
  if (arg1) (arg1)->sdp = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallOpParam_sdp_get___(void * jarg1) {
  void * jresult ;
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  pj::SdpSession *result = 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  result = (pj::SdpSession *)& ((arg1)->sdp);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CallOpParam__SWIG_0___(unsigned int jarg1) {
  void * jresult ;
  bool arg1 ;
  pj::CallOpParam *result = 0 ;
  
  arg1 = jarg1 ? true : false; 
  result = (pj::CallOpParam *)new pj::CallOpParam(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CallOpParam__SWIG_1___() {
  void * jresult ;
  pj::CallOpParam *result = 0 ;
  
  result = (pj::CallOpParam *)new pj::CallOpParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CallOpParam___(void * jarg1) {
  pj::CallOpParam *arg1 = (pj::CallOpParam *) 0 ;
  
  arg1 = (pj::CallOpParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSendRequestParam_method_set___(void * jarg1, char * jarg2) {
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallSendRequestParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->method = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSendRequestParam_method_get___(void * jarg1) {
  char * jresult ;
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallSendRequestParam *)jarg1; 
  result = (pj::string *) & ((arg1)->method);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSendRequestParam_txOption_set___(void * jarg1, void * jarg2) {
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::SipTxOption *arg2 = (pj::SipTxOption *) 0 ;
  
  arg1 = (pj::CallSendRequestParam *)jarg1; 
  arg2 = (pj::SipTxOption *)jarg2; 
  if (arg1) (arg1)->txOption = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSendRequestParam_txOption_get___(void * jarg1) {
  void * jresult ;
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  pj::SipTxOption *result = 0 ;
  
  arg1 = (pj::CallSendRequestParam *)jarg1; 
  result = (pj::SipTxOption *)& ((arg1)->txOption);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CallSendRequestParam___() {
  void * jresult ;
  pj::CallSendRequestParam *result = 0 ;
  
  result = (pj::CallSendRequestParam *)new pj::CallSendRequestParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CallSendRequestParam___(void * jarg1) {
  pj::CallSendRequestParam *arg1 = (pj::CallSendRequestParam *) 0 ;
  
  arg1 = (pj::CallSendRequestParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallVidSetStreamParam_medIdx_set___(void * jarg1, int jarg2) {
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::CallVidSetStreamParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->medIdx = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallVidSetStreamParam_medIdx_get___(void * jarg1) {
  int jresult ;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  int result;
  
  arg1 = (pj::CallVidSetStreamParam *)jarg1; 
  result = (int) ((arg1)->medIdx);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallVidSetStreamParam_dir_set___(void * jarg1, int jarg2) {
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_dir arg2 ;
  
  arg1 = (pj::CallVidSetStreamParam *)jarg1; 
  arg2 = (pjmedia_dir)jarg2; 
  if (arg1) (arg1)->dir = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallVidSetStreamParam_dir_get___(void * jarg1) {
  int jresult ;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_dir result;
  
  arg1 = (pj::CallVidSetStreamParam *)jarg1; 
  result = (pjmedia_dir) ((arg1)->dir);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallVidSetStreamParam_capDev_set___(void * jarg1, int jarg2) {
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_vid_dev_index arg2 ;
  
  arg1 = (pj::CallVidSetStreamParam *)jarg1; 
  arg2 = (pjmedia_vid_dev_index)jarg2; 
  if (arg1) (arg1)->capDev = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallVidSetStreamParam_capDev_get___(void * jarg1) {
  int jresult ;
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  pjmedia_vid_dev_index result;
  
  arg1 = (pj::CallVidSetStreamParam *)jarg1; 
  result = (pjmedia_vid_dev_index) ((arg1)->capDev);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CallVidSetStreamParam___() {
  void * jresult ;
  pj::CallVidSetStreamParam *result = 0 ;
  
  result = (pj::CallVidSetStreamParam *)new pj::CallVidSetStreamParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CallVidSetStreamParam___(void * jarg1) {
  pj::CallVidSetStreamParam *arg1 = (pj::CallVidSetStreamParam *) 0 ;
  
  arg1 = (pj::CallVidSetStreamParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSendDtmfParam_method_set___(void * jarg1, int jarg2) {
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  pjsua_dtmf_method arg2 ;
  
  arg1 = (pj::CallSendDtmfParam *)jarg1; 
  arg2 = (pjsua_dtmf_method)jarg2; 
  if (arg1) (arg1)->method = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSendDtmfParam_method_get___(void * jarg1) {
  int jresult ;
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  pjsua_dtmf_method result;
  
  arg1 = (pj::CallSendDtmfParam *)jarg1; 
  result = (pjsua_dtmf_method) ((arg1)->method);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSendDtmfParam_duration_set___(void * jarg1, unsigned int jarg2) {
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::CallSendDtmfParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->duration = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSendDtmfParam_duration_get___(void * jarg1) {
  unsigned int jresult ;
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::CallSendDtmfParam *)jarg1; 
  result = (unsigned int) ((arg1)->duration);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSendDtmfParam_digits_set___(void * jarg1, char * jarg2) {
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::CallSendDtmfParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->digits = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallSendDtmfParam_digits_get___(void * jarg1) {
  char * jresult ;
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::CallSendDtmfParam *)jarg1; 
  result = (pj::string *) & ((arg1)->digits);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CallSendDtmfParam___() {
  void * jresult ;
  pj::CallSendDtmfParam *result = 0 ;
  
  result = (pj::CallSendDtmfParam *)new pj::CallSendDtmfParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CallSendDtmfParam___(void * jarg1) {
  pj::CallSendDtmfParam *arg1 = (pj::CallSendDtmfParam *) 0 ;
  
  arg1 = (pj::CallSendDtmfParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_Call__SWIG_0___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::Account *arg1 = 0 ;
  int arg2 ;
  pj::Call *result = 0 ;
  
  arg1 = (pj::Account *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Account & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  result = (pj::Call *)new SwigDirector_Call(*arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_Call__SWIG_1___(void * jarg1) {
  void * jresult ;
  pj::Account *arg1 = 0 ;
  pj::Call *result = 0 ;
  
  arg1 = (pj::Account *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Account & type is null", 0);
    return 0;
  } 
  result = (pj::Call *)new SwigDirector_Call(*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_Call___(void * jarg1) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_getInfo___(void * jarg1) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallInfo result;
  
  arg1 = (pj::Call *)jarg1; 
  try {
    result = ((pj::Call const *)arg1)->getInfo();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::CallInfo((const pj::CallInfo &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_isActive___(void * jarg1) {
  unsigned int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  bool result;
  
  arg1 = (pj::Call *)jarg1; 
  result = (bool)((pj::Call const *)arg1)->isActive();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_getId___(void * jarg1) {
  int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int result;
  
  arg1 = (pj::Call *)jarg1; 
  result = (int)((pj::Call const *)arg1)->getId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_lookup___(int jarg1) {
  void * jresult ;
  int arg1 ;
  pj::Call *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (pj::Call *)pj::Call::lookup(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_hasMedia___(void * jarg1) {
  unsigned int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  bool result;
  
  arg1 = (pj::Call *)jarg1; 
  result = (bool)((pj::Call const *)arg1)->hasMedia();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_getMedia___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::Media *result = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (pj::Media *)((pj::Call const *)arg1)->getMedia(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_remoteHasCap___(void * jarg1, int jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pj::string *arg3 = 0 ;
  pj::string *arg4 = 0 ;
  pjsip_dialog_cap_status result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (pjsip_dialog_cap_status)((pj::Call const *)arg1)->remoteHasCap(arg2,(pj::string const &)*arg3,(pj::string const &)*arg4);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_setUserData___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::Token)jarg2; 
  (arg1)->setUserData(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_getUserData___(void * jarg1) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::Token result;
  
  arg1 = (pj::Call *)jarg1; 
  result = (pj::Token)((pj::Call const *)arg1)->getUserData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_getRemNatType___(void * jarg1) {
  int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj_stun_nat_type result;
  
  arg1 = (pj::Call *)jarg1; 
  try {
    result = (pj_stun_nat_type)(arg1)->getRemNatType();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_makeCall___(void * jarg1, char * jarg2, void * jarg3) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CallOpParam *arg3 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::CallOpParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->makeCall((pj::string const &)*arg2,(pj::CallOpParam const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_answer___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::CallOpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->answer((pj::CallOpParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_hangup___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::CallOpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->hangup((pj::CallOpParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_setHold___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::CallOpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->setHold((pj::CallOpParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_reinvite___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::CallOpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->reinvite((pj::CallOpParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_update___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallOpParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::CallOpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->update((pj::CallOpParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_xfer___(void * jarg1, char * jarg2, void * jarg3) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CallOpParam *arg3 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::CallOpParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->xfer((pj::string const &)*arg2,(pj::CallOpParam const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_xferReplaces___(void * jarg1, void * jarg2, void * jarg3) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::Call *arg2 = 0 ;
  pj::CallOpParam *arg3 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::Call *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::Call const & type is null", 0);
    return ;
  } 
  arg3 = (pj::CallOpParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallOpParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->xferReplaces((pj::Call const &)*arg2,(pj::CallOpParam const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_processRedirect___(void * jarg1, int jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pjsip_redirect_op arg2 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pjsip_redirect_op)jarg2; 
  try {
    (arg1)->processRedirect(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_dialDtmf___(void * jarg1, char * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->dialDtmf((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_sendDtmf___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallSendDtmfParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::CallSendDtmfParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallSendDtmfParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->sendDtmf((pj::CallSendDtmfParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_sendInstantMessage___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::SendInstantMessageParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::SendInstantMessageParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SendInstantMessageParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->sendInstantMessage((pj::SendInstantMessageParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_sendTypingIndication___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::SendTypingIndicationParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::SendTypingIndicationParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::SendTypingIndicationParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->sendTypingIndication((pj::SendTypingIndicationParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_sendRequest___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::CallSendRequestParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::CallSendRequestParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallSendRequestParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->sendRequest((pj::CallSendRequestParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_dump___(void * jarg1, unsigned int jarg2, char * jarg3) {
  char * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  bool arg2 ;
  pj::string arg3 ;
  pj::string result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg3)->assign(jarg3); 
  try {
    result = (arg1)->dump(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_vidGetStreamIdx___(void * jarg1) {
  int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int result;
  
  arg1 = (pj::Call *)jarg1; 
  result = (int)((pj::Call const *)arg1)->vidGetStreamIdx();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_vidStreamIsRunning___(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  int arg2 ;
  pjmedia_dir arg3 ;
  bool result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pjmedia_dir)jarg3; 
  result = (bool)((pj::Call const *)arg1)->vidStreamIsRunning(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_vidSetStream___(void * jarg1, int jarg2, void * jarg3) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pjsua_call_vid_strm_op arg2 ;
  pj::CallVidSetStreamParam *arg3 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pjsua_call_vid_strm_op)jarg2; 
  arg3 = (pj::CallVidSetStreamParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallVidSetStreamParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->vidSetStream(arg2,(pj::CallVidSetStreamParam const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_getStreamInfo___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::StreamInfo result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getStreamInfo(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::StreamInfo((const pj::StreamInfo &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_getStreamStat___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::StreamStat result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getStreamStat(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::StreamStat((const pj::StreamStat &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_getMedTransportInfo___(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  unsigned int arg2 ;
  pj::MediaTransportInfo result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    result = ((pj::Call const *)arg1)->getMedTransportInfo(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::MediaTransportInfo((const pj::MediaTransportInfo &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_processMediaUpdate___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallMediaStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallMediaStateParam & type is null", 0);
    return ;
  } 
  (arg1)->processMediaUpdate(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_processStateChange___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallStateParam & type is null", 0);
    return ;
  } 
  (arg1)->processStateChange(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallState___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallStateParam & type is null", 0);
    return ;
  } 
  (arg1)->onCallState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallStateSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallStateParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallTsxState___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTsxStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTsxStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTsxStateParam & type is null", 0);
    return ;
  } 
  (arg1)->onCallTsxState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallTsxStateSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTsxStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTsxStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTsxStateParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallTsxState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallMediaState___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallMediaStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallMediaStateParam & type is null", 0);
    return ;
  } 
  (arg1)->onCallMediaState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallMediaStateSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallMediaStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallMediaStateParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallMediaState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallSdpCreated___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallSdpCreatedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallSdpCreatedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallSdpCreatedParam & type is null", 0);
    return ;
  } 
  (arg1)->onCallSdpCreated(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallSdpCreatedSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallSdpCreatedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallSdpCreatedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallSdpCreatedParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallSdpCreated(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onStreamCreated___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamCreatedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnStreamCreatedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnStreamCreatedParam & type is null", 0);
    return ;
  } 
  (arg1)->onStreamCreated(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onStreamCreatedSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamCreatedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnStreamCreatedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnStreamCreatedParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onStreamCreated(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onStreamDestroyed___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamDestroyedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnStreamDestroyedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnStreamDestroyedParam & type is null", 0);
    return ;
  } 
  (arg1)->onStreamDestroyed(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onStreamDestroyedSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnStreamDestroyedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnStreamDestroyedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnStreamDestroyedParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onStreamDestroyed(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onDtmfDigit___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnDtmfDigitParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnDtmfDigitParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnDtmfDigitParam & type is null", 0);
    return ;
  } 
  (arg1)->onDtmfDigit(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onDtmfDigitSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnDtmfDigitParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnDtmfDigitParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnDtmfDigitParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onDtmfDigit(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallTransferRequest___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTransferRequestParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTransferRequestParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTransferRequestParam & type is null", 0);
    return ;
  } 
  (arg1)->onCallTransferRequest(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallTransferRequestSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTransferRequestParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTransferRequestParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTransferRequestParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallTransferRequest(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallTransferStatus___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTransferStatusParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTransferStatusParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTransferStatusParam & type is null", 0);
    return ;
  } 
  (arg1)->onCallTransferStatus(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallTransferStatusSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTransferStatusParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTransferStatusParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTransferStatusParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallTransferStatus(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallReplaceRequest___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallReplaceRequestParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallReplaceRequestParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallReplaceRequestParam & type is null", 0);
    return ;
  } 
  (arg1)->onCallReplaceRequest(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallReplaceRequestSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallReplaceRequestParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallReplaceRequestParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallReplaceRequestParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallReplaceRequest(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallReplaced___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallReplacedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallReplacedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallReplacedParam & type is null", 0);
    return ;
  } 
  (arg1)->onCallReplaced(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallReplacedSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallReplacedParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallReplacedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallReplacedParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallReplaced(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallRxOffer___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRxOfferParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallRxOfferParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallRxOfferParam & type is null", 0);
    return ;
  } 
  (arg1)->onCallRxOffer(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallRxOfferSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRxOfferParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallRxOfferParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallRxOfferParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallRxOffer(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallRxReinvite___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRxReinviteParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallRxReinviteParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallRxReinviteParam & type is null", 0);
    return ;
  } 
  (arg1)->onCallRxReinvite(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallRxReinviteSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRxReinviteParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallRxReinviteParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallRxReinviteParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallRxReinvite(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallTxOffer___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTxOfferParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTxOfferParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTxOfferParam & type is null", 0);
    return ;
  } 
  (arg1)->onCallTxOffer(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallTxOfferSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallTxOfferParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallTxOfferParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallTxOfferParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallTxOffer(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onInstantMessage___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnInstantMessageParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnInstantMessageParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageParam & type is null", 0);
    return ;
  } 
  (arg1)->onInstantMessage(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onInstantMessageSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnInstantMessageParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnInstantMessageParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onInstantMessage(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onInstantMessageStatus___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnInstantMessageStatusParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnInstantMessageStatusParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageStatusParam & type is null", 0);
    return ;
  } 
  (arg1)->onInstantMessageStatus(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onInstantMessageStatusSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnInstantMessageStatusParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnInstantMessageStatusParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnInstantMessageStatusParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onInstantMessageStatus(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onTypingIndication___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnTypingIndicationParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnTypingIndicationParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTypingIndicationParam & type is null", 0);
    return ;
  } 
  (arg1)->onTypingIndication(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onTypingIndicationSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnTypingIndicationParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnTypingIndicationParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTypingIndicationParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onTypingIndication(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallRedirected___(void * jarg1, void * jarg2) {
  int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRedirectedParam *arg2 = 0 ;
  pjsip_redirect_op result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallRedirectedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallRedirectedParam & type is null", 0);
    return 0;
  } 
  result = (pjsip_redirect_op)(arg1)->onCallRedirected(*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallRedirectedSwigExplicitCall___(void * jarg1, void * jarg2) {
  int jresult ;
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallRedirectedParam *arg2 = 0 ;
  pjsip_redirect_op result;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallRedirectedParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallRedirectedParam & type is null", 0);
    return 0;
  } 
  result = (pjsip_redirect_op)(arg1)->pj::Call::onCallRedirected(*arg2);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallMediaTransportState___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaTransportStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallMediaTransportStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallMediaTransportStateParam & type is null", 0);
    return ;
  } 
  (arg1)->onCallMediaTransportState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallMediaTransportStateSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaTransportStateParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallMediaTransportStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallMediaTransportStateParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallMediaTransportState(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallMediaEvent___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaEventParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallMediaEventParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallMediaEventParam & type is null", 0);
    return ;
  } 
  (arg1)->onCallMediaEvent(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCallMediaEventSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCallMediaEventParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCallMediaEventParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCallMediaEventParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCallMediaEvent(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCreateMediaTransport___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCreateMediaTransportParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCreateMediaTransportParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCreateMediaTransportParam & type is null", 0);
    return ;
  } 
  (arg1)->onCreateMediaTransport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCreateMediaTransportSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCreateMediaTransportParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCreateMediaTransportParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCreateMediaTransportParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCreateMediaTransport(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCreateMediaTransportSrtp___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCreateMediaTransportSrtpParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCreateMediaTransportSrtpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCreateMediaTransportSrtpParam & type is null", 0);
    return ;
  } 
  (arg1)->onCreateMediaTransportSrtp(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_onCreateMediaTransportSrtpSwigExplicitCall___(void * jarg1, void * jarg2) {
  pj::Call *arg1 = (pj::Call *) 0 ;
  pj::OnCreateMediaTransportSrtpParam *arg2 = 0 ;
  
  arg1 = (pj::Call *)jarg1; 
  arg2 = (pj::OnCreateMediaTransportSrtpParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnCreateMediaTransportSrtpParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Call::onCreateMediaTransportSrtp(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Call_director_connect___(void *objarg, SwigDirector_Call::SWIG_Callback0_t callback0, SwigDirector_Call::SWIG_Callback1_t callback1, SwigDirector_Call::SWIG_Callback2_t callback2, SwigDirector_Call::SWIG_Callback3_t callback3, SwigDirector_Call::SWIG_Callback4_t callback4, SwigDirector_Call::SWIG_Callback5_t callback5, SwigDirector_Call::SWIG_Callback6_t callback6, SwigDirector_Call::SWIG_Callback7_t callback7, SwigDirector_Call::SWIG_Callback8_t callback8, SwigDirector_Call::SWIG_Callback9_t callback9, SwigDirector_Call::SWIG_Callback10_t callback10, SwigDirector_Call::SWIG_Callback11_t callback11, SwigDirector_Call::SWIG_Callback12_t callback12, SwigDirector_Call::SWIG_Callback13_t callback13, SwigDirector_Call::SWIG_Callback14_t callback14, SwigDirector_Call::SWIG_Callback15_t callback15, SwigDirector_Call::SWIG_Callback16_t callback16, SwigDirector_Call::SWIG_Callback17_t callback17, SwigDirector_Call::SWIG_Callback18_t callback18, SwigDirector_Call::SWIG_Callback19_t callback19, SwigDirector_Call::SWIG_Callback20_t callback20, SwigDirector_Call::SWIG_Callback21_t callback21) {
  pj::Call *obj = (pj::Call *)objarg;
  SwigDirector_Call *director = dynamic_cast<SwigDirector_Call *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_Clear___(void * jarg1) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_Add___(void * jarg1, void * jarg2) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  pj::CallMediaInfo *arg2 = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (pj::CallMediaInfo *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallMediaInfo const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((pj::CallMediaInfo const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_size___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  std::vector< pj::CallMediaInfo >::size_type result;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  result = ((std::vector< pj::CallMediaInfo > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_capacity___(void * jarg1) {
  unsigned long jresult ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  std::vector< pj::CallMediaInfo >::size_type result;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  result = ((std::vector< pj::CallMediaInfo > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_reserve___(void * jarg1, unsigned long jarg2) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  std::vector< pj::CallMediaInfo >::size_type arg2 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (std::vector< pj::CallMediaInfo >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CallMediaInfoVector__SWIG_0___() {
  void * jresult ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  result = (std::vector< pj::CallMediaInfo > *)new std::vector< pj::CallMediaInfo >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CallMediaInfoVector__SWIG_1___(void * jarg1) {
  void * jresult ;
  std::vector< pj::CallMediaInfo > *arg1 = 0 ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CallMediaInfo > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< pj::CallMediaInfo > *)new std::vector< pj::CallMediaInfo >((std::vector< pj::CallMediaInfo > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_CallMediaInfoVector__SWIG_2___(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< pj::CallMediaInfo > *)new_std_vector_Sl_pj_CallMediaInfo_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_getitemcopy___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  pj::CallMediaInfo result;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_pj_CallMediaInfo_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new pj::CallMediaInfo((const pj::CallMediaInfo &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_getitem___(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  pj::CallMediaInfo *result = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (pj::CallMediaInfo *) &std_vector_Sl_pj_CallMediaInfo_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_setitem___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  pj::CallMediaInfo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::CallMediaInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallMediaInfo const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__setitem(arg1,arg2,(pj::CallMediaInfo const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_AddRange___(void * jarg1, void * jarg2) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  std::vector< pj::CallMediaInfo > *arg2 = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (std::vector< pj::CallMediaInfo > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CallMediaInfo > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_pj_CallMediaInfo_Sg__AddRange(arg1,(std::vector< pj::CallMediaInfo > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_GetRange___(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< pj::CallMediaInfo > *)std_vector_Sl_pj_CallMediaInfo_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_Insert___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  pj::CallMediaInfo *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (pj::CallMediaInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallMediaInfo const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__Insert(arg1,arg2,(pj::CallMediaInfo const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_InsertRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::CallMediaInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::CallMediaInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CallMediaInfo > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__InsertRange(arg1,arg2,(std::vector< pj::CallMediaInfo > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_RemoveAt___(void * jarg1, int jarg2) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_RemoveRange___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_Repeat___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::CallMediaInfo *arg1 = 0 ;
  int arg2 ;
  std::vector< pj::CallMediaInfo > *result = 0 ;
  
  arg1 = (pj::CallMediaInfo *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::CallMediaInfo const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< pj::CallMediaInfo > *)std_vector_Sl_pj_CallMediaInfo_Sg__Repeat((pj::CallMediaInfo const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_Reverse__SWIG_0___(void * jarg1) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  std_vector_Sl_pj_CallMediaInfo_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_Reverse__SWIG_1___(void * jarg1, int jarg2, int jarg3) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_CallMediaInfoVector_SetRange___(void * jarg1, int jarg2, void * jarg3) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  int arg2 ;
  std::vector< pj::CallMediaInfo > *arg3 = 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< pj::CallMediaInfo > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< pj::CallMediaInfo > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_pj_CallMediaInfo_Sg__SetRange(arg1,arg2,(std::vector< pj::CallMediaInfo > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_CallMediaInfoVector___(void * jarg1) {
  std::vector< pj::CallMediaInfo > *arg1 = (std::vector< pj::CallMediaInfo > *) 0 ;
  
  arg1 = (std::vector< pj::CallMediaInfo > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_JsonDocument___() {
  void * jresult ;
  pj::JsonDocument *result = 0 ;
  
  result = (pj::JsonDocument *)new pj::JsonDocument();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_JsonDocument___(void * jarg1) {
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  
  arg1 = (pj::JsonDocument *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JsonDocument_loadFile___(void * jarg1, char * jarg2) {
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::JsonDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->loadFile((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JsonDocument_loadString___(void * jarg1, char * jarg2) {
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::JsonDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->loadString((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JsonDocument_saveFile___(void * jarg1, char * jarg2) {
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::JsonDocument *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->saveFile((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JsonDocument_saveString___(void * jarg1) {
  char * jresult ;
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::string result;
  
  arg1 = (pj::JsonDocument *)jarg1; 
  try {
    result = (arg1)->saveString();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JsonDocument_getRootContainer___(void * jarg1) {
  void * jresult ;
  pj::JsonDocument *arg1 = (pj::JsonDocument *) 0 ;
  pj::ContainerNode *result = 0 ;
  
  arg1 = (pj::JsonDocument *)jarg1; 
  result = (pj::ContainerNode *) &((pj::JsonDocument const *)arg1)->getRootContainer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatDetectionCompleteParam_status_set___(void * jarg1, int jarg2) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatDetectionCompleteParam_status_get___(void * jarg1) {
  int jresult ;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatDetectionCompleteParam_reason_set___(void * jarg1, char * jarg2) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->reason = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatDetectionCompleteParam_reason_get___(void * jarg1) {
  char * jresult ;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  result = (pj::string *) & ((arg1)->reason);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatDetectionCompleteParam_natType_set___(void * jarg1, int jarg2) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_stun_nat_type arg2 ;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  arg2 = (pj_stun_nat_type)jarg2; 
  if (arg1) (arg1)->natType = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatDetectionCompleteParam_natType_get___(void * jarg1) {
  int jresult ;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj_stun_nat_type result;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  result = (pj_stun_nat_type) ((arg1)->natType);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatDetectionCompleteParam_natTypeName_set___(void * jarg1, char * jarg2) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->natTypeName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatDetectionCompleteParam_natTypeName_get___(void * jarg1) {
  char * jresult ;
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  result = (pj::string *) & ((arg1)->natTypeName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnNatDetectionCompleteParam___() {
  void * jresult ;
  pj::OnNatDetectionCompleteParam *result = 0 ;
  
  result = (pj::OnNatDetectionCompleteParam *)new pj::OnNatDetectionCompleteParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnNatDetectionCompleteParam___(void * jarg1) {
  pj::OnNatDetectionCompleteParam *arg1 = (pj::OnNatDetectionCompleteParam *) 0 ;
  
  arg1 = (pj::OnNatDetectionCompleteParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatCheckStunServersCompleteParam_userData_set___(void * jarg1, void * jarg2) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  arg2 = (pj::Token)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatCheckStunServersCompleteParam_userData_get___(void * jarg1) {
  void * jresult ;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::Token result;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  result = (pj::Token) ((arg1)->userData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatCheckStunServersCompleteParam_status_set___(void * jarg1, int jarg2) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatCheckStunServersCompleteParam_status_get___(void * jarg1) {
  int jresult ;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatCheckStunServersCompleteParam_name_set___(void * jarg1, char * jarg2) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatCheckStunServersCompleteParam_name_get___(void * jarg1) {
  char * jresult ;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatCheckStunServersCompleteParam_addr_set___(void * jarg1, char * jarg2) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->addr = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnNatCheckStunServersCompleteParam_addr_get___(void * jarg1) {
  char * jresult ;
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->addr);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnNatCheckStunServersCompleteParam___() {
  void * jresult ;
  pj::OnNatCheckStunServersCompleteParam *result = 0 ;
  
  result = (pj::OnNatCheckStunServersCompleteParam *)new pj::OnNatCheckStunServersCompleteParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnNatCheckStunServersCompleteParam___(void * jarg1) {
  pj::OnNatCheckStunServersCompleteParam *arg1 = (pj::OnNatCheckStunServersCompleteParam *) 0 ;
  
  arg1 = (pj::OnNatCheckStunServersCompleteParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTimerParam_userData_set___(void * jarg1, void * jarg2) {
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  arg1 = (pj::OnTimerParam *)jarg1; 
  arg2 = (pj::Token)jarg2; 
  if (arg1) (arg1)->userData = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTimerParam_userData_get___(void * jarg1) {
  void * jresult ;
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  pj::Token result;
  
  arg1 = (pj::OnTimerParam *)jarg1; 
  result = (pj::Token) ((arg1)->userData);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTimerParam_msecDelay_set___(void * jarg1, unsigned int jarg2) {
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::OnTimerParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->msecDelay = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTimerParam_msecDelay_get___(void * jarg1) {
  unsigned int jresult ;
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::OnTimerParam *)jarg1; 
  result = (unsigned int) ((arg1)->msecDelay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnTimerParam___() {
  void * jresult ;
  pj::OnTimerParam *result = 0 ;
  
  result = (pj::OnTimerParam *)new pj::OnTimerParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnTimerParam___(void * jarg1) {
  pj::OnTimerParam *arg1 = (pj::OnTimerParam *) 0 ;
  
  arg1 = (pj::OnTimerParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertName_type_set___(void * jarg1, int jarg2) {
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  pj_ssl_cert_name_type arg2 ;
  
  arg1 = (pj::SslCertName *)jarg1; 
  arg2 = (pj_ssl_cert_name_type)jarg2; 
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertName_type_get___(void * jarg1) {
  int jresult ;
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  pj_ssl_cert_name_type result;
  
  arg1 = (pj::SslCertName *)jarg1; 
  result = (pj_ssl_cert_name_type) ((arg1)->type);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertName_name_set___(void * jarg1, char * jarg2) {
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SslCertName *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertName_name_get___(void * jarg1) {
  char * jresult ;
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SslCertName *)jarg1; 
  result = (pj::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SslCertName___() {
  void * jresult ;
  pj::SslCertName *result = 0 ;
  
  result = (pj::SslCertName *)new pj::SslCertName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SslCertName___(void * jarg1) {
  pj::SslCertName *arg1 = (pj::SslCertName *) 0 ;
  
  arg1 = (pj::SslCertName *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_version_set___(void * jarg1, unsigned int jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->version = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_version_get___(void * jarg1) {
  unsigned int jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (unsigned int) ((arg1)->version);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_serialNo_set___(void * jarg1, void * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  unsigned char *arg2 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  arg2 = (unsigned char *)jarg2; 
  {
    size_t ii;
    unsigned char *b = (unsigned char *) arg1->serialNo;
    for (ii = 0; ii < (size_t)20; ii++) b[ii] = *((unsigned char *) arg2 + ii);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_serialNo_get___(void * jarg1) {
  void * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (unsigned char *)(unsigned char *) ((arg1)->serialNo);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_subjectCn_set___(void * jarg1, char * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->subjectCn = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_subjectCn_get___(void * jarg1) {
  char * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->subjectCn);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_subjectInfo_set___(void * jarg1, char * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->subjectInfo = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_subjectInfo_get___(void * jarg1) {
  char * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->subjectInfo);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_issuerCn_set___(void * jarg1, char * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->issuerCn = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_issuerCn_get___(void * jarg1) {
  char * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->issuerCn);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_issuerInfo_set___(void * jarg1, char * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->issuerInfo = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_issuerInfo_get___(void * jarg1) {
  char * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->issuerInfo);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_validityStart_set___(void * jarg1, void * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  arg2 = (pj::TimeVal *)jarg2; 
  if (arg1) (arg1)->validityStart = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_validityStart_get___(void * jarg1) {
  void * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::TimeVal *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::TimeVal *)& ((arg1)->validityStart);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_validityEnd_set___(void * jarg1, void * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::TimeVal *arg2 = (pj::TimeVal *) 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  arg2 = (pj::TimeVal *)jarg2; 
  if (arg1) (arg1)->validityEnd = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_validityEnd_get___(void * jarg1) {
  void * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::TimeVal *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::TimeVal *)& ((arg1)->validityEnd);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_validityGmt_set___(void * jarg1, unsigned int jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->validityGmt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_validityGmt_get___(void * jarg1) {
  unsigned int jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  bool result;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (bool) ((arg1)->validityGmt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_subjectAltName_set___(void * jarg1, void * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  vector< pj::SslCertName > *arg2 = (vector< pj::SslCertName > *) 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  arg2 = (vector< pj::SslCertName > *)jarg2; 
  if (arg1) (arg1)->subjectAltName = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_subjectAltName_get___(void * jarg1) {
  void * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  vector< pj::SslCertName > *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (vector< pj::SslCertName > *)& ((arg1)->subjectAltName);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_raw_set___(void * jarg1, char * jarg2) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->raw = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_raw_get___(void * jarg1) {
  char * jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->raw);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_SslCertInfo___() {
  void * jresult ;
  pj::SslCertInfo *result = 0 ;
  
  result = (pj::SslCertInfo *)new pj::SslCertInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SslCertInfo_isEmpty___(void * jarg1) {
  unsigned int jresult ;
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  bool result;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  result = (bool)((pj::SslCertInfo const *)arg1)->isEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_SslCertInfo___(void * jarg1) {
  pj::SslCertInfo *arg1 = (pj::SslCertInfo *) 0 ;
  
  arg1 = (pj::SslCertInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_established_set___(void * jarg1, unsigned int jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->established = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_established_get___(void * jarg1) {
  unsigned int jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  bool result;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (bool) ((arg1)->established);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_protocol_set___(void * jarg1, unsigned int jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->protocol = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_protocol_get___(void * jarg1) {
  unsigned int jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (unsigned int) ((arg1)->protocol);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_cipher_set___(void * jarg1, int jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj_ssl_cipher arg2 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  arg2 = (pj_ssl_cipher)jarg2; 
  if (arg1) (arg1)->cipher = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_cipher_get___(void * jarg1) {
  int jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj_ssl_cipher result;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (pj_ssl_cipher) ((arg1)->cipher);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_cipherName_set___(void * jarg1, char * jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->cipherName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_cipherName_get___(void * jarg1) {
  char * jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (pj::string *) & ((arg1)->cipherName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_localAddr_set___(void * jarg1, char * jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->localAddr = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_localAddr_get___(void * jarg1) {
  char * jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->localAddr);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_remoteAddr_set___(void * jarg1, char * jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SocketAddress *arg2 = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::SocketAddress arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->remoteAddr = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_remoteAddr_get___(void * jarg1) {
  char * jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SocketAddress *result = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (pj::SocketAddress *) & ((arg1)->remoteAddr);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_localCertInfo_set___(void * jarg1, void * jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SslCertInfo *arg2 = (pj::SslCertInfo *) 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  arg2 = (pj::SslCertInfo *)jarg2; 
  if (arg1) (arg1)->localCertInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_localCertInfo_get___(void * jarg1) {
  void * jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SslCertInfo *result = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (pj::SslCertInfo *)& ((arg1)->localCertInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_remoteCertInfo_set___(void * jarg1, void * jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SslCertInfo *arg2 = (pj::SslCertInfo *) 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  arg2 = (pj::SslCertInfo *)jarg2; 
  if (arg1) (arg1)->remoteCertInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_remoteCertInfo_get___(void * jarg1) {
  void * jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::SslCertInfo *result = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (pj::SslCertInfo *)& ((arg1)->remoteCertInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_verifyStatus_set___(void * jarg1, unsigned int jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->verifyStatus = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_verifyStatus_get___(void * jarg1) {
  unsigned int jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  unsigned int result;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (unsigned int) ((arg1)->verifyStatus);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_verifyMsgs_set___(void * jarg1, void * jarg2) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  arg2 = (pj::StringVector *)jarg2; 
  if (arg1) (arg1)->verifyMsgs = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_verifyMsgs_get___(void * jarg1) {
  void * jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  pj::StringVector *result = 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (pj::StringVector *)& ((arg1)->verifyMsgs);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_TlsInfo___() {
  void * jresult ;
  pj::TlsInfo *result = 0 ;
  
  result = (pj::TlsInfo *)new pj::TlsInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsInfo_isEmpty___(void * jarg1) {
  unsigned int jresult ;
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  bool result;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  result = (bool)((pj::TlsInfo const *)arg1)->isEmpty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_TlsInfo___(void * jarg1) {
  pj::TlsInfo *arg1 = (pj::TlsInfo *) 0 ;
  
  arg1 = (pj::TlsInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTransportStateParam_hnd_set___(void * jarg1, void * jarg2) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::TransportHandle arg2 = (pj::TransportHandle) 0 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  arg2 = (pj::TransportHandle)jarg2; 
  if (arg1) (arg1)->hnd = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTransportStateParam_hnd_get___(void * jarg1) {
  void * jresult ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::TransportHandle result;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  result = (pj::TransportHandle) ((arg1)->hnd);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTransportStateParam_type_set___(void * jarg1, char * jarg2) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->type = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTransportStateParam_type_get___(void * jarg1) {
  char * jresult ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  result = (pj::string *) & ((arg1)->type);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTransportStateParam_state_set___(void * jarg1, int jarg2) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pjsip_transport_state arg2 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  arg2 = (pjsip_transport_state)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTransportStateParam_state_get___(void * jarg1) {
  int jresult ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pjsip_transport_state result;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  result = (pjsip_transport_state) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTransportStateParam_lastError_set___(void * jarg1, int jarg2) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->lastError = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTransportStateParam_lastError_get___(void * jarg1) {
  int jresult ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  result = (pj_status_t) ((arg1)->lastError);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTransportStateParam_tlsInfo_set___(void * jarg1, void * jarg2) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::TlsInfo *arg2 = (pj::TlsInfo *) 0 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  arg2 = (pj::TlsInfo *)jarg2; 
  if (arg1) (arg1)->tlsInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnTransportStateParam_tlsInfo_get___(void * jarg1) {
  void * jresult ;
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  pj::TlsInfo *result = 0 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  result = (pj::TlsInfo *)& ((arg1)->tlsInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnTransportStateParam___() {
  void * jresult ;
  pj::OnTransportStateParam *result = 0 ;
  
  result = (pj::OnTransportStateParam *)new pj::OnTransportStateParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnTransportStateParam___(void * jarg1) {
  pj::OnTransportStateParam *arg1 = (pj::OnTransportStateParam *) 0 ;
  
  arg1 = (pj::OnTransportStateParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnSelectAccountParam_rdata_set___(void * jarg1, void * jarg2) {
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  pj::SipRxData *arg2 = (pj::SipRxData *) 0 ;
  
  arg1 = (pj::OnSelectAccountParam *)jarg1; 
  arg2 = (pj::SipRxData *)jarg2; 
  if (arg1) (arg1)->rdata = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnSelectAccountParam_rdata_get___(void * jarg1) {
  void * jresult ;
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  pj::SipRxData *result = 0 ;
  
  arg1 = (pj::OnSelectAccountParam *)jarg1; 
  result = (pj::SipRxData *)& ((arg1)->rdata);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnSelectAccountParam_accountIndex_set___(void * jarg1, int jarg2) {
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::OnSelectAccountParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->accountIndex = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnSelectAccountParam_accountIndex_get___(void * jarg1) {
  int jresult ;
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  int result;
  
  arg1 = (pj::OnSelectAccountParam *)jarg1; 
  result = (int) ((arg1)->accountIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnSelectAccountParam___() {
  void * jresult ;
  pj::OnSelectAccountParam *result = 0 ;
  
  result = (pj::OnSelectAccountParam *)new pj::OnSelectAccountParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnSelectAccountParam___(void * jarg1) {
  pj::OnSelectAccountParam *arg1 = (pj::OnSelectAccountParam *) 0 ;
  
  arg1 = (pj::OnSelectAccountParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IpChangeParam_restartListener_set___(void * jarg1, unsigned int jarg2) {
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::IpChangeParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->restartListener = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IpChangeParam_restartListener_get___(void * jarg1) {
  unsigned int jresult ;
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  bool result;
  
  arg1 = (pj::IpChangeParam *)jarg1; 
  result = (bool) ((arg1)->restartListener);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IpChangeParam_restartLisDelay_set___(void * jarg1, unsigned int jarg2) {
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::IpChangeParam *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->restartLisDelay = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_IpChangeParam_restartLisDelay_get___(void * jarg1) {
  unsigned int jresult ;
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  unsigned int result;
  
  arg1 = (pj::IpChangeParam *)jarg1; 
  result = (unsigned int) ((arg1)->restartLisDelay);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_IpChangeParam___() {
  void * jresult ;
  pj::IpChangeParam *result = 0 ;
  
  result = (pj::IpChangeParam *)new pj::IpChangeParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_IpChangeParam___(void * jarg1) {
  pj::IpChangeParam *arg1 = (pj::IpChangeParam *) 0 ;
  
  arg1 = (pj::IpChangeParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RegProgressParam_isRegister_set___(void * jarg1, unsigned int jarg2) {
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::RegProgressParam *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isRegister = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RegProgressParam_isRegister_get___(void * jarg1) {
  unsigned int jresult ;
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  bool result;
  
  arg1 = (pj::RegProgressParam *)jarg1; 
  result = (bool) ((arg1)->isRegister);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RegProgressParam_code_set___(void * jarg1, int jarg2) {
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::RegProgressParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->code = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RegProgressParam_code_get___(void * jarg1) {
  int jresult ;
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  int result;
  
  arg1 = (pj::RegProgressParam *)jarg1; 
  result = (int) ((arg1)->code);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_RegProgressParam___() {
  void * jresult ;
  pj::RegProgressParam *result = 0 ;
  
  result = (pj::RegProgressParam *)new pj::RegProgressParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_RegProgressParam___(void * jarg1) {
  pj::RegProgressParam *arg1 = (pj::RegProgressParam *) 0 ;
  
  arg1 = (pj::RegProgressParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIpChangeProgressParam_op_set___(void * jarg1, int jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pjsua_ip_change_op arg2 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  arg2 = (pjsua_ip_change_op)jarg2; 
  if (arg1) (arg1)->op = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIpChangeProgressParam_op_get___(void * jarg1) {
  int jresult ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pjsua_ip_change_op result;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  result = (pjsua_ip_change_op) ((arg1)->op);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIpChangeProgressParam_status_set___(void * jarg1, int jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj_status_t arg2 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIpChangeProgressParam_status_get___(void * jarg1) {
  int jresult ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj_status_t result;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  result = (pj_status_t) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIpChangeProgressParam_transportId_set___(void * jarg1, int jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj::TransportId arg2 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  if (arg1) (arg1)->transportId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIpChangeProgressParam_transportId_get___(void * jarg1) {
  int jresult ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj::TransportId result;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  result = (pj::TransportId) ((arg1)->transportId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIpChangeProgressParam_accId_set___(void * jarg1, int jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->accId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIpChangeProgressParam_accId_get___(void * jarg1) {
  int jresult ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  int result;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  result = (int) ((arg1)->accId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIpChangeProgressParam_callId_set___(void * jarg1, int jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  int arg2 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->callId = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIpChangeProgressParam_callId_get___(void * jarg1) {
  int jresult ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  int result;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  result = (int) ((arg1)->callId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIpChangeProgressParam_regInfo_set___(void * jarg1, void * jarg2) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj::RegProgressParam *arg2 = (pj::RegProgressParam *) 0 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  arg2 = (pj::RegProgressParam *)jarg2; 
  if (arg1) (arg1)->regInfo = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_OnIpChangeProgressParam_regInfo_get___(void * jarg1) {
  void * jresult ;
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  pj::RegProgressParam *result = 0 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  result = (pj::RegProgressParam *)& ((arg1)->regInfo);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_OnIpChangeProgressParam___() {
  void * jresult ;
  pj::OnIpChangeProgressParam *result = 0 ;
  
  result = (pj::OnIpChangeProgressParam *)new pj::OnIpChangeProgressParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_OnIpChangeProgressParam___(void * jarg1) {
  pj::OnIpChangeProgressParam *arg1 = (pj::OnIpChangeProgressParam *) 0 ;
  
  arg1 = (pj::OnIpChangeProgressParam *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_maxCalls_set___(void * jarg1, unsigned int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxCalls = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_maxCalls_get___(void * jarg1) {
  unsigned int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->maxCalls);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_threadCnt_set___(void * jarg1, unsigned int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->threadCnt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_threadCnt_get___(void * jarg1) {
  unsigned int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->threadCnt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_mainThreadOnly_set___(void * jarg1, unsigned int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mainThreadOnly = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_mainThreadOnly_get___(void * jarg1) {
  unsigned int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (bool) ((arg1)->mainThreadOnly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_nameserver_set___(void * jarg1, void * jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (pj::StringVector *)jarg2; 
  if (arg1) (arg1)->nameserver = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_nameserver_get___(void * jarg1) {
  void * jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (pj::StringVector *)& ((arg1)->nameserver);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_outboundProxies_set___(void * jarg1, void * jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (pj::StringVector *)jarg2; 
  if (arg1) (arg1)->outboundProxies = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_outboundProxies_get___(void * jarg1) {
  void * jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (pj::StringVector *)& ((arg1)->outboundProxies);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_userAgent_set___(void * jarg1, char * jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->userAgent = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_userAgent_get___(void * jarg1) {
  char * jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->userAgent);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_stunServer_set___(void * jarg1, void * jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *arg2 = (pj::StringVector *) 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (pj::StringVector *)jarg2; 
  if (arg1) (arg1)->stunServer = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_stunServer_get___(void * jarg1) {
  void * jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::StringVector *result = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (pj::StringVector *)& ((arg1)->stunServer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_stunTryIpv6_set___(void * jarg1, unsigned int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->stunTryIpv6 = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_stunTryIpv6_get___(void * jarg1) {
  unsigned int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (bool) ((arg1)->stunTryIpv6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_stunIgnoreFailure_set___(void * jarg1, unsigned int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->stunIgnoreFailure = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_stunIgnoreFailure_get___(void * jarg1) {
  unsigned int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (bool) ((arg1)->stunIgnoreFailure);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_natTypeInSdp_set___(void * jarg1, int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->natTypeInSdp = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_natTypeInSdp_get___(void * jarg1) {
  int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  int result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (int) ((arg1)->natTypeInSdp);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_mwiUnsolicitedEnabled_set___(void * jarg1, unsigned int jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->mwiUnsolicitedEnabled = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_mwiUnsolicitedEnabled_get___(void * jarg1) {
  unsigned int jresult ;
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::UaConfig *)jarg1; 
  result = (bool) ((arg1)->mwiUnsolicitedEnabled);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_UaConfig___() {
  void * jresult ;
  pj::UaConfig *result = 0 ;
  
  result = (pj::UaConfig *)new pj::UaConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_readObject___(void * jarg1, void * jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::UaConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_UaConfig___(void * jarg1) {
  pj::UaConfig *arg1 = (pj::UaConfig *) 0 ;
  
  arg1 = (pj::UaConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogEntry_level_set___(void * jarg1, int jarg2) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  int arg2 ;
  
  arg1 = (pj::LogEntry *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogEntry_level_get___(void * jarg1) {
  int jresult ;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  int result;
  
  arg1 = (pj::LogEntry *)jarg1; 
  result = (int) ((arg1)->level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogEntry_msg_set___(void * jarg1, char * jarg2) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::LogEntry *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->msg = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogEntry_msg_get___(void * jarg1) {
  char * jresult ;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::LogEntry *)jarg1; 
  result = (pj::string *) & ((arg1)->msg);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogEntry_threadId_set___(void * jarg1, long jarg2) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  long arg2 ;
  
  arg1 = (pj::LogEntry *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->threadId = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogEntry_threadId_get___(void * jarg1) {
  long jresult ;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  long result;
  
  arg1 = (pj::LogEntry *)jarg1; 
  result = (long) ((arg1)->threadId);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogEntry_threadName_set___(void * jarg1, char * jarg2) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::LogEntry *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->threadName = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogEntry_threadName_get___(void * jarg1) {
  char * jresult ;
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::LogEntry *)jarg1; 
  result = (pj::string *) & ((arg1)->threadName);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_LogEntry___() {
  void * jresult ;
  pj::LogEntry *result = 0 ;
  
  result = (pj::LogEntry *)new pj::LogEntry();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_LogEntry___(void * jarg1) {
  pj::LogEntry *arg1 = (pj::LogEntry *) 0 ;
  
  arg1 = (pj::LogEntry *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_LogWriter___(void * jarg1) {
  pj::LogWriter *arg1 = (pj::LogWriter *) 0 ;
  
  arg1 = (pj::LogWriter *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogWriter_write___(void * jarg1, void * jarg2) {
  pj::LogWriter *arg1 = (pj::LogWriter *) 0 ;
  pj::LogEntry *arg2 = 0 ;
  
  arg1 = (pj::LogWriter *)jarg1; 
  arg2 = (pj::LogEntry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::LogEntry const & type is null", 0);
    return ;
  } 
  (arg1)->write((pj::LogEntry const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_LogWriter___() {
  void * jresult ;
  pj::LogWriter *result = 0 ;
  
  result = (pj::LogWriter *)new SwigDirector_LogWriter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogWriter_director_connect___(void *objarg, SwigDirector_LogWriter::SWIG_Callback0_t callback0) {
  pj::LogWriter *obj = (pj::LogWriter *)objarg;
  SwigDirector_LogWriter *director = dynamic_cast<SwigDirector_LogWriter *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_msgLogging_set___(void * jarg1, unsigned int jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->msgLogging = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_msgLogging_get___(void * jarg1) {
  unsigned int jresult ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::LogConfig *)jarg1; 
  result = (unsigned int) ((arg1)->msgLogging);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_level_set___(void * jarg1, unsigned int jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->level = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_level_get___(void * jarg1) {
  unsigned int jresult ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::LogConfig *)jarg1; 
  result = (unsigned int) ((arg1)->level);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_consoleLevel_set___(void * jarg1, unsigned int jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->consoleLevel = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_consoleLevel_get___(void * jarg1) {
  unsigned int jresult ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::LogConfig *)jarg1; 
  result = (unsigned int) ((arg1)->consoleLevel);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_decor_set___(void * jarg1, unsigned int jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->decor = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_decor_get___(void * jarg1) {
  unsigned int jresult ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::LogConfig *)jarg1; 
  result = (unsigned int) ((arg1)->decor);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_filename_set___(void * jarg1, char * jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->filename = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_filename_get___(void * jarg1) {
  char * jresult ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::string *result = 0 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  result = (pj::string *) & ((arg1)->filename);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_fileFlags_set___(void * jarg1, unsigned int jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->fileFlags = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_fileFlags_get___(void * jarg1) {
  unsigned int jresult ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::LogConfig *)jarg1; 
  result = (unsigned int) ((arg1)->fileFlags);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_writer_set___(void * jarg1, void * jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::LogWriter *arg2 = (pj::LogWriter *) 0 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (pj::LogWriter *)jarg2; 
  if (arg1) (arg1)->writer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_writer_get___(void * jarg1) {
  void * jresult ;
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::LogWriter *result = 0 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  result = (pj::LogWriter *) ((arg1)->writer);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_LogConfig___() {
  void * jresult ;
  pj::LogConfig *result = 0 ;
  
  result = (pj::LogConfig *)new pj::LogConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_readObject___(void * jarg1, void * jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::LogConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_LogConfig___(void * jarg1) {
  pj::LogConfig *arg1 = (pj::LogConfig *) 0 ;
  
  arg1 = (pj::LogConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_clockRate_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->clockRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_clockRate_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->clockRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_sndClockRate_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->sndClockRate = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_sndClockRate_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->sndClockRate);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_channelCount_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->channelCount = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_channelCount_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->channelCount);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_audioFramePtime_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->audioFramePtime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_audioFramePtime_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->audioFramePtime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_maxMediaPorts_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->maxMediaPorts = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_maxMediaPorts_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->maxMediaPorts);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_hasIoqueue_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->hasIoqueue = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_hasIoqueue_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (bool) ((arg1)->hasIoqueue);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_threadCnt_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->threadCnt = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_threadCnt_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->threadCnt);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_quality_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->quality = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_quality_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->quality);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_ptime_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ptime = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_ptime_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->ptime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_noVad_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->noVad = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_noVad_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (bool) ((arg1)->noVad);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_ilbcMode_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ilbcMode = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_ilbcMode_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->ilbcMode);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_txDropPct_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->txDropPct = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_txDropPct_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->txDropPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_rxDropPct_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->rxDropPct = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_rxDropPct_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->rxDropPct);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_ecOptions_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ecOptions = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_ecOptions_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->ecOptions);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_ecTailLen_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->ecTailLen = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_ecTailLen_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->ecTailLen);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_sndRecLatency_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->sndRecLatency = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_sndRecLatency_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->sndRecLatency);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_sndPlayLatency_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->sndPlayLatency = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_sndPlayLatency_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  unsigned int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (unsigned int) ((arg1)->sndPlayLatency);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_jbInit_set___(void * jarg1, int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbInit = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_jbInit_get___(void * jarg1) {
  int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (int) ((arg1)->jbInit);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_jbMinPre_set___(void * jarg1, int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbMinPre = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_jbMinPre_get___(void * jarg1) {
  int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (int) ((arg1)->jbMinPre);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_jbMaxPre_set___(void * jarg1, int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbMaxPre = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_jbMaxPre_get___(void * jarg1) {
  int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (int) ((arg1)->jbMaxPre);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_jbMax_set___(void * jarg1, int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->jbMax = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_jbMax_get___(void * jarg1) {
  int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (int) ((arg1)->jbMax);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_sndAutoCloseTime_set___(void * jarg1, int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->sndAutoCloseTime = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_sndAutoCloseTime_get___(void * jarg1) {
  int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  int result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (int) ((arg1)->sndAutoCloseTime);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_vidPreviewEnableNative_set___(void * jarg1, unsigned int jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->vidPreviewEnableNative = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_vidPreviewEnableNative_get___(void * jarg1) {
  unsigned int jresult ;
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  bool result;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  result = (bool) ((arg1)->vidPreviewEnableNative);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_MediaConfig___() {
  void * jresult ;
  pj::MediaConfig *result = 0 ;
  
  result = (pj::MediaConfig *)new pj::MediaConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_readObject___(void * jarg1, void * jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::MediaConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_MediaConfig___(void * jarg1) {
  pj::MediaConfig *arg1 = (pj::MediaConfig *) 0 ;
  
  arg1 = (pj::MediaConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_EpConfig_uaConfig_set___(void * jarg1, void * jarg2) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::UaConfig *arg2 = (pj::UaConfig *) 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  arg2 = (pj::UaConfig *)jarg2; 
  if (arg1) (arg1)->uaConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_EpConfig_uaConfig_get___(void * jarg1) {
  void * jresult ;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::UaConfig *result = 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  result = (pj::UaConfig *)& ((arg1)->uaConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_EpConfig_logConfig_set___(void * jarg1, void * jarg2) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::LogConfig *arg2 = (pj::LogConfig *) 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  arg2 = (pj::LogConfig *)jarg2; 
  if (arg1) (arg1)->logConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_EpConfig_logConfig_get___(void * jarg1) {
  void * jresult ;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::LogConfig *result = 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  result = (pj::LogConfig *)& ((arg1)->logConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_EpConfig_medConfig_set___(void * jarg1, void * jarg2) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::MediaConfig *arg2 = (pj::MediaConfig *) 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  arg2 = (pj::MediaConfig *)jarg2; 
  if (arg1) (arg1)->medConfig = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_EpConfig_medConfig_get___(void * jarg1) {
  void * jresult ;
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::MediaConfig *result = 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  result = (pj::MediaConfig *)& ((arg1)->medConfig);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_EpConfig_readObject___(void * jarg1, void * jarg2) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->readObject((pj::ContainerNode const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_EpConfig_writeObject___(void * jarg1, void * jarg2) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  pj::ContainerNode *arg2 = 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  arg2 = (pj::ContainerNode *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::ContainerNode & type is null", 0);
    return ;
  } 
  try {
    ((pj::EpConfig const *)arg1)->writeObject(*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_EpConfig___() {
  void * jresult ;
  pj::EpConfig *result = 0 ;
  
  result = (pj::EpConfig *)new pj::EpConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_EpConfig___(void * jarg1) {
  pj::EpConfig *arg1 = (pj::EpConfig *) 0 ;
  
  arg1 = (pj::EpConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_PendingJob_execute___(void * jarg1, unsigned int jarg2) {
  pj::PendingJob *arg1 = (pj::PendingJob *) 0 ;
  bool arg2 ;
  
  arg1 = (pj::PendingJob *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->execute(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_PendingJob___(void * jarg1) {
  pj::PendingJob *arg1 = (pj::PendingJob *) 0 ;
  
  arg1 = (pj::PendingJob *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_instance___() {
  void * jresult ;
  pj::Endpoint *result = 0 ;
  
  try {
    result = (pj::Endpoint *) &pj::Endpoint::instance();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_new_Endpoint___() {
  void * jresult ;
  pj::Endpoint *result = 0 ;
  
  result = (pj::Endpoint *)new SwigDirector_Endpoint();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_delete_Endpoint___(void * jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_libVersion___(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Version result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  result = ((pj::Endpoint const *)arg1)->libVersion();
  jresult = new pj::Version((const pj::Version &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_libCreate___(void * jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    (arg1)->libCreate();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_libGetState___(void * jarg1) {
  int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pjsua_state result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  result = (pjsua_state)((pj::Endpoint const *)arg1)->libGetState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_libInit___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::EpConfig *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::EpConfig *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::EpConfig const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->libInit((pj::EpConfig const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_libStart___(void * jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    (arg1)->libStart();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_libRegisterThread___(void * jarg1, char * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->libRegisterThread((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_libIsThreadRegistered___(void * jarg1) {
  unsigned int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  bool result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  result = (bool)(arg1)->libIsThreadRegistered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_libStopWorkerThreads___(void * jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  (arg1)->libStopWorkerThreads();
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_libHandleEvents___(void * jarg1, unsigned int jarg2) {
  int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int arg2 ;
  int result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (int)(arg1)->libHandleEvents(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_libDestroy__SWIG_0___(void * jarg1, unsigned int jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  try {
    (arg1)->libDestroy(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_libDestroy__SWIG_1___(void * jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    (arg1)->libDestroy();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT char * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_utilStrError___(void * jarg1, int jarg2) {
  char * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj_status_t arg2 ;
  pj::string result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj_status_t)jarg2; 
  result = (arg1)->utilStrError(arg2);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_utilLogWrite__SWIG_0___(void * jarg1, int jarg2, char * jarg3, char * jarg4) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  int arg2 ;
  pj::string *arg3 = 0 ;
  pj::string *arg4 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (int)jarg2; 
  if (!jarg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  (arg1)->utilLogWrite(arg2,(pj::string const &)*arg3,(pj::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_utilLogWrite__SWIG_1___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::LogEntry *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::LogEntry *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::LogEntry & type is null", 0);
    return ;
  } 
  (arg1)->utilLogWrite(*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_utilVerifySipUri___(void * jarg1, char * jarg2) {
  int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj_status_t result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (pj_status_t)(arg1)->utilVerifySipUri((pj::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_utilVerifyUri___(void * jarg1, char * jarg2) {
  int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj_status_t result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (pj_status_t)(arg1)->utilVerifyUri((pj::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_utilTimerSchedule___(void * jarg1, unsigned int jarg2, void * jarg3) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int arg2 ;
  pj::Token arg3 = (pj::Token) 0 ;
  pj::Token result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (pj::Token)jarg3; 
  try {
    result = (pj::Token)(arg1)->utilTimerSchedule(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_utilTimerCancel___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::Token)jarg2; 
  (arg1)->utilTimerCancel(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_utilAddPendingJob___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::PendingJob *arg2 = (pj::PendingJob *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::PendingJob *)jarg2; 
  (arg1)->utilAddPendingJob(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_utilSslGetAvailableCiphers___(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::IntVector result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = (arg1)->utilSslGetAvailableCiphers();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::IntVector((const pj::IntVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_natDetectType___(void * jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    (arg1)->natDetectType();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_natGetType___(void * jarg1) {
  int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj_stun_nat_type result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = (pj_stun_nat_type)(arg1)->natGetType();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_natUpdateStunServers___(void * jarg1, void * jarg2, unsigned int jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::StringVector *arg2 = 0 ;
  bool arg3 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::StringVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::StringVector const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->natUpdateStunServers((pj::StringVector const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_natCheckStunServers___(void * jarg1, void * jarg2, unsigned int jarg3, void * jarg4) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::StringVector *arg2 = 0 ;
  bool arg3 ;
  pj::Token arg4 = (pj::Token) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::StringVector *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::StringVector const & type is null", 0);
    return ;
  } 
  arg3 = jarg3 ? true : false; 
  arg4 = (pj::Token)jarg4; 
  try {
    (arg1)->natCheckStunServers((pj::StringVector const &)*arg2,arg3,arg4);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_natCancelCheckStunServers__SWIG_0___(void * jarg1, void * jarg2, unsigned int jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  bool arg3 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::Token)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->natCancelCheckStunServers(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_natCancelCheckStunServers__SWIG_1___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::Token arg2 = (pj::Token) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::Token)jarg2; 
  try {
    (arg1)->natCancelCheckStunServers(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_transportCreate___(void * jarg1, int jarg2, void * jarg3) {
  int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pjsip_transport_type_e arg2 ;
  pj::TransportConfig *arg3 = 0 ;
  pj::TransportId result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pjsip_transport_type_e)jarg2; 
  arg3 = (pj::TransportConfig *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::TransportConfig const & type is null", 0);
    return 0;
  } 
  try {
    result = (pj::TransportId)(arg1)->transportCreate(arg2,(pj::TransportConfig const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_transportEnum___(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::IntVector result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = (arg1)->transportEnum();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::IntVector((const pj::IntVector &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_transportGetInfo___(void * jarg1, int jarg2) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::TransportId arg2 ;
  pj::TransportInfo result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  try {
    result = (arg1)->transportGetInfo(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::TransportInfo((const pj::TransportInfo &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_transportSetEnable___(void * jarg1, int jarg2, unsigned int jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::TransportId arg2 ;
  bool arg3 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  arg3 = jarg3 ? true : false; 
  try {
    (arg1)->transportSetEnable(arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_transportClose___(void * jarg1, int jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::TransportId arg2 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::TransportId)jarg2; 
  try {
    (arg1)->transportClose(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_transportShutdown___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::TransportHandle arg2 = (pj::TransportHandle) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::TransportHandle)jarg2; 
  try {
    (arg1)->transportShutdown(arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_hangupAllCalls___(void * jarg1) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  (arg1)->hangupAllCalls();
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_mediaAdd___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::AudioMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia & type is null", 0);
    return ;
  } 
  (arg1)->mediaAdd(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_mediaRemove___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::AudioMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia & type is null", 0);
    return ;
  } 
  (arg1)->mediaRemove(*arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_mediaExists___(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMedia *arg2 = 0 ;
  bool result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::AudioMedia *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::AudioMedia const & type is null", 0);
    return 0;
  } 
  result = (bool)((pj::Endpoint const *)arg1)->mediaExists((pj::AudioMedia const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_mediaMaxPorts___(void * jarg1) {
  unsigned int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  result = (unsigned int)((pj::Endpoint const *)arg1)->mediaMaxPorts();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_mediaActivePorts___(void * jarg1) {
  unsigned int jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  unsigned int result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  result = (unsigned int)((pj::Endpoint const *)arg1)->mediaActivePorts();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_mediaEnumPorts___(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudioMediaVector *result = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = (pj::AudioMediaVector *) &((pj::Endpoint const *)arg1)->mediaEnumPorts();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_audDevManager___(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::AudDevManager *result = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  result = (pj::AudDevManager *) &(arg1)->audDevManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_vidDevManager___(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::VidDevManager *result = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  result = (pj::VidDevManager *) &(arg1)->vidDevManager();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_codecEnum___(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::CodecInfoVector *result = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = (pj::CodecInfoVector *) &(arg1)->codecEnum();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_codecSetPriority___(void * jarg1, char * jarg2, unsigned char jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj_uint8_t arg3 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj_uint8_t)jarg3; 
  try {
    (arg1)->codecSetPriority((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_codecGetParam___(void * jarg1, char * jarg2) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CodecParam result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::Endpoint const *)arg1)->codecGetParam((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::CodecParam((const pj::CodecParam &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_codecSetParam___(void * jarg1, char * jarg2, void * jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::CodecParam arg3 ;
  pj::CodecParam const *argp3 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  argp3 = (pj::CodecParam *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null pj::CodecParam const", 0);
    return ;
  }
  arg3 = *argp3; 
  try {
    (arg1)->codecSetParam((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_videoCodecEnum___(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::CodecInfoVector *result = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = (pj::CodecInfoVector *) &(arg1)->videoCodecEnum();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_videoCodecSetPriority___(void * jarg1, char * jarg2, unsigned char jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj_uint8_t arg3 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj_uint8_t)jarg3; 
  try {
    (arg1)->videoCodecSetPriority((pj::string const &)*arg2,arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_getVideoCodecParam___(void * jarg1, char * jarg2) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::VidCodecParam result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = ((pj::Endpoint const *)arg1)->getVideoCodecParam((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::VidCodecParam((const pj::VidCodecParam &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_setVideoCodecParam___(void * jarg1, char * jarg2, void * jarg3) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  pj::VidCodecParam *arg3 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (pj::VidCodecParam *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::VidCodecParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->setVideoCodecParam((pj::string const &)*arg2,(pj::VidCodecParam const &)*arg3);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_resetVideoCodecParam___(void * jarg1, char * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::string *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  pj::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    (arg1)->resetVideoCodecParam((pj::string const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_srtpCryptoEnum___(void * jarg1) {
  void * jresult ;
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::StringVector result;
  
  arg1 = (pj::Endpoint *)jarg1; 
  try {
    result = (arg1)->srtpCryptoEnum();
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return 0; 
  }
  
  jresult = new pj::StringVector((const pj::StringVector &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_handleIpChange___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::IpChangeParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::IpChangeParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::IpChangeParam const & type is null", 0);
    return ;
  } 
  try {
    (arg1)->handleIpChange((pj::IpChangeParam const &)*arg2);
  }
  catch(pj::Error &_e) {
    (void)_e;
    SWIG_CSharpSetPendingException(SWIG_CSharpApplicationException, "C++ pj::Error exception thrown");
    return ; 
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_onNatDetectionComplete___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnNatDetectionCompleteParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnNatDetectionCompleteParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnNatDetectionCompleteParam const & type is null", 0);
    return ;
  } 
  (arg1)->onNatDetectionComplete((pj::OnNatDetectionCompleteParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_onNatDetectionCompleteSwigExplicitEndpoint___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnNatDetectionCompleteParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnNatDetectionCompleteParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnNatDetectionCompleteParam const & type is null", 0);
    return ;
  } 
  (arg1)->pj::Endpoint::onNatDetectionComplete((pj::OnNatDetectionCompleteParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_onNatCheckStunServersComplete___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnNatCheckStunServersCompleteParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnNatCheckStunServersCompleteParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnNatCheckStunServersCompleteParam const & type is null", 0);
    return ;
  } 
  (arg1)->onNatCheckStunServersComplete((pj::OnNatCheckStunServersCompleteParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_onNatCheckStunServersCompleteSwigExplicitEndpoint___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnNatCheckStunServersCompleteParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnNatCheckStunServersCompleteParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnNatCheckStunServersCompleteParam const & type is null", 0);
    return ;
  } 
  (arg1)->pj::Endpoint::onNatCheckStunServersComplete((pj::OnNatCheckStunServersCompleteParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_onTransportState___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnTransportStateParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnTransportStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTransportStateParam const & type is null", 0);
    return ;
  } 
  (arg1)->onTransportState((pj::OnTransportStateParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_onTransportStateSwigExplicitEndpoint___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnTransportStateParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnTransportStateParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTransportStateParam const & type is null", 0);
    return ;
  } 
  (arg1)->pj::Endpoint::onTransportState((pj::OnTransportStateParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_onTimer___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnTimerParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnTimerParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTimerParam const & type is null", 0);
    return ;
  } 
  (arg1)->onTimer((pj::OnTimerParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_onTimerSwigExplicitEndpoint___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnTimerParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnTimerParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnTimerParam const & type is null", 0);
    return ;
  } 
  (arg1)->pj::Endpoint::onTimer((pj::OnTimerParam const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_onSelectAccount___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnSelectAccountParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnSelectAccountParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnSelectAccountParam & type is null", 0);
    return ;
  } 
  (arg1)->onSelectAccount(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_onSelectAccountSwigExplicitEndpoint___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnSelectAccountParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnSelectAccountParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnSelectAccountParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Endpoint::onSelectAccount(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_onIpChangeProgress___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnIpChangeProgressParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnIpChangeProgressParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnIpChangeProgressParam & type is null", 0);
    return ;
  } 
  (arg1)->onIpChangeProgress(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_onIpChangeProgressSwigExplicitEndpoint___(void * jarg1, void * jarg2) {
  pj::Endpoint *arg1 = (pj::Endpoint *) 0 ;
  pj::OnIpChangeProgressParam *arg2 = 0 ;
  
  arg1 = (pj::Endpoint *)jarg1; 
  arg2 = (pj::OnIpChangeProgressParam *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "pj::OnIpChangeProgressParam & type is null", 0);
    return ;
  } 
  (arg1)->pj::Endpoint::onIpChangeProgress(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_Endpoint_director_connect___(void *objarg, SwigDirector_Endpoint::SWIG_Callback0_t callback0, SwigDirector_Endpoint::SWIG_Callback1_t callback1, SwigDirector_Endpoint::SWIG_Callback2_t callback2, SwigDirector_Endpoint::SWIG_Callback3_t callback3, SwigDirector_Endpoint::SWIG_Callback4_t callback4, SwigDirector_Endpoint::SWIG_Callback5_t callback5) {
  pj::Endpoint *obj = (pj::Endpoint *)objarg;
  SwigDirector_Endpoint *director = dynamic_cast<SwigDirector_Endpoint *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5);
  }
}


SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AuthCredInfo_SWIGUpcast___(pj::AuthCredInfo *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TlsConfig_SWIGUpcast___(pj::TlsConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_TransportConfig_SWIGUpcast___(pj::TransportConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::MediaFormat * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatAudio_SWIGUpcast___(pj::MediaFormatAudio *jarg1) {
    return (pj::MediaFormat *)jarg1;
}

SWIGEXPORT pj::MediaFormat * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaFormatVideo_SWIGUpcast___(pj::MediaFormatVideo *jarg1) {
    return (pj::MediaFormat *)jarg1;
}

SWIGEXPORT pj::Media * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMedia_SWIGUpcast___(pj::AudioMedia *jarg1) {
    return (pj::Media *)jarg1;
}

SWIGEXPORT pj::AudioMedia * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaPlayer_SWIGUpcast___(pj::AudioMediaPlayer *jarg1) {
    return (pj::AudioMedia *)jarg1;
}

SWIGEXPORT pj::AudioMedia * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AudioMediaRecorder_SWIGUpcast___(pj::AudioMediaRecorder *jarg1) {
    return (pj::AudioMedia *)jarg1;
}

SWIGEXPORT pjmedia_tone_desc * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDesc_SWIGUpcast___(pj::ToneDesc *jarg1) {
    return (pjmedia_tone_desc *)jarg1;
}

SWIGEXPORT pjmedia_tone_digit * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneDigit_SWIGUpcast___(pj::ToneDigit *jarg1) {
    return (pjmedia_tone_digit *)jarg1;
}

SWIGEXPORT pj::AudioMedia * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ToneGenerator_SWIGUpcast___(pj::ToneGenerator *jarg1) {
    return (pj::AudioMedia *)jarg1;
}

SWIGEXPORT pj::AudioMedia * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_ExtraAudioDevice_SWIGUpcast___(pj::ExtraAudioDevice *jarg1) {
    return (pj::AudioMedia *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_BuddyConfig_SWIGUpcast___(pj::BuddyConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountRegConfig_SWIGUpcast___(pj::AccountRegConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountSipConfig_SWIGUpcast___(pj::AccountSipConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountCallConfig_SWIGUpcast___(pj::AccountCallConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountPresConfig_SWIGUpcast___(pj::AccountPresConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMwiConfig_SWIGUpcast___(pj::AccountMwiConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountNatConfig_SWIGUpcast___(pj::AccountNatConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_SrtpOpt_SWIGUpcast___(pj::SrtpOpt *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_RtcpFbConfig_SWIGUpcast___(pj::RtcpFbConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountMediaConfig_SWIGUpcast___(pj::AccountMediaConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountVideoConfig_SWIGUpcast___(pj::AccountVideoConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_AccountConfig_SWIGUpcast___(pj::AccountConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentDocument * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_JsonDocument_SWIGUpcast___(pj::JsonDocument *jarg1) {
    return (pj::PersistentDocument *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_UaConfig_SWIGUpcast___(pj::UaConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_LogConfig_SWIGUpcast___(pj::LogConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_MediaConfig_SWIGUpcast___(pj::MediaConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

SWIGEXPORT pj::PersistentObject * SWIGSTDCALL CSharp_pjsua2xamarinfpjsua2_EpConfig_SWIGUpcast___(pj::EpConfig *jarg1) {
    return (pj::PersistentObject *)jarg1;
}

#ifdef __cplusplus
}
#endif

